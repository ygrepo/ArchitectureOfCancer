2023-11-17 18:04:47.972 Hail: WARN: This Hail JAR was compiled for Spark 3.3.0, running with Spark 3.3.3.
  Compatibility is not guaranteed.
2023-11-17 18:04:49.279 Hail: INFO: SparkUI: http://10.0.0.39:4040
2023-11-17 18:04:49.933 Hail: INFO: Running Hail version 0.2.126-ee77707f4fab
2023-11-17 18:04:51.819 : INFO: RegionPool: initialized for thread 78: Thread-20
2023-11-17 18:04:51.852 : INFO: RegionPool: initialized for thread 78: Thread-20
2023-11-17 18:04:51.854 : INFO: TaskReport: stage=0, partition=0, attempt=0, peakBytes=0, peakBytesReadable=0.00 B, chunks requested=0, cache hits=0
2023-11-17 18:04:51.860 : INFO: RegionPool: FREE: 0 allocated (0 blocks / 0 chunks), regions.size = 0, 0 current java objects, thread 78: Thread-20
2023-11-17 18:04:51.860 : INFO: RegionPool: FREE: 64.0K allocated (64.0K blocks / 0 chunks), regions.size = 1, 0 current java objects, thread 78: Thread-20
2023-11-17 18:07:53.987 Hail: INFO: balding_nichols_model: generating genotypes for 3 populations, 10 samples, and 100 variants...
2023-11-17 18:07:54.076 : INFO: RegionPool: initialized for thread 78: Thread-20
2023-11-17 18:07:54.601 : INFO: starting execution of query hail_query_1 of initial size 225
2023-11-17 18:07:54.721 : INFO: java.lang.UnsupportedOperationException: SemanticHash unknown: is.hail.expr.ir.CastTableToMatrix
2023-11-17 18:07:54.722 : INFO: IR Semantic Hash: None
2023-11-17 18:07:54.962 : INFO: initial IR: IR size 225: 

%1 = RNGStateLiteral
!2 = EncodedLiteral [Array[Tuple[Int32,Int32]]]
!s = ToStream(!2) [False] 
!c0 = I32 [0] 
!c1 = I32 [1]
!s2 = StreamIota(!c0, !c1) [False]
!s3 = StreamZip(!s, !s2) [19, TakeMinLength] {
(%elt, %elt2) =>
  !3 = Cast(%elt2) [Int64]
  MakeTuple(!3, %elt) [(0 1)]
} 
%4 = RNGStateLiteral
!c3 = I32 [3] 
!c10 = I32 [10] 
!c100 = I32 [100] 
!c8 = I32 [8] 
!5 = EncodedLiteral [Array[Int32]] 
!6 = EncodedLiteral [Array[Float64]] 
!false = False
!7 = MakeStruct(n_populations: !c3, n_samples: !c10, n_variants: !c100, n_partitions: !c8, pop_dist: !5, fst: !6, mixture: !false) 
!c0_2 = I32 [0] 
!c10_2 = I32 [10] 
!c1_2 = I32 [1]
!s4 = StreamRange(!c0_2, !c10_2, !c1_2) [1, False]
!s5 = StreamMap(!s4) { (%elt3) =>
  !8 = Cast(%elt3) [Int64]
  MakeTuple(!8, %elt3) [(0 1)]
}
!s8 = StreamMap(!s5) { (%elt4) =>
  !9 = GetTupleElement(%elt4) [0]
  %10 = RNGSplit(%4, !9)
  %11 = GetTupleElement(%elt4) [1]
  !12 = EncodedLiteral [Array[Int32]]
  !s6 = ToStream(!12) [False]
  !s7 = StreamMap(!s6) { (%elt5) =>
    ApplyIR(%elt5) [2, toFloat64, (), Float64]
  }
  !13 = ToArray(!s7)
  !14 = ApplySeeded(!13, %10) [rand_cat, 0, Int32]
  MakeStruct(sample_idx: %11, pop: !14)
}
!15 = ToArray(!s8)
!16 = MakeStruct(bn: !7, cols: !15) 
%17 = GetTupleElement(%undefined_ref) [0]
!c0_3 = I32 [0] 
!c1_3 = I32 [1]
!s9 = StreamIota(!c0_3, !c1_3) [False] 
%18 = RNGStateLiteral
%19 = RNGSplit(%18, %17)
%20 = GetTupleElement(%undefined_ref2) [1]
!21 = GetTupleElement(%20) [0] 
!22 = GetTupleElement(%20) [1] 
!c1_4 = I32 [1]
!s10 = StreamRange(!21, !22, !c1_4) [3, False]
!s11 = StreamMap(!s10) { (%elt6) =>
  !23 = Cast(%elt6) [Int64]
  MakeTuple(!23, %elt6) [(0 1)]
}
!s18 = StreamMap(!s11) { (%elt7) =>
  !24 = GetTupleElement(%elt7) [0]
  %25 = RNGSplit(%19, !24)
  %26 = GetTupleElement(%elt7) [1]
  !27 = F64 [0.1] 
  !28 = F64 [0.9]
  %29 = ApplySeeded(!27, !28, %25) [rand_unif, -1, Float64]
  !30 = ApplyIR(%26) [4, toInt64, (), Int64]
  !31 = Apply(!30) [5, globalPosToLocus, 
  (), Locus(GRCh37)] 
  !32 = EncodedLiteral [Array[String]] 
  !33 = EncodedLiteral [Array[Float64]]
  !s12 = ToStream(!33) [False] 
  !c0_4 = I32 [0] 
  !c1_5 = I32 [1]
  !s13 = StreamIota(!c0_4, !c1_5) [False]
  !s14 = StreamZip(!s12, !s13) [7, TakeMinLength] {
  (%elt8, %elt9) =>
    !34 = Cast(%elt9) [Int64]
    MakeTuple(!34, %elt8) [(0 1)]
  }
  !s15 = StreamMap(!s14) { (%elt10) =>
    !35 = GetTupleElement(%elt10) [0]
    %36 = RNGSplit(%25, !35)
    %37 = GetTupleElement(%elt10) [1]
    !38 = ApplyBinaryPrimOp(%29, %37) [Multiply] 
    !c1_6 = I32 [1]
    !39 = ApplyIR(!c1_6) [6, toFloat64, (), Float64]
    !40 = ApplyBinaryPrimOp(!39, %29) [Subtract]
    !41 = ApplyBinaryPrimOp(!40, %37) [Multiply]
    ApplySeeded(!38, !41, %36) [rand_beta, 1, Float64]
  }
  !42 = ToArray(!s15) 
  %43 = MakeStruct()
  !c0_5 = I32 [0] 
  !c10_3 = I32 [10] 
  !c1_7 = I32 [1]
  !s16 = StreamRange(!c0_5, !c10_3, !c1_7) [8, False]
  !s17 = StreamMap(!s16) { (%elt11) => %43 }
  !44 = ToArray(!s17)
  MakeStruct(locus: !31, alleles: !32, ancestral_af: %29, af: !42, entries: !44)
}
!s19 = StreamZip(!s9, !s18) [20, TakeMinLength] {
(%elt12, %elt13) =>
  !45 = Cast(%elt12) [Int64]
  !46 = MakeTuple(%17, !45) [(0 1)]
  InsertFields %elt13 (__row_uid: !46)
}
!ht = TableGen(!s3, !16, !s19) [__uid_24, globals___uid_8, (Partitioner Struct{locus:Locus(GRCh37),alleles:Array[String]}"[{\"start\":{\"locus\":{\"contig\":\"1\",\"position\":1},\"alleles\":[\"A\",\"C\"]},\"end\":{\"locus\":{\"contig\":\"1\",\"position\":13},\"alleles\":[\"A\",\"C\"]},\"includeStart\":true,\"includeEnd\":false},{\"start\":{\"locus\":{\"contig\":\"1\",\"position\":13},\"alleles\":[\"A\",\"C\"]},\"end\":{\"locus\":{\"contig\":\"1\",\"position\":26},\"alleles\":[\"A\",\"C\"]},\"includeStart\":true,\"includeEnd\":false},{\"start\":{\"locus\":{\"contig\":\"1\",\"position\":26},\"alleles\":[\"A\",\"C\"]},\"end\":{\"locus\":{\"contig\":\"1\",\"position\":38},\"alleles\":[\"A\",\"C\"]},\"includeStart\":true,\"includeEnd\":false},{\"start\":{\"locus\":{\"contig\":\"1\",\"position\":38},\"alleles\":[\"A\",\"C\"]},\"end\":{\"locus\":{\"contig\":\"1\",\"position\":51},\"alleles\":[\"A\",\"C\"]},\"includeStart\":true,\"includeEnd\":false},{\"start\":{\"locus\":{\"contig\":\"1\",\"position\":51},\"alleles\":[\"A\",\"C\"]},\"end\":{\"locus\":{\"contig\":\"1\",\"position\":63},\"alleles\":[\"A\",\"C\"]},\"includeStart\":true,\"includeEnd\":false},{\"start\":{\"locus\":{\"contig\":\"1\",\"position\":63},\"alleles\":[\"A\",\"C\"]},\"end\":{\"locus\":{\"contig\":\"1\",\"position\":76},\"alleles\":[\"A\",\"C\"]},\"includeStart\":true,\"includeEnd\":false},{\"start\":{\"locus\":{\"contig\":\"1\",\"position\":76},\"alleles\":[\"A\",\"C\"]},\"end\":{\"locus\":{\"contig\":\"1\",\"position\":88},\"alleles\":[\"A\",\"C\"]},\"includeStart\":true,\"includeEnd\":false},{\"start\":{\"locus\":{\"contig\":\"1\",\"position\":88},\"alleles\":[\"A\",\"C\"]},\"end\":{\"locus\":{\"contig\":\"1\",\"position\":101},\"alleles\":[\"A\",\"C\"]},\"includeStart\":true,\"includeEnd\":false}]"), 9]
!ht2 = TableMapGlobals(!ht) { (%g) =>
  %47 = GetField(%g) [cols]
  !s20 = ToStream(%47) [False] 
  !c0_6 = I32 [0] 
  !c1_8 = I32 [1]
  !s21 = StreamIota(!c0_6, !c1_8) [False]
  !s22 = StreamZip(!s20, !s21) [18, TakeMinLength] {
  (%elt14, %elt15) =>
    !48 = Cast(%elt15) [Int64]
    InsertFields %elt14 (__col_uid: !48)
  }
  !49 = ToArray(!s22)
  InsertFields %g (cols: !49)
}
!50 = CastTableToMatrix(!ht2) [entries, cols, 
(sample_idx)]
!77 = MatrixMapEntries(!50) {
(%g2, %col, %row, %entry) =>
  %51 = GetField(%row) [__row_uid]
  !52 = RNGStateLiteral 
  !53 = GetTupleElement(%51) [0] 
  !54 = GetTupleElement(%51) [1] 
  !55 = GetField(%col) [__col_uid]
  !56 = MakeTuple(!53, !54, !55) [(0 1 2)]
  %57 = RNGSplit(!52, !56)
  %58 = SelectFields(%col) [(sample_idx pop)]
  %59 = SelectFields(%row) [
  (locus alleles ancestral_af af)]
  !60 = GetField(%59) [af] 
  !61 = GetField(%58) [pop]
  %62 = ApplyIR(!60, !61) [10, indexArray, 
  (), Float64]
  !c1_9 = I32 [1]
  !63 = ApplyIR(!c1_9) [11, toFloat64, (), Float64]
  %64 = ApplyBinaryPrimOp(!63, %62) [Subtract]
  !65 = SelectFields(%entry) [()]
  !66 = SelectFields(!65) [()] 
  !c2 = I32 [2]
  !67 = ApplyIR(!c2) [12, toFloat64, (), Float64]
  !68 = Apply(%64, !67) [13, pow, (), Float64] 
  !c2_2 = I32 [2]
  !69 = ApplyIR(!c2_2) [14, toFloat64, (), Float64]
  !70 = ApplyBinaryPrimOp(!69, %62) [Multiply]
  !71 = ApplyBinaryPrimOp(!70, %64) [Multiply] 
  !c2_3 = I32 [2]
  !72 = ApplyIR(!c2_3) [15, toFloat64, (), Float64]
  !73 = Apply(%62, !72) [16, pow, (), Float64]
  !74 = MakeArray(!68, !71, !73) [Array[Float64]]
  !75 = ApplySeeded(!74, %57) [rand_cat, 2, Int32]
  !76 = Apply(!75) [17, UnphasedDiploidGtIndexCall, 
  (), Call]
  InsertFields !66 (GT: !76)
}
!78 = MatrixMapRows(!77) {
(%g3, %row2, %col2, %entry2, %n_cols) =>
  SelectFields(%row2) [
  (locus alleles ancestral_af af)]
}
!79 = MatrixMapCols(!78) [None] {
(%g4, %row3, %col3, %entry3, %n_rows) =>
  SelectFields(%col3) [(sample_idx pop)]
}
!ht3 = MatrixColsTable(!79)
TableCount(!ht3)

2023-11-17 18:07:54.979 : INFO: decoder cache miss (0 hits, 1 misses, 0.000
2023-11-17 18:07:55.093 : INFO: instruction count: 3: __C1HailClassLoaderContainer.<init>
2023-11-17 18:07:55.093 : INFO: instruction count: 3: __C1HailClassLoaderContainer.<clinit>
2023-11-17 18:07:55.095 : INFO: instruction count: 3: __C3FSContainer.<init>
2023-11-17 18:07:55.095 : INFO: instruction count: 3: __C3FSContainer.<clinit>
2023-11-17 18:07:55.106 : INFO: instruction count: 3: __C5etypeDecode.<init>
2023-11-17 18:07:55.106 : INFO: instruction count: 8: __C5etypeDecode.apply
2023-11-17 18:07:55.108 : INFO: instruction count: 217: __C5etypeDecode.__m7DECODE_o_array_of_o_int32_TO_SIndexablePointer
2023-11-17 18:07:55.108 : INFO: instruction count: 10: __C5etypeDecode.__m9INPLACE_DECODE_o_int32_TO_o_int32
2023-11-17 18:07:55.109 : INFO: instruction count: 3: __C8Tuple3.<init>
2023-11-17 18:07:55.109 : INFO: instruction count: 12: __C8Tuple3.<init>
2023-11-17 18:07:55.119 : INFO: decoder cache miss (0 hits, 2 misses, 0.000
2023-11-17 18:07:55.124 : INFO: instruction count: 3: __C10HailClassLoaderContainer.<init>
2023-11-17 18:07:55.124 : INFO: instruction count: 3: __C10HailClassLoaderContainer.<clinit>
2023-11-17 18:07:55.124 : INFO: instruction count: 3: __C12FSContainer.<init>
2023-11-17 18:07:55.125 : INFO: instruction count: 3: __C12FSContainer.<clinit>
2023-11-17 18:07:55.129 : INFO: instruction count: 3: __C14etypeDecode.<init>
2023-11-17 18:07:55.129 : INFO: instruction count: 8: __C14etypeDecode.apply
2023-11-17 18:07:55.130 : INFO: instruction count: 217: __C14etypeDecode.__m16DECODE_o_array_of_o_float64_TO_SIndexablePointer
2023-11-17 18:07:55.130 : INFO: instruction count: 10: __C14etypeDecode.__m18INPLACE_DECODE_o_float64_TO_o_float64
2023-11-17 18:07:55.131 : INFO: instruction count: 3: __C17Tuple3.<init>
2023-11-17 18:07:55.131 : INFO: instruction count: 12: __C17Tuple3.<init>
2023-11-17 18:07:55.284 : INFO: Prune: MakeStruct: eliminating field 'bn'
2023-11-17 18:07:55.286 : INFO: Prune: MakeStruct: eliminating field 'locus'
2023-11-17 18:07:55.286 : INFO: Prune: MakeStruct: eliminating field 'alleles'
2023-11-17 18:07:55.286 : INFO: Prune: MakeStruct: eliminating field 'ancestral_af'
2023-11-17 18:07:55.286 : INFO: Prune: MakeStruct: eliminating field 'af'
2023-11-17 18:07:55.287 : INFO: Prune: InsertFields: eliminating field '__row_uid'
2023-11-17 18:07:55.331 : INFO: after optimize: relationalLowerer, initial IR: IR size 78: 

!1 = EncodedLiteral [Array[Tuple[Int32,Int32]]]
!s = ToStream(!1) [False] 
!c0 = I32 [0] 
!c1 = I32 [1]
!s2 = StreamIota(!c0, !c1) [False]
!s3 = StreamZip(!s, !s2) [19, TakeMinLength] {
(%elt, %elt2) =>
  MakeTuple(%elt) [(1)]
} 
%2 = RNGStateLiteral
!c0_2 = I32 [0] 
!c10 = I32 [10] 
!c1_2 = I32 [1]
!s4 = StreamRange(!c0_2, !c10, !c1_2) [1, False]
!s7 = StreamMap(!s4) { (%elt3) =>
  !3 = Cast(%elt3) [Int64]
  %4 = MakeTuple(!3, %elt3) [(0 1)]
  !5 = GetTupleElement(%4) [1] 
  !6 = EncodedLiteral [Array[Int32]]
  !s5 = ToStream(!6) [False]
  !s6 = StreamMap(!s5) { (%elt4) =>
    Cast(%elt4) [Float64]
  }
  !7 = ToArray(!s6) 
  !8 = GetTupleElement(%4) [0]
  !9 = RNGSplit(%2, !8)
  !10 = ApplySeeded(!7, !9) [rand_cat, 0, Int32]
  MakeStruct(sample_idx: !5, pop: !10)
}
!11 = ToArray(!s7)
!12 = MakeStruct(cols: !11) 
!c0_3 = I32 [0] 
!c1_3 = I32 [1]
!s8 = StreamIota(!c0_3, !c1_3) [False] 
%13 = GetTupleElement(%undefined_ref) [1]
!14 = GetTupleElement(%13) [0] 
!15 = GetTupleElement(%13) [1] 
!c1_4 = I32 [1]
!s9 = StreamRange(!14, !15, !c1_4) [3, False]
!s12 = StreamMap(!s9) { (%elt5) =>
  !c0_4 = I32 [0] 
  !c10_2 = I32 [10] 
  !c1_5 = I32 [1]
  !s10 = StreamRange(!c0_4, !c10_2, !c1_5) [8, False]
  !s11 = StreamMap(!s10) { (%elt6) =>
    Literal [Struct{}, <literal value>]
  }
  !16 = ToArray(!s11)
  MakeStruct(entries: !16)
}
!s13 = StreamZip(!s8, !s12) [20, TakeMinLength] {
(%elt7, %elt8) => %elt8 }
!ht = TableGen(!s3, !12, !s13) [__uid_24, globals___uid_8, (Partitioner Struct{}"[{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true}]"), 9]
!ht2 = TableMapGlobals(!ht) { (%g) =>
  !17 = GetField(%g) [cols]
  !s14 = ToStream(!17) [False] 
  !c0_5 = I32 [0] 
  !c1_6 = I32 [1]
  !s15 = StreamIota(!c0_5, !c1_6) [False]
  !s16 = StreamZip(!s14, !s15) [18, TakeMinLength] {
  (%elt9, %elt10) =>
    !18 = Cast(%elt10) [Int64]
    InsertFields %elt9 (__col_uid: !18)
  }
  !19 = ToArray(!s16)
  InsertFields %g (cols: !19)
}
!20 = CastTableToMatrix(!ht2) [entries, cols, ()]
!ht3 = MatrixColsTable(!20)
TableCount(!ht3)

2023-11-17 18:07:55.367 : INFO: after LowerMatrixToTable: IR size 123: 

!1 = EncodedLiteral [Array[Tuple[Int32,Int32]]]
!s = ToStream(!1) [False] 
!c0 = I32 [0] 
!c1 = I32 [1]
!s2 = StreamIota(!c0, !c1) [False]
!s3 = StreamZip(!s, !s2) [19, TakeMinLength] {
(%elt, %elt2) =>
  MakeTuple(%elt) [(1)]
} 
%2 = RNGStateLiteral
!c0_2 = I32 [0] 
!c10 = I32 [10] 
!c1_2 = I32 [1]
!s4 = StreamRange(!c0_2, !c10, !c1_2) [1, False]
!s7 = StreamMap(!s4) { (%elt3) =>
  !3 = Cast(%elt3) [Int64]
  %4 = MakeTuple(!3, %elt3) [(0 1)]
  !5 = GetTupleElement(%4) [1] 
  !6 = EncodedLiteral [Array[Int32]]
  !s5 = ToStream(!6) [False]
  !s6 = StreamMap(!s5) { (%elt4) =>
    Cast(%elt4) [Float64]
  }
  !7 = ToArray(!s6) 
  !8 = GetTupleElement(%4) [0]
  !9 = RNGSplit(%2, !8)
  !10 = ApplySeeded(!7, !9) [rand_cat, 0, Int32]
  MakeStruct(sample_idx: !5, pop: !10)
}
!11 = ToArray(!s7)
!12 = MakeStruct(cols: !11) 
!c0_3 = I32 [0] 
!c1_3 = I32 [1]
!s8 = StreamIota(!c0_3, !c1_3) [False] 
%13 = GetTupleElement(%undefined_ref) [1]
!14 = GetTupleElement(%13) [0] 
!15 = GetTupleElement(%13) [1] 
!c1_4 = I32 [1]
!s9 = StreamRange(!14, !15, !c1_4) [3, False]
!s12 = StreamMap(!s9) { (%elt5) =>
  !c0_4 = I32 [0] 
  !c10_2 = I32 [10] 
  !c1_5 = I32 [1]
  !s10 = StreamRange(!c0_4, !c10_2, !c1_5) [8, False]
  !s11 = StreamMap(!s10) { (%elt6) =>
    Literal [Struct{}, <literal value>]
  }
  !16 = ToArray(!s11)
  MakeStruct(entries: !16)
}
!s13 = StreamZip(!s8, !s12) [20, TakeMinLength] {
(%elt7, %elt8) => %elt8 }
!ht = TableGen(!s3, !12, !s13) [__uid_24, globals___uid_8, (Partitioner Struct{}"[{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true}]"), 9]
!ht2 = TableMapGlobals(!ht) { (%g) =>
  !17 = GetField(%g) [cols]
  !s14 = ToStream(!17) [False] 
  !c0_5 = I32 [0] 
  !c1_6 = I32 [1]
  !s15 = StreamIota(!c0_5, !c1_6) [False]
  !s16 = StreamZip(!s14, !s15) [18, TakeMinLength] {
  (%elt9, %elt10) =>
    !18 = Cast(%elt10) [Int64]
    InsertFields %elt9 (__col_uid: !18)
  }
  !19 = ToArray(!s16)
  InsertFields %g (cols: !19)
}
!ht3 = TableMapRows(!ht2) { (%g2, %row) =>
  %20 = GetField(%row) [entries]
  !21 = IsNA(%20)
  If !21 then {
    !22 = Str ["missing en..."]
    Die(!22) [Struct{entries:Array[Struct{}]}, -1]
  } else {
    !23 = GetField(%g2) [cols]
    %24 = ArrayLen(!23)
    %25 = ArrayLen(%20)
    !26 = ApplyComparisonOp(%25, %24) [NEQWithNA]
    If !26 then {
      !27 = Str ["length mis..."] 
      !28 = Apply(%25) [-1, str, (), String]
      !29 = Apply(!27, !28) [-1, concat, (), String] 
      !30 = Str [" entries, "]
      !31 = Apply(!29, !30) [-1, concat, (), String] 
      !32 = Apply(%24) [-1, str, (), String]
      !33 = Apply(!31, !32) [-1, concat, (), String] 
      !34 = Str [" cols, at "]
      !35 = Apply(!33, !34) [-1, concat, (), String] 
      !36 = SelectFields(%row) [()]
      !37 = Apply(!36) [-1, str, (), String]
      !38 = Apply(!35, !37) [-1, concat, (), String]
      Die(!38) [Struct{entries:Array[Struct{}]}, -1]
    } else { %row }
  }
}
!ht4 = TableRename(!ht3) [("entries"), 
(
  "the entries! [877f12a8827e18f61222c6c8c5fb04a8]"), 
("cols"), ("__cols")]
%39 = TableGetGlobals(!ht4)
!40 = GetField(%39) [__cols] 
!41 = SelectFields(%39) [()]
!42 = MakeStruct(rows: !40, global: !41)
!ht5 = TableParallelize(!42) [None]
!ht6 = TableKeyBy(!ht5) [(), False]
TableCount(!ht6)

2023-11-17 18:07:55.397 : INFO: Prune: MakeStruct: eliminating field 'entries'
2023-11-17 18:07:55.397 : INFO: Prune: MakeStruct: eliminating field 'global'
2023-11-17 18:07:55.421 : INFO: after optimize: relationalLowerer, after LowerMatrixToTable: IR size 66: 

!1 = EncodedLiteral [Array[Tuple[Int32,Int32]]]
!s = ToStream(!1) [False] 
!c0 = I32 [0] 
!c1 = I32 [1]
!s2 = StreamIota(!c0, !c1) [False]
!s3 = StreamZip(!s, !s2) [19, TakeMinLength] {
(%elt, %elt2) =>
  MakeTuple(%elt) [(1)]
} 
%2 = RNGStateLiteral
!c0_2 = I32 [0] 
!c10 = I32 [10] 
!c1_2 = I32 [1]
!s4 = StreamRange(!c0_2, !c10, !c1_2) [1, False]
!s7 = StreamMap(!s4) { (%elt3) =>
  !3 = Cast(%elt3) [Int64]
  %4 = MakeTuple(!3, %elt3) [(0 1)]
  !5 = GetTupleElement(%4) [1] 
  !6 = EncodedLiteral [Array[Int32]]
  !s5 = ToStream(!6) [False]
  !s6 = StreamMap(!s5) { (%elt4) =>
    Cast(%elt4) [Float64]
  }
  !7 = ToArray(!s6) 
  !8 = GetTupleElement(%4) [0]
  !9 = RNGSplit(%2, !8)
  !10 = ApplySeeded(!7, !9) [rand_cat, 0, Int32]
  MakeStruct(sample_idx: !5, pop: !10)
}
!11 = ToArray(!s7)
!12 = MakeStruct(cols: !11) 
!c0_3 = I32 [0] 
!c1_3 = I32 [1]
!s8 = StreamIota(!c0_3, !c1_3) [False] 
%13 = GetTupleElement(%undefined_ref) [1]
!14 = GetTupleElement(%13) [0] 
!15 = GetTupleElement(%13) [1] 
!c1_4 = I32 [1]
!s9 = StreamRange(!14, !15, !c1_4) [3, False]
!s10 = StreamMap(!s9) { (%elt5) =>
  Literal [Struct{}, <literal value>]
}
!s11 = StreamZip(!s8, !s10) [20, TakeMinLength] {
(%elt6, %elt7) => %elt7 }
!ht = TableGen(!s3, !12, !s11) [__uid_24, globals___uid_8, (Partitioner Struct{}"[{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true}]"), 9]
!16 = TableGetGlobals(!ht)
!17 = GetField(!16) [cols]
!s12 = ToStream(!17) [False] 
!c0_4 = I32 [0] 
!c1_5 = I32 [1]
!s13 = StreamIota(!c0_4, !c1_5) [False]
!s14 = StreamZip(!s12, !s13) [18, TakeMinLength] {
(%elt8, %elt9) =>
  !18 = Cast(%elt9) [Int64]
  InsertFields %elt8 (__col_uid: !18)
}
!19 = StreamLen(!s14)
Cast(!19) [Int64]

2023-11-17 18:07:55.428 : INFO: after LiftRelationalValuesToRelationalLets: IR size 68: 

!1 = EncodedLiteral [Array[Tuple[Int32,Int32]]]
!s = ToStream(!1) [False] 
!c0 = I32 [0] 
!c1 = I32 [1]
!s2 = StreamIota(!c0, !c1) [False]
!s3 = StreamZip(!s, !s2) [19, TakeMinLength] {
(%elt, %elt2) =>
  MakeTuple(%elt) [(1)]
} 
%2 = RNGStateLiteral
!c0_2 = I32 [0] 
!c10 = I32 [10] 
!c1_2 = I32 [1]
!s4 = StreamRange(!c0_2, !c10, !c1_2) [1, False]
!s7 = StreamMap(!s4) { (%elt3) =>
  !3 = Cast(%elt3) [Int64]
  %4 = MakeTuple(!3, %elt3) [(0 1)]
  !5 = GetTupleElement(%4) [1] 
  !6 = EncodedLiteral [Array[Int32]]
  !s5 = ToStream(!6) [False]
  !s6 = StreamMap(!s5) { (%elt4) =>
    Cast(%elt4) [Float64]
  }
  !7 = ToArray(!s6) 
  !8 = GetTupleElement(%4) [0]
  !9 = RNGSplit(%2, !8)
  !10 = ApplySeeded(!7, !9) [rand_cat, 0, Int32]
  MakeStruct(sample_idx: !5, pop: !10)
}
!11 = ToArray(!s7)
!12 = MakeStruct(cols: !11) 
!c0_3 = I32 [0] 
!c1_3 = I32 [1]
!s8 = StreamIota(!c0_3, !c1_3) [False] 
%13 = GetTupleElement(%undefined_ref) [1]
!14 = GetTupleElement(%13) [0] 
!15 = GetTupleElement(%13) [1] 
!c1_4 = I32 [1]
!s9 = StreamRange(!14, !15, !c1_4) [3, False]
!s10 = StreamMap(!s9) { (%elt5) =>
  Literal [Struct{}, <literal value>]
}
!s11 = StreamZip(!s8, !s10) [20, TakeMinLength] {
(%elt6, %elt7) => %elt7 }
!ht = TableGen(!s3, !12, !s11) [__uid_24, globals___uid_8, (Partitioner Struct{}"[{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true}]"), 9]
%16 = TableGetGlobals(!ht)
!17 = GetField(%16) [cols]
!s12 = ToStream(!17) [False] 
!c0_4 = I32 [0] 
!c1_5 = I32 [1]
!s13 = StreamIota(!c0_4, !c1_5) [False]
!s14 = StreamZip(!s12, !s13) [18, TakeMinLength] {
(%elt8, %elt9) =>
  !18 = Cast(%elt9) [Int64]
  InsertFields %elt8 (__col_uid: !18)
}
!19 = StreamLen(!s14)
Cast(!19) [Int64]

2023-11-17 18:07:55.432 : INFO: initial IR: IR size 54: 

!1 = EncodedLiteral [Array[Tuple[Int32,Int32]]]
!s = ToStream(!1) [False] 
!c0 = I32 [0] 
!c1 = I32 [1]
!s2 = StreamIota(!c0, !c1) [False]
!s3 = StreamZip(!s, !s2) [19, TakeMinLength] {
(%elt, %elt2) =>
  MakeTuple(%elt) [(1)]
} 
%2 = RNGStateLiteral
!c0_2 = I32 [0] 
!c10 = I32 [10] 
!c1_2 = I32 [1]
!s4 = StreamRange(!c0_2, !c10, !c1_2) [1, False]
!s7 = StreamMap(!s4) { (%elt3) =>
  !3 = Cast(%elt3) [Int64]
  %4 = MakeTuple(!3, %elt3) [(0 1)]
  !5 = GetTupleElement(%4) [1] 
  !6 = EncodedLiteral [Array[Int32]]
  !s5 = ToStream(!6) [False]
  !s6 = StreamMap(!s5) { (%elt4) =>
    Cast(%elt4) [Float64]
  }
  !7 = ToArray(!s6) 
  !8 = GetTupleElement(%4) [0]
  !9 = RNGSplit(%2, !8)
  !10 = ApplySeeded(!7, !9) [rand_cat, 0, Int32]
  MakeStruct(sample_idx: !5, pop: !10)
}
!11 = ToArray(!s7)
!12 = MakeStruct(cols: !11) 
!c0_3 = I32 [0] 
!c1_3 = I32 [1]
!s8 = StreamIota(!c0_3, !c1_3) [False] 
%13 = GetTupleElement(%undefined_ref) [1]
!14 = GetTupleElement(%13) [0] 
!15 = GetTupleElement(%13) [1] 
!c1_4 = I32 [1]
!s9 = StreamRange(!14, !15, !c1_4) [3, False]
!s10 = StreamMap(!s9) { (%elt5) =>
  Literal [Struct{}, <literal value>]
}
!s11 = StreamZip(!s8, !s10) [20, TakeMinLength] {
(%elt6, %elt7) => %elt7 }
!ht = TableGen(!s3, !12, !s11) [__uid_24, globals___uid_8, (Partitioner Struct{}"[{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true}]"), 9]
TableGetGlobals(!ht)

2023-11-17 18:07:55.438 : INFO: after LowerAndExecuteShuffles: IR size 54: 

!1 = EncodedLiteral [Array[Tuple[Int32,Int32]]]
!s = ToStream(!1) [False] 
!c0 = I32 [0] 
!c1 = I32 [1]
!s2 = StreamIota(!c0, !c1) [False]
!s3 = StreamZip(!s, !s2) [19, TakeMinLength] {
(%elt, %elt2) =>
  MakeTuple(%elt) [(1)]
} 
%2 = RNGStateLiteral
!c0_2 = I32 [0] 
!c10 = I32 [10] 
!c1_2 = I32 [1]
!s4 = StreamRange(!c0_2, !c10, !c1_2) [1, False]
!s7 = StreamMap(!s4) { (%elt3) =>
  !3 = Cast(%elt3) [Int64]
  %4 = MakeTuple(!3, %elt3) [(0 1)]
  !5 = GetTupleElement(%4) [1] 
  !6 = EncodedLiteral [Array[Int32]]
  !s5 = ToStream(!6) [False]
  !s6 = StreamMap(!s5) { (%elt4) =>
    Cast(%elt4) [Float64]
  }
  !7 = ToArray(!s6) 
  !8 = GetTupleElement(%4) [0]
  !9 = RNGSplit(%2, !8)
  !10 = ApplySeeded(!7, !9) [rand_cat, 0, Int32]
  MakeStruct(sample_idx: !5, pop: !10)
}
!11 = ToArray(!s7)
!12 = MakeStruct(cols: !11) 
!c0_3 = I32 [0] 
!c1_3 = I32 [1]
!s8 = StreamIota(!c0_3, !c1_3) [False] 
%13 = GetTupleElement(%undefined_ref) [1]
!14 = GetTupleElement(%13) [0] 
!15 = GetTupleElement(%13) [1] 
!c1_4 = I32 [1]
!s9 = StreamRange(!14, !15, !c1_4) [3, False]
!s10 = StreamMap(!s9) { (%elt5) =>
  Literal [Struct{}, <literal value>]
}
!s11 = StreamZip(!s8, !s10) [20, TakeMinLength] {
(%elt6, %elt7) => %elt7 }
!ht = TableGen(!s3, !12, !s11) [__uid_24, globals___uid_8, (Partitioner Struct{}"[{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true}]"), 9]
TableGetGlobals(!ht)

2023-11-17 18:07:55.459 : INFO: after optimize: relationalLowerer, after LowerAndExecuteShuffles: IR size 54: 

!1 = EncodedLiteral [Array[Tuple[Int32,Int32]]]
!s = ToStream(!1) [False] 
!c0 = I32 [0] 
!c1 = I32 [1]
!s2 = StreamIota(!c0, !c1) [False]
!s3 = StreamZip(!s, !s2) [19, TakeMinLength] {
(%elt, %elt2) =>
  MakeTuple(%elt) [(1)]
} 
%2 = RNGStateLiteral
!c0_2 = I32 [0] 
!c10 = I32 [10] 
!c1_2 = I32 [1]
!s4 = StreamRange(!c0_2, !c10, !c1_2) [1, False]
!s7 = StreamMap(!s4) { (%elt3) =>
  !3 = Cast(%elt3) [Int64]
  %4 = MakeTuple(!3, %elt3) [(0 1)]
  !5 = GetTupleElement(%4) [1] 
  !6 = EncodedLiteral [Array[Int32]]
  !s5 = ToStream(!6) [False]
  !s6 = StreamMap(!s5) { (%elt4) =>
    Cast(%elt4) [Float64]
  }
  !7 = ToArray(!s6) 
  !8 = GetTupleElement(%4) [0]
  !9 = RNGSplit(%2, !8)
  !10 = ApplySeeded(!7, !9) [rand_cat, 0, Int32]
  MakeStruct(sample_idx: !5, pop: !10)
}
!11 = ToArray(!s7)
!12 = MakeStruct(cols: !11) 
!c0_3 = I32 [0] 
!c1_3 = I32 [1]
!s8 = StreamIota(!c0_3, !c1_3) [False] 
%13 = GetTupleElement(%undefined_ref) [1]
!14 = GetTupleElement(%13) [0] 
!15 = GetTupleElement(%13) [1] 
!c1_4 = I32 [1]
!s9 = StreamRange(!14, !15, !c1_4) [3, False]
!s10 = StreamMap(!s9) { (%elt5) =>
  Literal [Struct{}, <literal value>]
}
!s11 = StreamZip(!s8, !s10) [20, TakeMinLength] {
(%elt6, %elt7) => %elt7 }
!ht = TableGen(!s3, !12, !s11) [__uid_24, globals___uid_8, (Partitioner Struct{}"[{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true}]"), 9]
TableGetGlobals(!ht)

2023-11-17 18:07:55.463 : INFO: LowerOrInterpretNonCompilable: whole stage code generation is a go!
2023-11-17 18:07:55.463 : INFO: lowering result: TableGetGlobals
2023-11-17 18:07:55.519 : INFO: compiling and evaluating result: TableGetGlobals
2023-11-17 18:07:55.520 : INFO: initial IR: IR size 30: 

%1 = RNGStateLiteral
!c0 = I32 [0] 
!c10 = I32 [10] 
!c1 = I32 [1]
!s = StreamRange(!c0, !c10, !c1) [1, False]
!s4 = StreamMap(!s) { (%elt) =>
  !2 = Cast(%elt) [Int64]
  %3 = MakeTuple(!2, %elt) [(0 1)]
  !4 = GetTupleElement(%3) [1] 
  !5 = EncodedLiteral [Array[Int32]]
  !s2 = ToStream(!5) [False]
  !s3 = StreamMap(!s2) { (%elt2) =>
    Cast(%elt2) [Float64]
  }
  !6 = ToArray(!s3) 
  !7 = GetTupleElement(%3) [0]
  !8 = RNGSplit(%1, !7)
  !9 = ApplySeeded(!6, !8) [rand_cat, 0, Int32]
  MakeStruct(sample_idx: !4, pop: !9)
}
!10 = ToArray(!s4)
%11 = MakeStruct(cols: !10)
Ref [__iruid_164]

2023-11-17 18:07:55.530 : INFO: after optimize: relationalLowerer, initial IR: IR size 28: 

%1 = RNGStateLiteral
!c0 = I32 [0] 
!c10 = I32 [10] 
!c1 = I32 [1]
!s = StreamRange(!c0, !c10, !c1) [1, False]
!s4 = StreamMap(!s) { (%elt) =>
  !2 = Cast(%elt) [Int64]
  %3 = MakeTuple(!2, %elt) [(0 1)]
  !4 = GetTupleElement(%3) [1] 
  !5 = EncodedLiteral [Array[Int32]]
  !s2 = ToStream(!5) [False]
  !s3 = StreamMap(!s2) { (%elt2) =>
    Cast(%elt2) [Float64]
  }
  !6 = ToArray(!s3) 
  !7 = GetTupleElement(%3) [0]
  !8 = RNGSplit(%1, !7)
  !9 = ApplySeeded(!6, !8) [rand_cat, 0, Int32]
  MakeStruct(sample_idx: !4, pop: !9)
}
!10 = ToArray(!s4)
MakeStruct(cols: !10)

2023-11-17 18:07:55.531 : INFO: after LowerMatrixToTable: IR size 28: 

%1 = RNGStateLiteral
!c0 = I32 [0] 
!c10 = I32 [10] 
!c1 = I32 [1]
!s = StreamRange(!c0, !c10, !c1) [1, False]
!s4 = StreamMap(!s) { (%elt) =>
  !2 = Cast(%elt) [Int64]
  %3 = MakeTuple(!2, %elt) [(0 1)]
  !4 = GetTupleElement(%3) [1] 
  !5 = EncodedLiteral [Array[Int32]]
  !s2 = ToStream(!5) [False]
  !s3 = StreamMap(!s2) { (%elt2) =>
    Cast(%elt2) [Float64]
  }
  !6 = ToArray(!s3) 
  !7 = GetTupleElement(%3) [0]
  !8 = RNGSplit(%1, !7)
  !9 = ApplySeeded(!6, !8) [rand_cat, 0, Int32]
  MakeStruct(sample_idx: !4, pop: !9)
}
!10 = ToArray(!s4)
MakeStruct(cols: !10)

2023-11-17 18:07:55.540 : INFO: after optimize: relationalLowerer, after LowerMatrixToTable: IR size 28: 

%1 = RNGStateLiteral
!c0 = I32 [0] 
!c10 = I32 [10] 
!c1 = I32 [1]
!s = StreamRange(!c0, !c10, !c1) [1, False]
!s4 = StreamMap(!s) { (%elt) =>
  !2 = Cast(%elt) [Int64]
  %3 = MakeTuple(!2, %elt) [(0 1)]
  !4 = GetTupleElement(%3) [1] 
  !5 = EncodedLiteral [Array[Int32]]
  !s2 = ToStream(!5) [False]
  !s3 = StreamMap(!s2) { (%elt2) =>
    Cast(%elt2) [Float64]
  }
  !6 = ToArray(!s3) 
  !7 = GetTupleElement(%3) [0]
  !8 = RNGSplit(%1, !7)
  !9 = ApplySeeded(!6, !8) [rand_cat, 0, Int32]
  MakeStruct(sample_idx: !4, pop: !9)
}
!10 = ToArray(!s4)
MakeStruct(cols: !10)

2023-11-17 18:07:55.542 : INFO: after LiftRelationalValuesToRelationalLets: IR size 28: 

%1 = RNGStateLiteral
!c0 = I32 [0] 
!c10 = I32 [10] 
!c1 = I32 [1]
!s = StreamRange(!c0, !c10, !c1) [1, False]
!s4 = StreamMap(!s) { (%elt) =>
  !2 = Cast(%elt) [Int64]
  %3 = MakeTuple(!2, %elt) [(0 1)]
  !4 = GetTupleElement(%3) [1] 
  !5 = EncodedLiteral [Array[Int32]]
  !s2 = ToStream(!5) [False]
  !s3 = StreamMap(!s2) { (%elt2) =>
    Cast(%elt2) [Float64]
  }
  !6 = ToArray(!s3) 
  !7 = GetTupleElement(%3) [0]
  !8 = RNGSplit(%1, !7)
  !9 = ApplySeeded(!6, !8) [rand_cat, 0, Int32]
  MakeStruct(sample_idx: !4, pop: !9)
}
!10 = ToArray(!s4)
MakeStruct(cols: !10)

2023-11-17 18:07:55.543 : INFO: after EvalRelationalLets: IR size 28: 

%1 = RNGStateLiteral
!c0 = I32 [0] 
!c10 = I32 [10] 
!c1 = I32 [1]
!s = StreamRange(!c0, !c10, !c1) [1, False]
!s4 = StreamMap(!s) { (%elt) =>
  !2 = Cast(%elt) [Int64]
  %3 = MakeTuple(!2, %elt) [(0 1)]
  !4 = GetTupleElement(%3) [1] 
  !5 = EncodedLiteral [Array[Int32]]
  !s2 = ToStream(!5) [False]
  !s3 = StreamMap(!s2) { (%elt2) =>
    Cast(%elt2) [Float64]
  }
  !6 = ToArray(!s3) 
  !7 = GetTupleElement(%3) [0]
  !8 = RNGSplit(%1, !7)
  !9 = ApplySeeded(!6, !8) [rand_cat, 0, Int32]
  MakeStruct(sample_idx: !4, pop: !9)
}
!10 = ToArray(!s4)
MakeStruct(cols: !10)

2023-11-17 18:07:55.544 : INFO: after LowerAndExecuteShuffles: IR size 28: 

%1 = RNGStateLiteral
!c0 = I32 [0] 
!c10 = I32 [10] 
!c1 = I32 [1]
!s = StreamRange(!c0, !c10, !c1) [1, False]
!s4 = StreamMap(!s) { (%elt) =>
  !2 = Cast(%elt) [Int64]
  %3 = MakeTuple(!2, %elt) [(0 1)]
  !4 = GetTupleElement(%3) [1] 
  !5 = EncodedLiteral [Array[Int32]]
  !s2 = ToStream(!5) [False]
  !s3 = StreamMap(!s2) { (%elt2) =>
    Cast(%elt2) [Float64]
  }
  !6 = ToArray(!s3) 
  !7 = GetTupleElement(%3) [0]
  !8 = RNGSplit(%1, !7)
  !9 = ApplySeeded(!6, !8) [rand_cat, 0, Int32]
  MakeStruct(sample_idx: !4, pop: !9)
}
!10 = ToArray(!s4)
MakeStruct(cols: !10)

2023-11-17 18:07:55.553 : INFO: after optimize: relationalLowerer, after LowerAndExecuteShuffles: IR size 28: 

%1 = RNGStateLiteral
!c0 = I32 [0] 
!c10 = I32 [10] 
!c1 = I32 [1]
!s = StreamRange(!c0, !c10, !c1) [1, False]
!s4 = StreamMap(!s) { (%elt) =>
  !2 = Cast(%elt) [Int64]
  %3 = MakeTuple(!2, %elt) [(0 1)]
  !4 = GetTupleElement(%3) [1] 
  !5 = EncodedLiteral [Array[Int32]]
  !s2 = ToStream(!5) [False]
  !s3 = StreamMap(!s2) { (%elt2) =>
    Cast(%elt2) [Float64]
  }
  !6 = ToArray(!s3) 
  !7 = GetTupleElement(%3) [0]
  !8 = RNGSplit(%1, !7)
  !9 = ApplySeeded(!6, !8) [rand_cat, 0, Int32]
  MakeStruct(sample_idx: !4, pop: !9)
}
!10 = ToArray(!s4)
MakeStruct(cols: !10)

2023-11-17 18:07:55.554 : INFO: after LowerOrInterpretNonCompilable: IR size 28: 

%1 = RNGStateLiteral
!c0 = I32 [0] 
!c10 = I32 [10] 
!c1 = I32 [1]
!s = StreamRange(!c0, !c10, !c1) [1, False]
!s4 = StreamMap(!s) { (%elt) =>
  !2 = Cast(%elt) [Int64]
  %3 = MakeTuple(!2, %elt) [(0 1)]
  !4 = GetTupleElement(%3) [1] 
  !5 = EncodedLiteral [Array[Int32]]
  !s2 = ToStream(!5) [False]
  !s3 = StreamMap(!s2) { (%elt2) =>
    Cast(%elt2) [Float64]
  }
  !6 = ToArray(!s3) 
  !7 = GetTupleElement(%3) [0]
  !8 = RNGSplit(%1, !7)
  !9 = ApplySeeded(!6, !8) [rand_cat, 0, Int32]
  MakeStruct(sample_idx: !4, pop: !9)
}
!10 = ToArray(!s4)
MakeStruct(cols: !10)

2023-11-17 18:07:55.562 : INFO: after optimize: relationalLowerer, after LowerOrInterpretNonCompilable: IR size 28: 

%1 = RNGStateLiteral
!c0 = I32 [0] 
!c10 = I32 [10] 
!c1 = I32 [1]
!s = StreamRange(!c0, !c10, !c1) [1, False]
!s4 = StreamMap(!s) { (%elt) =>
  !2 = Cast(%elt) [Int64]
  %3 = MakeTuple(!2, %elt) [(0 1)]
  !4 = GetTupleElement(%3) [1] 
  !5 = EncodedLiteral [Array[Int32]]
  !s2 = ToStream(!5) [False]
  !s3 = StreamMap(!s2) { (%elt2) =>
    Cast(%elt2) [Float64]
  }
  !6 = ToArray(!s3) 
  !7 = GetTupleElement(%3) [0]
  !8 = RNGSplit(%1, !7)
  !9 = ApplySeeded(!6, !8) [rand_cat, 0, Int32]
  MakeStruct(sample_idx: !4, pop: !9)
}
!10 = ToArray(!s4)
MakeStruct(cols: !10)

2023-11-17 18:07:55.568 : INFO: initial IR: IR size 29: 

%1 = RNGStateLiteral
!c0 = I32 [0] 
!c10 = I32 [10] 
!c1 = I32 [1]
!s = StreamRange(!c0, !c10, !c1) [1, False]
!s4 = StreamMap(!s) { (%elt) =>
  !2 = Cast(%elt) [Int64]
  %3 = MakeTuple(!2, %elt) [(0 1)]
  !4 = GetTupleElement(%3) [1] 
  !5 = EncodedLiteral [Array[Int32]]
  !s2 = ToStream(!5) [False]
  !s3 = StreamMap(!s2) { (%elt2) =>
    Cast(%elt2) [Float64]
  }
  !6 = ToArray(!s3) 
  !7 = GetTupleElement(%3) [0]
  !8 = RNGSplit(%1, !7)
  !9 = ApplySeeded(!6, !8) [rand_cat, 0, Int32]
  MakeStruct(sample_idx: !4, pop: !9)
}
!10 = ToArray(!s4)
!11 = MakeStruct(cols: !10)
MakeTuple(!11) [(0)]

2023-11-17 18:07:55.577 : INFO: after optimize: compileLowerer, initial IR: IR size 29: 

%1 = RNGStateLiteral
!c0 = I32 [0] 
!c10 = I32 [10] 
!c1 = I32 [1]
!s = StreamRange(!c0, !c10, !c1) [1, False]
!s4 = StreamMap(!s) { (%elt) =>
  !2 = Cast(%elt) [Int64]
  %3 = MakeTuple(!2, %elt) [(0 1)]
  !4 = GetTupleElement(%3) [1] 
  !5 = EncodedLiteral [Array[Int32]]
  !s2 = ToStream(!5) [False]
  !s3 = StreamMap(!s2) { (%elt2) =>
    Cast(%elt2) [Float64]
  }
  !6 = ToArray(!s3) 
  !7 = GetTupleElement(%3) [0]
  !8 = RNGSplit(%1, !7)
  !9 = ApplySeeded(!6, !8) [rand_cat, 0, Int32]
  MakeStruct(sample_idx: !4, pop: !9)
}
!10 = ToArray(!s4)
!11 = MakeStruct(cols: !10)
MakeTuple(!11) [(0)]

2023-11-17 18:07:55.578 : INFO: after InlineApplyIR: IR size 29: 

%1 = RNGStateLiteral
!c0 = I32 [0] 
!c10 = I32 [10] 
!c1 = I32 [1]
!s = StreamRange(!c0, !c10, !c1) [1, False]
!s4 = StreamMap(!s) { (%elt) =>
  !2 = Cast(%elt) [Int64]
  %3 = MakeTuple(!2, %elt) [(0 1)]
  !4 = GetTupleElement(%3) [1] 
  !5 = EncodedLiteral [Array[Int32]]
  !s2 = ToStream(!5) [False]
  !s3 = StreamMap(!s2) { (%elt2) =>
    Cast(%elt2) [Float64]
  }
  !6 = ToArray(!s3) 
  !7 = GetTupleElement(%3) [0]
  !8 = RNGSplit(%1, !7)
  !9 = ApplySeeded(!6, !8) [rand_cat, 0, Int32]
  MakeStruct(sample_idx: !4, pop: !9)
}
!10 = ToArray(!s4)
!11 = MakeStruct(cols: !10)
MakeTuple(!11) [(0)]

2023-11-17 18:07:55.587 : INFO: after optimize: compileLowerer, after InlineApplyIR: IR size 29: 

%1 = RNGStateLiteral
!c0 = I32 [0] 
!c10 = I32 [10] 
!c1 = I32 [1]
!s = StreamRange(!c0, !c10, !c1) [1, False]
!s4 = StreamMap(!s) { (%elt) =>
  !2 = Cast(%elt) [Int64]
  %3 = MakeTuple(!2, %elt) [(0 1)]
  !4 = GetTupleElement(%3) [1] 
  !5 = EncodedLiteral [Array[Int32]]
  !s2 = ToStream(!5) [False]
  !s3 = StreamMap(!s2) { (%elt2) =>
    Cast(%elt2) [Float64]
  }
  !6 = ToArray(!s3) 
  !7 = GetTupleElement(%3) [0]
  !8 = RNGSplit(%1, !7)
  !9 = ApplySeeded(!6, !8) [rand_cat, 0, Int32]
  MakeStruct(sample_idx: !4, pop: !9)
}
!10 = ToArray(!s4)
!11 = MakeStruct(cols: !10)
MakeTuple(!11) [(0)]

2023-11-17 18:07:55.590 : INFO: after LowerArrayAggsToRunAggs: IR size 29: 

%1 = RNGStateLiteral
!c0 = I32 [0] 
!c10 = I32 [10] 
!c1 = I32 [1]
!s = StreamRange(!c0, !c10, !c1) [1, False]
!s4 = StreamMap(!s) { (%elt) =>
  !2 = Cast(%elt) [Int64]
  %3 = MakeTuple(!2, %elt) [(0 1)]
  !4 = GetTupleElement(%3) [1] 
  !5 = EncodedLiteral [Array[Int32]]
  !s2 = ToStream(!5) [False]
  !s3 = StreamMap(!s2) { (%elt2) =>
    Cast(%elt2) [Float64]
  }
  !6 = ToArray(!s3) 
  !7 = GetTupleElement(%3) [0]
  !8 = RNGSplit(%1, !7)
  !9 = ApplySeeded(!6, !8) [rand_cat, 0, Int32]
  MakeStruct(sample_idx: !4, pop: !9)
}
!10 = ToArray(!s4)
!11 = MakeStruct(cols: !10)
MakeTuple(!11) [(0)]

2023-11-17 18:07:55.599 : INFO: after optimize: compileLowerer, after LowerArrayAggsToRunAggs: IR size 29: 

%1 = RNGStateLiteral
!c0 = I32 [0] 
!c10 = I32 [10] 
!c1 = I32 [1]
!s = StreamRange(!c0, !c10, !c1) [1, False]
!s4 = StreamMap(!s) { (%elt) =>
  !2 = Cast(%elt) [Int64]
  %3 = MakeTuple(!2, %elt) [(0 1)]
  !4 = GetTupleElement(%3) [1] 
  !5 = EncodedLiteral [Array[Int32]]
  !s2 = ToStream(!5) [False]
  !s3 = StreamMap(!s2) { (%elt2) =>
    Cast(%elt2) [Float64]
  }
  !6 = ToArray(!s3) 
  !7 = GetTupleElement(%3) [0]
  !8 = RNGSplit(%1, !7)
  !9 = ApplySeeded(!6, !8) [rand_cat, 0, Int32]
  MakeStruct(sample_idx: !4, pop: !9)
}
!10 = ToArray(!s4)
!11 = MakeStruct(cols: !10)
MakeTuple(!11) [(0)]

2023-11-17 18:07:55.729 : INFO: encoder cache miss (0 hits, 1 misses, 0.000)
2023-11-17 18:07:55.733 : INFO: instruction count: 3: __C61HailClassLoaderContainer.<init>
2023-11-17 18:07:55.733 : INFO: instruction count: 3: __C61HailClassLoaderContainer.<clinit>
2023-11-17 18:07:55.734 : INFO: instruction count: 3: __C63FSContainer.<init>
2023-11-17 18:07:55.734 : INFO: instruction count: 3: __C63FSContainer.<clinit>
2023-11-17 18:07:55.734 : INFO: instruction count: 3: __C65etypeEncode.<init>
2023-11-17 18:07:55.734 : INFO: instruction count: 7: __C65etypeEncode.apply
2023-11-17 18:07:55.735 : INFO: instruction count: 1: __C65etypeEncode.__m67ENCODE_SBaseStructPointer_TO_r_struct_of_END
2023-11-17 18:07:56.379 : INFO: instruction count: 3: __C19HailClassLoaderContainer.<init>
2023-11-17 18:07:56.380 : INFO: instruction count: 3: __C19HailClassLoaderContainer.<clinit>
2023-11-17 18:07:56.380 : INFO: instruction count: 3: __C21FSContainer.<init>
2023-11-17 18:07:56.380 : INFO: instruction count: 3: __C21FSContainer.<clinit>
2023-11-17 18:07:56.416 : INFO: instruction count: 3: __C23Compiled.<init>
2023-11-17 18:07:56.416 : INFO: instruction count: 53: __C23Compiled.apply
2023-11-17 18:07:56.418 : INFO: instruction count: 447: __C23Compiled.__m29split_ToArray
2023-11-17 18:07:56.419 : INFO: instruction count: 263: __C23Compiled.__m38split_ToArray
2023-11-17 18:07:56.419 : INFO: instruction count: 9: __C23Compiled.setPartitionIndex
2023-11-17 18:07:56.419 : INFO: instruction count: 4: __C23Compiled.addPartitionRegion
2023-11-17 18:07:56.419 : INFO: instruction count: 4: __C23Compiled.setPool
2023-11-17 18:07:56.419 : INFO: instruction count: 3: __C23Compiled.addHailClassLoader
2023-11-17 18:07:56.419 : INFO: instruction count: 3: __C23Compiled.addFS
2023-11-17 18:07:56.420 : INFO: instruction count: 4: __C23Compiled.addTaskContext
2023-11-17 18:07:56.421 : INFO: instruction count: 70: __C23Compiled.addAndDecodeLiterals
2023-11-17 18:07:56.421 : INFO: instruction count: 18: __C23Compiled.__m57DECODE_r_struct_of_END_TO_SBaseStructPointer
2023-11-17 18:07:56.422 : INFO: instruction count: 217: __C23Compiled.__m58DECODE_o_array_of_o_int32_TO_SIndexablePointer
2023-11-17 18:07:56.422 : INFO: instruction count: 10: __C23Compiled.__m60INPLACE_DECODE_o_int32_TO_o_int32
2023-11-17 18:07:56.423 : INFO: instruction count: 760: __C23Compiled.__m29split_ToArray_region10_10
2023-11-17 18:07:56.423 : INFO: instruction count: 528: __C23Compiled.__m29split_ToArray_region10_11
2023-11-17 18:07:56.423 : INFO: instruction count: 3: __C69__m29split_ToArraySpills.<init>
2023-11-17 18:07:56.424 : INFO: instruction count: 3: __C59Tuple3.<init>
2023-11-17 18:07:56.424 : INFO: instruction count: 12: __C59Tuple3.<init>
2023-11-17 18:07:56.437 : INFO: encoder cache miss (0 hits, 2 misses, 0.000)
2023-11-17 18:07:56.444 : INFO: instruction count: 3: __C91HailClassLoaderContainer.<init>
2023-11-17 18:07:56.444 : INFO: instruction count: 3: __C91HailClassLoaderContainer.<clinit>
2023-11-17 18:07:56.444 : INFO: instruction count: 3: __C93FSContainer.<init>
2023-11-17 18:07:56.444 : INFO: instruction count: 3: __C93FSContainer.<clinit>
2023-11-17 18:07:56.446 : INFO: instruction count: 3: __C95etypeEncode.<init>
2023-11-17 18:07:56.446 : INFO: instruction count: 7: __C95etypeEncode.apply
2023-11-17 18:07:56.447 : INFO: instruction count: 25: __C95etypeEncode.__m97ENCODE_SBaseStructPointer_TO_r_struct_of_r_array_of_r_struct_of_r_int32ANDr_int32ENDEND
2023-11-17 18:07:56.447 : INFO: instruction count: 35: __C95etypeEncode.__m98ENCODE_SIndexablePointer_TO_r_array_of_r_struct_of_r_int32ANDr_int32END
2023-11-17 18:07:56.447 : INFO: instruction count: 25: __C95etypeEncode.__m99ENCODE_SBaseStructPointer_TO_r_struct_of_r_int32ANDr_int32END
2023-11-17 18:07:56.448 : INFO: instruction count: 4: __C95etypeEncode.__m100ENCODE_SInt32$_TO_r_int32
2023-11-17 18:07:56.450 : INFO: took 988.252ms
2023-11-17 18:07:56.450 : INFO: after LowerOrInterpretNonCompilable: IR size 1: 

EncodedLiteral [Struct{cols:Array[Struct{sample_idx:Int32,pop:Int32}]}]

2023-11-17 18:07:56.450 : INFO: after optimize: relationalLowerer, after LowerOrInterpretNonCompilable: IR size 1: 

EncodedLiteral [Struct{cols:Array[Struct{sample_idx:Int32,pop:Int32}]}]

2023-11-17 18:07:56.451 : INFO: after EvalRelationalLets: IR size 13: 

!1 = EncodedLiteral [Struct{cols:Array[Struct{sample_idx:Int32,pop:Int32}]}]
!2 = GetField(!1) [cols]
!s = ToStream(!2) [False] 
!c0 = I32 [0] 
!c1 = I32 [1]
!s2 = StreamIota(!c0, !c1) [False]
!s3 = StreamZip(!s, !s2) [18, TakeMinLength] {
(%elt, %elt2) =>
  !3 = Cast(%elt2) [Int64]
  InsertFields %elt (__col_uid: !3)
}
!4 = StreamLen(!s3)
Cast(!4) [Int64]

2023-11-17 18:07:56.452 : INFO: after LowerAndExecuteShuffles: IR size 13: 

!1 = EncodedLiteral [Struct{cols:Array[Struct{sample_idx:Int32,pop:Int32}]}]
!2 = GetField(!1) [cols]
!s = ToStream(!2) [False] 
!c0 = I32 [0] 
!c1 = I32 [1]
!s2 = StreamIota(!c0, !c1) [False]
!s3 = StreamZip(!s, !s2) [18, TakeMinLength] {
(%elt, %elt2) =>
  !3 = Cast(%elt2) [Int64]
  InsertFields %elt (__col_uid: !3)
}
!4 = StreamLen(!s3)
Cast(!4) [Int64]

2023-11-17 18:07:56.452 : INFO: decoder cache miss (0 hits, 3 misses, 0.000
2023-11-17 18:07:56.457 : INFO: instruction count: 3: __C101HailClassLoaderContainer.<init>
2023-11-17 18:07:56.457 : INFO: instruction count: 3: __C101HailClassLoaderContainer.<clinit>
2023-11-17 18:07:56.457 : INFO: instruction count: 3: __C103FSContainer.<init>
2023-11-17 18:07:56.457 : INFO: instruction count: 3: __C103FSContainer.<clinit>
2023-11-17 18:07:56.458 : INFO: instruction count: 3: __C105etypeDecode.<init>
2023-11-17 18:07:56.458 : INFO: instruction count: 7: __C105etypeDecode.apply
2023-11-17 18:07:56.459 : INFO: instruction count: 27: __C105etypeDecode.__m107DECODE_r_struct_of_r_array_of_r_struct_of_r_int32ANDr_int32ENDEND_TO_SBaseStructPointer
2023-11-17 18:07:56.459 : INFO: instruction count: 62: __C105etypeDecode.__m108INPLACE_DECODE_r_array_of_r_struct_of_r_int32ANDr_int32END_TO_r_array_of_r_struct_of_r_int32ANDr_int32END
2023-11-17 18:07:56.459 : INFO: instruction count: 26: __C105etypeDecode.__m109INPLACE_DECODE_r_struct_of_r_int32ANDr_int32END_TO_r_struct_of_r_int32ANDr_int32END
2023-11-17 18:07:56.459 : INFO: instruction count: 10: __C105etypeDecode.__m110INPLACE_DECODE_r_int32_TO_r_int32
2023-11-17 18:07:56.468 : INFO: after optimize: relationalLowerer, after LowerAndExecuteShuffles: IR size 12: 

!1 = Literal [Array[Struct{sample_idx:Int32,pop:Int32}], <literal value>]
!s = ToStream(!1) [False] 
!c0 = I32 [0] 
!c1 = I32 [1]
!s2 = StreamIota(!c0, !c1) [False]
!s3 = StreamZip(!s, !s2) [18, TakeMinLength] {
(%elt, %elt2) =>
  !2 = Cast(%elt2) [Int64]
  InsertFields %elt (__col_uid: !2)
}
!3 = StreamLen(!s3)
Cast(!3) [Int64]

2023-11-17 18:07:56.468 : INFO: after LowerOrInterpretNonCompilable: IR size 12: 

!1 = Literal [Array[Struct{sample_idx:Int32,pop:Int32}], <literal value>]
!s = ToStream(!1) [False] 
!c0 = I32 [0] 
!c1 = I32 [1]
!s2 = StreamIota(!c0, !c1) [False]
!s3 = StreamZip(!s, !s2) [18, TakeMinLength] {
(%elt, %elt2) =>
  !2 = Cast(%elt2) [Int64]
  InsertFields %elt (__col_uid: !2)
}
!3 = StreamLen(!s3)
Cast(!3) [Int64]

2023-11-17 18:07:56.472 : INFO: after optimize: relationalLowerer, after LowerOrInterpretNonCompilable: IR size 12: 

!1 = Literal [Array[Struct{sample_idx:Int32,pop:Int32}], <literal value>]
!s = ToStream(!1) [False] 
!c0 = I32 [0] 
!c1 = I32 [1]
!s2 = StreamIota(!c0, !c1) [False]
!s3 = StreamZip(!s, !s2) [18, TakeMinLength] {
(%elt, %elt2) =>
  !2 = Cast(%elt2) [Int64]
  InsertFields %elt (__col_uid: !2)
}
!3 = StreamLen(!s3)
Cast(!3) [Int64]

2023-11-17 18:07:56.473 : INFO: initial IR: IR size 13: 

!1 = Literal [Array[Struct{sample_idx:Int32,pop:Int32}], <literal value>]
!s = ToStream(!1) [False] 
!c0 = I32 [0] 
!c1 = I32 [1]
!s2 = StreamIota(!c0, !c1) [False]
!s3 = StreamZip(!s, !s2) [18, TakeMinLength] {
(%elt, %elt2) =>
  !2 = Cast(%elt2) [Int64]
  InsertFields %elt (__col_uid: !2)
}
!3 = StreamLen(!s3)
!4 = Cast(!3) [Int64]
MakeTuple(!4) [(0)]

2023-11-17 18:07:56.477 : INFO: after optimize: compileLowerer, initial IR: IR size 13: 

!1 = Literal [Array[Struct{sample_idx:Int32,pop:Int32}], <literal value>]
!s = ToStream(!1) [False] 
!c0 = I32 [0] 
!c1 = I32 [1]
!s2 = StreamIota(!c0, !c1) [False]
!s3 = StreamZip(!s, !s2) [18, TakeMinLength] {
(%elt, %elt2) =>
  !2 = Cast(%elt2) [Int64]
  InsertFields %elt (__col_uid: !2)
}
!3 = StreamLen(!s3)
!4 = Cast(!3) [Int64]
MakeTuple(!4) [(0)]

2023-11-17 18:07:56.478 : INFO: after InlineApplyIR: IR size 13: 

!1 = Literal [Array[Struct{sample_idx:Int32,pop:Int32}], <literal value>]
!s = ToStream(!1) [False] 
!c0 = I32 [0] 
!c1 = I32 [1]
!s2 = StreamIota(!c0, !c1) [False]
!s3 = StreamZip(!s, !s2) [18, TakeMinLength] {
(%elt, %elt2) =>
  !2 = Cast(%elt2) [Int64]
  InsertFields %elt (__col_uid: !2)
}
!3 = StreamLen(!s3)
!4 = Cast(!3) [Int64]
MakeTuple(!4) [(0)]

2023-11-17 18:07:56.483 : INFO: after optimize: compileLowerer, after InlineApplyIR: IR size 13: 

!1 = Literal [Array[Struct{sample_idx:Int32,pop:Int32}], <literal value>]
!s = ToStream(!1) [False] 
!c0 = I32 [0] 
!c1 = I32 [1]
!s2 = StreamIota(!c0, !c1) [False]
!s3 = StreamZip(!s, !s2) [18, TakeMinLength] {
(%elt, %elt2) =>
  !2 = Cast(%elt2) [Int64]
  InsertFields %elt (__col_uid: !2)
}
!3 = StreamLen(!s3)
!4 = Cast(!3) [Int64]
MakeTuple(!4) [(0)]

2023-11-17 18:07:56.486 : INFO: after LowerArrayAggsToRunAggs: IR size 13: 

!1 = Literal [Array[Struct{sample_idx:Int32,pop:Int32}], <literal value>]
!s = ToStream(!1) [False] 
!c0 = I32 [0] 
!c1 = I32 [1]
!s2 = StreamIota(!c0, !c1) [False]
!s3 = StreamZip(!s, !s2) [18, TakeMinLength] {
(%elt, %elt2) =>
  !2 = Cast(%elt2) [Int64]
  InsertFields %elt (__col_uid: !2)
}
!3 = StreamLen(!s3)
!4 = Cast(!3) [Int64]
MakeTuple(!4) [(0)]

2023-11-17 18:07:56.490 : INFO: after optimize: compileLowerer, after LowerArrayAggsToRunAggs: IR size 13: 

!1 = Literal [Array[Struct{sample_idx:Int32,pop:Int32}], <literal value>]
!s = ToStream(!1) [False] 
!c0 = I32 [0] 
!c1 = I32 [1]
!s2 = StreamIota(!c0, !c1) [False]
!s3 = StreamZip(!s, !s2) [18, TakeMinLength] {
(%elt, %elt2) =>
  !2 = Cast(%elt2) [Int64]
  InsertFields %elt (__col_uid: !2)
}
!3 = StreamLen(!s3)
!4 = Cast(!3) [Int64]
MakeTuple(!4) [(0)]

2023-11-17 18:07:56.515 : INFO: encoder cache miss (0 hits, 3 misses, 0.000)
2023-11-17 18:07:56.517 : INFO: instruction count: 3: __C139HailClassLoaderContainer.<init>
2023-11-17 18:07:56.518 : INFO: instruction count: 3: __C139HailClassLoaderContainer.<clinit>
2023-11-17 18:07:56.518 : INFO: instruction count: 3: __C141FSContainer.<init>
2023-11-17 18:07:56.518 : INFO: instruction count: 3: __C141FSContainer.<clinit>
2023-11-17 18:07:56.519 : INFO: instruction count: 3: __C143etypeEncode.<init>
2023-11-17 18:07:56.519 : INFO: instruction count: 7: __C143etypeEncode.apply
2023-11-17 18:07:56.519 : INFO: instruction count: 25: __C143etypeEncode.__m145ENCODE_SBaseStructPointer_TO_r_struct_of_r_array_of_r_struct_of_r_int32ANDr_int32ENDEND
2023-11-17 18:07:56.519 : INFO: instruction count: 35: __C143etypeEncode.__m146ENCODE_SIndexablePointer_TO_r_array_of_r_struct_of_r_int32ANDr_int32END
2023-11-17 18:07:56.520 : INFO: instruction count: 25: __C143etypeEncode.__m147ENCODE_SBaseStructPointer_TO_r_struct_of_r_int32ANDr_int32END
2023-11-17 18:07:56.520 : INFO: instruction count: 4: __C143etypeEncode.__m148ENCODE_SInt32$_TO_r_int32
2023-11-17 18:07:56.524 : INFO: instruction count: 3: __C111HailClassLoaderContainer.<init>
2023-11-17 18:07:56.524 : INFO: instruction count: 3: __C111HailClassLoaderContainer.<clinit>
2023-11-17 18:07:56.525 : INFO: instruction count: 3: __C113FSContainer.<init>
2023-11-17 18:07:56.525 : INFO: instruction count: 3: __C113FSContainer.<clinit>
2023-11-17 18:07:56.527 : INFO: instruction count: 3: __C115Compiled.<init>
2023-11-17 18:07:56.527 : INFO: instruction count: 28: __C115Compiled.apply
2023-11-17 18:07:56.527 : INFO: instruction count: 51: __C115Compiled.__m117split_StreamLen
2023-11-17 18:07:56.527 : INFO: instruction count: 9: __C115Compiled.setPartitionIndex
2023-11-17 18:07:56.528 : INFO: instruction count: 4: __C115Compiled.addPartitionRegion
2023-11-17 18:07:56.528 : INFO: instruction count: 4: __C115Compiled.setPool
2023-11-17 18:07:56.528 : INFO: instruction count: 3: __C115Compiled.addHailClassLoader
2023-11-17 18:07:56.528 : INFO: instruction count: 3: __C115Compiled.addFS
2023-11-17 18:07:56.528 : INFO: instruction count: 4: __C115Compiled.addTaskContext
2023-11-17 18:07:56.528 : INFO: instruction count: 66: __C115Compiled.addAndDecodeLiterals
2023-11-17 18:07:56.528 : INFO: instruction count: 27: __C115Compiled.__m135DECODE_r_struct_of_r_array_of_r_struct_of_r_int32ANDr_int32ENDEND_TO_SBaseStructPointer
2023-11-17 18:07:56.529 : INFO: instruction count: 62: __C115Compiled.__m136INPLACE_DECODE_r_array_of_r_struct_of_r_int32ANDr_int32END_TO_r_array_of_r_struct_of_r_int32ANDr_int32END
2023-11-17 18:07:56.529 : INFO: instruction count: 26: __C115Compiled.__m137INPLACE_DECODE_r_struct_of_r_int32ANDr_int32END_TO_r_struct_of_r_int32ANDr_int32END
2023-11-17 18:07:56.529 : INFO: instruction count: 10: __C115Compiled.__m138INPLACE_DECODE_r_int32_TO_r_int32
2023-11-17 18:07:56.553 : INFO: encoder cache miss (0 hits, 4 misses, 0.000)
2023-11-17 18:07:56.554 : INFO: instruction count: 3: __C149HailClassLoaderContainer.<init>
2023-11-17 18:07:56.555 : INFO: instruction count: 3: __C149HailClassLoaderContainer.<clinit>
2023-11-17 18:07:56.555 : INFO: instruction count: 3: __C151FSContainer.<init>
2023-11-17 18:07:56.555 : INFO: instruction count: 3: __C151FSContainer.<clinit>
2023-11-17 18:07:56.556 : INFO: instruction count: 3: __C153etypeEncode.<init>
2023-11-17 18:07:56.556 : INFO: instruction count: 11: __C153etypeEncode.apply
2023-11-17 18:07:56.556 : INFO: instruction count: 4: __C153etypeEncode.__m155ENCODE_SInt64$_TO_o_int64
2023-11-17 18:07:56.557 : INFO: RegionPool: initialized for thread 78: Thread-20
2023-11-17 18:07:56.557 : INFO: TaskReport: stage=0, partition=0, attempt=0, peakBytes=0, peakBytesReadable=0.00 B, chunks requested=0, cache hits=0
2023-11-17 18:07:56.557 : INFO: RegionPool: FREE: 0 allocated (0 blocks / 0 chunks), regions.size = 0, 0 current java objects, thread 78: Thread-20
2023-11-17 18:07:56.557 : INFO: RegionPool: FREE: 192.0K allocated (192.0K blocks / 0 chunks), regions.size = 3, 0 current java objects, thread 78: Thread-20
2023-11-17 18:07:56.558 : INFO: timing SparkBackend.execute total 2.455s self 0.618ms children 2.454s %children 99.97%
2023-11-17 18:07:56.558 : INFO: timing SparkBackend.execute/execute total 2.454s self 842.178ms children 1.612s %children 65.69%
2023-11-17 18:07:56.558 : INFO: timing SparkBackend.execute/execute/SemanticHash total 71.163ms self 0.568ms children 70.595ms %children 99.20%
2023-11-17 18:07:56.558 : INFO: timing SparkBackend.execute/execute/SemanticHash/NormalizeNames total 29.667ms self 29.667ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.558 : INFO: timing SparkBackend.execute/execute/SemanticHash/Hash total 40.928ms self 40.928ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.558 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, initial IR total 364.648ms self 0.735ms children 363.913ms %children 99.80%
2023-11-17 18:07:56.558 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, initial IR/Verify total 1.097ms self 1.097ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.559 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, initial IR/LoweringTransformation total 362.521ms self 1.596ms children 360.925ms %children 99.56%
2023-11-17 18:07:56.559 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize total 360.925ms self 2.190ms children 358.735ms %children 99.39%
2023-11-17 18:07:56.559 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/FoldConstants total 171.041ms self 171.041ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.559 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/ExtractIntervalFilters total 2.750ms self 2.750ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.559 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/NormalizeNames total 7.139ms self 7.139ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.559 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/Simplify total 74.088ms self 74.088ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.559 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/ForwardLets total 26.701ms self 26.701ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.560 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/ForwardRelationalLets total 2.834ms self 2.834ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.560 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/PruneDeadFields total 35.957ms self 35.957ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.560 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/FoldConstants total 0.956ms self 0.956ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.560 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.234ms self 0.234ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.560 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/NormalizeNames total 3.146ms self 3.146ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.560 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/Simplify total 0.850ms self 0.850ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.561 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/ForwardLets total 9.841ms self 9.841ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.562 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/ForwardRelationalLets total 0.417ms self 0.417ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.562 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/PruneDeadFields total 4.332ms self 4.332ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.562 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/FoldConstants total 0.613ms self 0.613ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.563 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.164ms self 0.164ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.563 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/NormalizeNames total 2.747ms self 2.747ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.563 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/Simplify total 0.626ms self 0.626ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.563 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/ForwardLets total 9.879ms self 9.879ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.563 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/ForwardRelationalLets total 0.345ms self 0.345ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.563 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/PruneDeadFields total 4.072ms self 4.072ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.563 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, initial IR/Verify total 0.296ms self 0.296ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.564 : INFO: timing SparkBackend.execute/execute/LowerMatrixToTable total 27.308ms self 0.015ms children 27.294ms %children 99.95%
2023-11-17 18:07:56.564 : INFO: timing SparkBackend.execute/execute/LowerMatrixToTable/Verify total 0.080ms self 0.080ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.564 : INFO: timing SparkBackend.execute/execute/LowerMatrixToTable/LoweringTransformation total 26.723ms self 26.723ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.564 : INFO: timing SparkBackend.execute/execute/LowerMatrixToTable/Verify total 0.491ms self 0.491ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.564 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerMatrixToTable total 47.990ms self 0.011ms children 47.979ms %children 99.98%
2023-11-17 18:07:56.564 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerMatrixToTable/Verify total 0.042ms self 0.042ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.564 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation total 47.875ms self 0.031ms children 47.844ms %children 99.94%
2023-11-17 18:07:56.564 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize total 47.844ms self 0.115ms children 47.729ms %children 99.76%
2023-11-17 18:07:56.565 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/FoldConstants total 0.408ms self 0.408ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.565 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.181ms self 0.181ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.565 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/NormalizeNames total 3.215ms self 3.215ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.565 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/Simplify total 13.231ms self 13.231ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.565 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/ForwardLets total 6.786ms self 6.786ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.565 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/ForwardRelationalLets total 0.340ms self 0.340ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.565 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/PruneDeadFields total 3.116ms self 3.116ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.565 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/FoldConstants total 0.628ms self 0.628ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.566 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.087ms self 0.087ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.566 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/NormalizeNames total 1.348ms self 1.348ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.566 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/Simplify total 0.504ms self 0.504ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.566 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/ForwardLets total 4.217ms self 4.217ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.566 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/ForwardRelationalLets total 0.332ms self 0.332ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.566 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/PruneDeadFields total 3.896ms self 3.896ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.566 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/FoldConstants total 0.375ms self 0.375ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.566 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.166ms self 0.166ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.567 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/NormalizeNames total 1.374ms self 1.374ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.567 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/Simplify total 1.897ms self 1.897ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.567 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/ForwardLets total 2.943ms self 2.943ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.567 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/ForwardRelationalLets total 0.287ms self 0.287ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.567 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/PruneDeadFields total 2.398ms self 2.398ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.567 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerMatrixToTable/Verify total 0.062ms self 0.062ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.568 : INFO: timing SparkBackend.execute/execute/LiftRelationalValuesToRelationalLets total 2.184ms self 0.012ms children 2.172ms %children 99.43%
2023-11-17 18:07:56.568 : INFO: timing SparkBackend.execute/execute/LiftRelationalValuesToRelationalLets/Verify total 0.048ms self 0.048ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.568 : INFO: timing SparkBackend.execute/execute/LiftRelationalValuesToRelationalLets/LoweringTransformation total 1.956ms self 1.956ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.568 : INFO: timing SparkBackend.execute/execute/LiftRelationalValuesToRelationalLets/Verify total 0.168ms self 0.168ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.568 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets total 1.021s self 0.010ms children 1.021s %children 100.00%
2023-11-17 18:07:56.568 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/Verify total 0.033ms self 0.033ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.568 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation total 1.021s self 8.173ms children 1.013s %children 99.20%
2023-11-17 18:07:56.568 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerAndExecuteShuffles total 4.345ms self 0.011ms children 4.333ms %children 99.74%
2023-11-17 18:07:56.568 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerAndExecuteShuffles/Verify total 0.049ms self 0.049ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.569 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerAndExecuteShuffles/LoweringTransformation total 4.237ms self 4.237ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.569 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerAndExecuteShuffles/Verify total 0.048ms self 0.048ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.569 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles total 18.300ms self 0.012ms children 18.289ms %children 99.94%
2023-11-17 18:07:56.569 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/Verify total 0.017ms self 0.017ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.569 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation total 18.214ms self 0.038ms children 18.177ms %children 99.79%
2023-11-17 18:07:56.570 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize total 18.177ms self 0.137ms children 18.040ms %children 99.25%
2023-11-17 18:07:56.570 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/FoldConstants total 0.140ms self 0.140ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.570 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.056ms self 0.056ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.570 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/NormalizeNames total 0.780ms self 0.780ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.570 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/Simplify total 0.407ms self 0.407ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.570 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/ForwardLets total 1.996ms self 1.996ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.571 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/ForwardRelationalLets total 0.186ms self 0.186ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.571 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/PruneDeadFields total 1.912ms self 1.912ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.571 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/FoldConstants total 0.217ms self 0.217ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.571 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.049ms self 0.049ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.572 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/NormalizeNames total 0.858ms self 0.858ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.572 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/Simplify total 0.389ms self 0.389ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.572 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/ForwardLets total 2.510ms self 2.510ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.572 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/ForwardRelationalLets total 0.192ms self 0.192ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.572 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/PruneDeadFields total 1.796ms self 1.796ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.572 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/FoldConstants total 0.222ms self 0.222ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.572 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.043ms self 0.043ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.572 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/NormalizeNames total 0.660ms self 0.660ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.572 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/Simplify total 0.332ms self 0.332ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.572 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/ForwardLets total 2.459ms self 2.459ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.572 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/ForwardRelationalLets total 0.210ms self 0.210ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.573 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/PruneDeadFields total 2.625ms self 2.625ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.573 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/Verify total 0.058ms self 0.058ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.573 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable total 990.048ms self 0.015ms children 990.032ms %children 100.00%
2023-11-17 18:07:56.573 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/Verify total 0.020ms self 0.020ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.573 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation total 990.000ms self 85.945ms children 904.054ms %children 91.32%
2023-11-17 18:07:56.573 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, initial IR total 9.113ms self 0.013ms children 9.100ms %children 99.86%
2023-11-17 18:07:56.573 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, initial IR/Verify total 0.012ms self 0.012ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.573 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, initial IR/LoweringTransformation total 9.043ms self 0.138ms children 8.906ms %children 98.48%
2023-11-17 18:07:56.573 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize total 8.906ms self 0.099ms children 8.807ms %children 98.89%
2023-11-17 18:07:56.573 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/FoldConstants total 0.099ms self 0.099ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.573 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.032ms self 0.032ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.573 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/NormalizeNames total 0.442ms self 0.442ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.573 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/Simplify total 0.399ms self 0.399ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.574 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/ForwardLets total 1.347ms self 1.347ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.574 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/ForwardRelationalLets total 0.075ms self 0.075ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.574 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/PruneDeadFields total 1.554ms self 1.554ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.574 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/FoldConstants total 0.282ms self 0.282ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.574 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.023ms self 0.023ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.574 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/NormalizeNames total 0.305ms self 0.305ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.574 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/Simplify total 0.179ms self 0.179ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.574 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/ForwardLets total 0.753ms self 0.753ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.574 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/ForwardRelationalLets total 0.074ms self 0.074ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.574 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/PruneDeadFields total 0.946ms self 0.946ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.574 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/FoldConstants total 0.246ms self 0.246ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.574 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.025ms self 0.025ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.574 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/NormalizeNames total 0.304ms self 0.304ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.574 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/Simplify total 0.179ms self 0.179ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.574 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/ForwardLets total 0.703ms self 0.703ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.575 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/ForwardRelationalLets total 0.072ms self 0.072ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.575 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/PruneDeadFields total 0.767ms self 0.767ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.575 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, initial IR/Verify total 0.045ms self 0.045ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.575 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/LowerMatrixToTable total 0.102ms self 0.020ms children 0.082ms %children 80.76%
2023-11-17 18:07:56.575 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/LowerMatrixToTable/Verify total 0.009ms self 0.009ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.575 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/LowerMatrixToTable/LoweringTransformation total 0.062ms self 0.062ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.575 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/LowerMatrixToTable/Verify total 0.011ms self 0.011ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.575 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerMatrixToTable total 7.600ms self 0.010ms children 7.590ms %children 99.87%
2023-11-17 18:07:56.575 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerMatrixToTable/Verify total 0.009ms self 0.009ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.575 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation total 7.544ms self 0.136ms children 7.408ms %children 98.19%
2023-11-17 18:07:56.575 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize total 7.408ms self 0.089ms children 7.319ms %children 98.80%
2023-11-17 18:07:56.575 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/FoldConstants total 0.098ms self 0.098ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.575 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.029ms self 0.029ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.575 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/NormalizeNames total 0.328ms self 0.328ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.575 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/Simplify total 0.223ms self 0.223ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.575 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/ForwardLets total 0.783ms self 0.783ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.576 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/ForwardRelationalLets total 0.081ms self 0.081ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.576 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/PruneDeadFields total 0.798ms self 0.798ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.576 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/FoldConstants total 0.259ms self 0.259ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.576 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.029ms self 0.029ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.576 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/NormalizeNames total 0.332ms self 0.332ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.576 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/Simplify total 0.201ms self 0.201ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.576 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/ForwardLets total 0.799ms self 0.799ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.576 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/ForwardRelationalLets total 0.107ms self 0.107ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.576 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/PruneDeadFields total 0.751ms self 0.751ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.576 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/FoldConstants total 0.238ms self 0.238ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.576 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.027ms self 0.027ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.576 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/NormalizeNames total 0.331ms self 0.331ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.576 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/Simplify total 0.200ms self 0.200ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.576 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/ForwardLets total 0.795ms self 0.795ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.576 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/ForwardRelationalLets total 0.078ms self 0.078ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.576 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/PruneDeadFields total 0.832ms self 0.832ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.576 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerMatrixToTable/Verify total 0.037ms self 0.037ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.577 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/LiftRelationalValuesToRelationalLets total 0.077ms self 0.007ms children 0.070ms %children 90.45%
2023-11-17 18:07:56.577 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/LiftRelationalValuesToRelationalLets/Verify total 0.015ms self 0.015ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.577 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/LiftRelationalValuesToRelationalLets/LoweringTransformation total 0.047ms self 0.047ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.577 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/LiftRelationalValuesToRelationalLets/Verify total 0.008ms self 0.008ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.577 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/EvalRelationalLets total 0.081ms self 0.007ms children 0.074ms %children 91.18%
2023-11-17 18:07:56.577 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/EvalRelationalLets/Verify total 0.015ms self 0.015ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.577 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/EvalRelationalLets/LoweringTransformation total 0.038ms self 0.038ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.577 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/EvalRelationalLets/Verify total 0.021ms self 0.021ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.577 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/LowerAndExecuteShuffles total 0.094ms self 0.007ms children 0.087ms %children 92.73%
2023-11-17 18:07:56.577 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/LowerAndExecuteShuffles/Verify total 0.017ms self 0.017ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.577 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/LowerAndExecuteShuffles/LoweringTransformation total 0.050ms self 0.050ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.577 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/LowerAndExecuteShuffles/Verify total 0.020ms self 0.020ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.577 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles total 7.586ms self 0.009ms children 7.578ms %children 99.88%
2023-11-17 18:07:56.577 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/Verify total 0.009ms self 0.009ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.577 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation total 7.535ms self 0.114ms children 7.421ms %children 98.48%
2023-11-17 18:07:56.577 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize total 7.421ms self 0.078ms children 7.342ms %children 98.95%
2023-11-17 18:07:56.577 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/FoldConstants total 0.098ms self 0.098ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.577 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.026ms self 0.026ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.577 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/NormalizeNames total 0.308ms self 0.308ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.578 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/Simplify total 0.197ms self 0.197ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.578 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/ForwardLets total 0.904ms self 0.904ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.578 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/ForwardRelationalLets total 0.082ms self 0.082ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.578 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/PruneDeadFields total 1.090ms self 1.090ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.578 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/FoldConstants total 0.235ms self 0.235ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.578 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.026ms self 0.026ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.578 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/NormalizeNames total 0.309ms self 0.309ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.578 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/Simplify total 0.275ms self 0.275ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.578 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/ForwardLets total 0.833ms self 0.833ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.578 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/ForwardRelationalLets total 0.078ms self 0.078ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.578 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/PruneDeadFields total 0.694ms self 0.694ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.578 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/FoldConstants total 0.217ms self 0.217ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.578 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.027ms self 0.027ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.578 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/NormalizeNames total 0.284ms self 0.284ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.578 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/Simplify total 0.188ms self 0.188ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.578 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/ForwardLets total 0.759ms self 0.759ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.578 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/ForwardRelationalLets total 0.077ms self 0.077ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.578 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/PruneDeadFields total 0.635ms self 0.635ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.578 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/Verify total 0.034ms self 0.034ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.578 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/LowerOrInterpretNonCompilable total 0.333ms self 0.008ms children 0.325ms %children 97.69%
2023-11-17 18:07:56.579 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/LowerOrInterpretNonCompilable/Verify total 0.013ms self 0.013ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.579 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation total 0.065ms self 0.065ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.579 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/LowerOrInterpretNonCompilable/Verify total 0.246ms self 0.246ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.579 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable total 7.009ms self 0.009ms children 7.001ms %children 99.88%
2023-11-17 18:07:56.579 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/Verify total 0.007ms self 0.007ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.579 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation total 6.865ms self 0.197ms children 6.668ms %children 97.13%
2023-11-17 18:07:56.579 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize total 6.668ms self 0.077ms children 6.592ms %children 98.85%
2023-11-17 18:07:56.579 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/FoldConstants total 0.074ms self 0.074ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.579 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.028ms self 0.028ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.579 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/NormalizeNames total 0.267ms self 0.267ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.579 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/Simplify total 0.192ms self 0.192ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.579 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/ForwardLets total 0.697ms self 0.697ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.579 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/ForwardRelationalLets total 0.084ms self 0.084ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.579 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/PruneDeadFields total 0.658ms self 0.658ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.580 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/FoldConstants total 0.193ms self 0.193ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.580 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.043ms self 0.043ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.580 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/NormalizeNames total 0.267ms self 0.267ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.580 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/Simplify total 0.173ms self 0.173ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.580 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/ForwardLets total 0.765ms self 0.765ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.580 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/ForwardRelationalLets total 0.063ms self 0.063ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.580 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/PruneDeadFields total 0.956ms self 0.956ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.580 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/FoldConstants total 0.225ms self 0.225ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.580 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.028ms self 0.028ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.580 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/NormalizeNames total 0.257ms self 0.257ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.580 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/Simplify total 0.154ms self 0.154ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.580 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/ForwardLets total 0.652ms self 0.652ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.580 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/ForwardRelationalLets total 0.075ms self 0.075ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.580 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/PruneDeadFields total 0.742ms self 0.742ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.580 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/Verify total 0.128ms self 0.128ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.581 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile total 861.436ms self 831.398ms children 30.038ms %children 3.49%
2023-11-17 18:07:56.581 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, initial IR total 7.680ms self 0.024ms children 7.656ms %children 99.68%
2023-11-17 18:07:56.581 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, initial IR/Verify total 0.034ms self 0.034ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.581 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, initial IR/LoweringTransformation total 7.591ms self 0.232ms children 7.358ms %children 96.94%
2023-11-17 18:07:56.581 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize total 7.358ms self 0.102ms children 7.256ms %children 98.62%
2023-11-17 18:07:56.581 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/FoldConstants total 0.108ms self 0.108ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.581 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.027ms self 0.027ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.581 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/NormalizeNames total 0.365ms self 0.365ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.581 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/Simplify total 0.253ms self 0.253ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.581 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/ForwardLets total 0.952ms self 0.952ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.581 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/ForwardRelationalLets total 0.141ms self 0.141ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.581 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/PruneDeadFields total 0.930ms self 0.930ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.582 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/FoldConstants total 0.212ms self 0.212ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.582 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.025ms self 0.025ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.582 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/NormalizeNames total 0.315ms self 0.315ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.582 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/Simplify total 0.159ms self 0.159ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.582 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/ForwardLets total 0.741ms self 0.741ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.582 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/ForwardRelationalLets total 0.066ms self 0.066ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.582 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/PruneDeadFields total 0.566ms self 0.566ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.582 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/FoldConstants total 0.248ms self 0.248ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.582 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.023ms self 0.023ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.582 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/NormalizeNames total 0.272ms self 0.272ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.582 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/Simplify total 0.212ms self 0.212ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.582 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/ForwardLets total 0.734ms self 0.734ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.582 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/ForwardRelationalLets total 0.063ms self 0.063ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.582 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/PruneDeadFields total 0.846ms self 0.846ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.582 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, initial IR/Verify total 0.031ms self 0.031ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.582 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/InlineApplyIR total 0.544ms self 0.015ms children 0.529ms %children 97.18%
2023-11-17 18:07:56.582 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/InlineApplyIR/Verify total 0.055ms self 0.055ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.582 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/InlineApplyIR/LoweringTransformation total 0.446ms self 0.446ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.582 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/InlineApplyIR/Verify total 0.028ms self 0.028ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.582 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after InlineApplyIR total 7.277ms self 0.008ms children 7.269ms %children 99.89%
2023-11-17 18:07:56.582 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after InlineApplyIR/Verify total 0.010ms self 0.010ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.583 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation total 7.212ms self 0.138ms children 7.075ms %children 98.09%
2023-11-17 18:07:56.583 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize total 7.075ms self 0.101ms children 6.974ms %children 98.58%
2023-11-17 18:07:56.583 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/FoldConstants total 0.105ms self 0.105ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.583 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.046ms self 0.046ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.583 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/NormalizeNames total 0.435ms self 0.435ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.583 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/Simplify total 0.165ms self 0.165ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.583 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/ForwardLets total 0.649ms self 0.649ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.583 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/ForwardRelationalLets total 0.081ms self 0.081ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.583 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/PruneDeadFields total 0.727ms self 0.727ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.583 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/FoldConstants total 0.258ms self 0.258ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.583 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.023ms self 0.023ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.583 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/NormalizeNames total 0.249ms self 0.249ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.583 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/Simplify total 0.196ms self 0.196ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.583 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/ForwardLets total 0.671ms self 0.671ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.583 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/ForwardRelationalLets total 0.086ms self 0.086ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.583 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/PruneDeadFields total 0.718ms self 0.718ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.583 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/FoldConstants total 0.238ms self 0.238ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.583 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.028ms self 0.028ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.583 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/NormalizeNames total 0.489ms self 0.489ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.583 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/Simplify total 0.167ms self 0.167ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.583 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/ForwardLets total 0.803ms self 0.803ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.583 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/ForwardRelationalLets total 0.097ms self 0.097ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.583 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/PruneDeadFields total 0.745ms self 0.745ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.583 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after InlineApplyIR/Verify total 0.046ms self 0.046ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.584 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/LowerArrayAggsToRunAggs total 2.240ms self 0.007ms children 2.232ms %children 99.67%
2023-11-17 18:07:56.584 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/LowerArrayAggsToRunAggs/Verify total 0.029ms self 0.029ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.584 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/LowerArrayAggsToRunAggs/LoweringTransformation total 1.981ms self 1.981ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.584 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/LowerArrayAggsToRunAggs/Verify total 0.222ms self 0.222ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.584 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs total 7.480ms self 0.006ms children 7.474ms %children 99.92%
2023-11-17 18:07:56.584 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/Verify total 0.010ms self 0.010ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.584 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation total 7.435ms self 0.172ms children 7.263ms %children 97.69%
2023-11-17 18:07:56.584 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize total 7.263ms self 0.115ms children 7.148ms %children 98.42%
2023-11-17 18:07:56.584 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/FoldConstants total 0.066ms self 0.066ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.584 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.094ms self 0.094ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.584 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/NormalizeNames total 0.245ms self 0.245ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.584 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/Simplify total 0.169ms self 0.169ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.584 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/ForwardLets total 0.997ms self 0.997ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.584 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/ForwardRelationalLets total 0.090ms self 0.090ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.584 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/PruneDeadFields total 0.681ms self 0.681ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.584 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/FoldConstants total 0.207ms self 0.207ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.584 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.019ms self 0.019ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.584 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/NormalizeNames total 0.368ms self 0.368ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.584 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/Simplify total 0.147ms self 0.147ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.584 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/ForwardLets total 0.729ms self 0.729ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.584 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/ForwardRelationalLets total 0.057ms self 0.057ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.584 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/PruneDeadFields total 0.681ms self 0.681ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.584 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/FoldConstants total 0.224ms self 0.224ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.585 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.019ms self 0.019ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.585 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/NormalizeNames total 0.276ms self 0.276ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.585 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/Simplify total 0.171ms self 0.171ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.585 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/ForwardLets total 0.671ms self 0.671ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.585 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/ForwardRelationalLets total 0.053ms self 0.053ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.585 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/PruneDeadFields total 1.184ms self 1.184ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.585 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/Verify total 0.029ms self 0.029ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.585 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/EmitContext.analyze total 4.817ms self 4.817ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.585 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/InitializeCompiledFunction total 10.406ms self 10.406ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.585 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/RunCompiledFunction total 0.217ms self 0.217ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.585 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/Verify total 0.013ms self 0.013ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.585 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable total 0.331ms self 0.005ms children 0.325ms %children 98.41%
2023-11-17 18:07:56.585 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/Verify total 0.002ms self 0.002ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.585 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation total 0.322ms self 0.009ms children 0.312ms %children 97.19%
2023-11-17 18:07:56.585 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize total 0.312ms self 0.017ms children 0.296ms %children 94.66%
2023-11-17 18:07:56.585 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/FoldConstants total 0.037ms self 0.037ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.585 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.005ms self 0.005ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.585 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/NormalizeNames total 0.077ms self 0.077ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.585 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/Simplify total 0.029ms self 0.029ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.585 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/ForwardLets total 0.073ms self 0.073ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.585 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/ForwardRelationalLets total 0.018ms self 0.018ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.585 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/PruneDeadFields total 0.057ms self 0.057ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.585 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/Verify total 0.002ms self 0.002ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.585 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/Verify total 0.033ms self 0.033ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.586 : INFO: timing SparkBackend.execute/execute/LowerAndExecuteShuffles total 0.049ms self 0.005ms children 0.044ms %children 90.14%
2023-11-17 18:07:56.586 : INFO: timing SparkBackend.execute/execute/LowerAndExecuteShuffles/Verify total 0.010ms self 0.010ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.586 : INFO: timing SparkBackend.execute/execute/LowerAndExecuteShuffles/LoweringTransformation total 0.024ms self 0.024ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.586 : INFO: timing SparkBackend.execute/execute/LowerAndExecuteShuffles/Verify total 0.010ms self 0.010ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.586 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerAndExecuteShuffles total 15.561ms self 0.005ms children 15.555ms %children 99.97%
2023-11-17 18:07:56.587 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerAndExecuteShuffles/Verify total 0.006ms self 0.006ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.587 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation total 15.531ms self 0.012ms children 15.519ms %children 99.92%
2023-11-17 18:07:56.587 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize total 15.519ms self 0.127ms children 15.392ms %children 99.18%
2023-11-17 18:07:56.587 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/FoldConstants total 10.439ms self 10.439ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.587 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.028ms self 0.028ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.587 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/NormalizeNames total 0.322ms self 0.322ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.587 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/Simplify total 0.132ms self 0.132ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.587 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/ForwardLets total 0.433ms self 0.433ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.587 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/ForwardRelationalLets total 0.041ms self 0.041ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.587 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/PruneDeadFields total 1.341ms self 1.341ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.587 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/FoldConstants total 0.100ms self 0.100ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.587 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.011ms self 0.011ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.587 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/NormalizeNames total 0.181ms self 0.181ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.587 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/Simplify total 0.082ms self 0.082ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.587 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/ForwardLets total 0.851ms self 0.851ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.587 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/ForwardRelationalLets total 0.031ms self 0.031ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.587 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/PruneDeadFields total 0.422ms self 0.422ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.587 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/FoldConstants total 0.078ms self 0.078ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.587 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.011ms self 0.011ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.588 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/NormalizeNames total 0.139ms self 0.139ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.588 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/Simplify total 0.076ms self 0.076ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.588 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/ForwardLets total 0.299ms self 0.299ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.588 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/ForwardRelationalLets total 0.027ms self 0.027ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.588 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/PruneDeadFields total 0.348ms self 0.348ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.588 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerAndExecuteShuffles/Verify total 0.018ms self 0.018ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.588 : INFO: timing SparkBackend.execute/execute/LowerOrInterpretNonCompilable total 0.092ms self 0.006ms children 0.086ms %children 93.80%
2023-11-17 18:07:56.588 : INFO: timing SparkBackend.execute/execute/LowerOrInterpretNonCompilable/Verify total 0.008ms self 0.008ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.588 : INFO: timing SparkBackend.execute/execute/LowerOrInterpretNonCompilable/LoweringTransformation total 0.064ms self 0.064ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.588 : INFO: timing SparkBackend.execute/execute/LowerOrInterpretNonCompilable/Verify total 0.014ms self 0.014ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.588 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerOrInterpretNonCompilable total 3.519ms self 0.005ms children 3.514ms %children 99.85%
2023-11-17 18:07:56.588 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/Verify total 0.005ms self 0.005ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.588 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation total 3.491ms self 0.015ms children 3.476ms %children 99.58%
2023-11-17 18:07:56.588 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize total 3.476ms self 0.110ms children 3.366ms %children 96.83%
2023-11-17 18:07:56.588 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/FoldConstants total 0.049ms self 0.049ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.588 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.016ms self 0.016ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.588 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/NormalizeNames total 0.138ms self 0.138ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.588 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/Simplify total 0.085ms self 0.085ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.588 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/ForwardLets total 0.315ms self 0.315ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.588 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/ForwardRelationalLets total 0.032ms self 0.032ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.588 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/PruneDeadFields total 0.430ms self 0.430ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.588 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/FoldConstants total 0.073ms self 0.073ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.588 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.009ms self 0.009ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.588 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/NormalizeNames total 0.147ms self 0.147ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.588 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/Simplify total 0.074ms self 0.074ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.588 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/ForwardLets total 0.296ms self 0.296ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.588 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/ForwardRelationalLets total 0.027ms self 0.027ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.588 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/PruneDeadFields total 0.337ms self 0.337ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.589 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/FoldConstants total 0.066ms self 0.066ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.589 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.008ms self 0.008ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.589 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/NormalizeNames total 0.184ms self 0.184ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.589 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/Simplify total 0.082ms self 0.082ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.589 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/ForwardLets total 0.586ms self 0.586ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.589 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/ForwardRelationalLets total 0.035ms self 0.035ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.589 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/PruneDeadFields total 0.378ms self 0.378ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.589 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/Verify total 0.018ms self 0.018ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.589 : INFO: timing SparkBackend.execute/execute/Compile total 57.163ms self 43.404ms children 13.759ms %children 24.07%
2023-11-17 18:07:56.589 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, initial IR total 3.345ms self 0.006ms children 3.339ms %children 99.81%
2023-11-17 18:07:56.589 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, initial IR/Verify total 0.006ms self 0.006ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.589 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, initial IR/LoweringTransformation total 3.305ms self 0.030ms children 3.275ms %children 99.09%
2023-11-17 18:07:56.589 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize total 3.275ms self 0.080ms children 3.195ms %children 97.56%
2023-11-17 18:07:56.589 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/FoldConstants total 0.070ms self 0.070ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.589 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.010ms self 0.010ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.589 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/NormalizeNames total 0.114ms self 0.114ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.589 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/Simplify total 0.084ms self 0.084ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.589 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/ForwardLets total 0.340ms self 0.340ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.589 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/ForwardRelationalLets total 0.031ms self 0.031ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.589 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/PruneDeadFields total 0.413ms self 0.413ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.589 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/FoldConstants total 0.075ms self 0.075ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.589 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.008ms self 0.008ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.589 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/NormalizeNames total 0.176ms self 0.176ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.589 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/Simplify total 0.076ms self 0.076ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.589 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/ForwardLets total 0.308ms self 0.308ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.589 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/ForwardRelationalLets total 0.028ms self 0.028ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.589 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/PruneDeadFields total 0.371ms self 0.371ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.589 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/FoldConstants total 0.087ms self 0.087ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.589 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.010ms self 0.010ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.590 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/NormalizeNames total 0.161ms self 0.161ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.590 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/Simplify total 0.085ms self 0.085ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.590 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/ForwardLets total 0.310ms self 0.310ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.590 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/ForwardRelationalLets total 0.028ms self 0.028ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.590 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/PruneDeadFields total 0.411ms self 0.411ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.590 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, initial IR/Verify total 0.027ms self 0.027ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.590 : INFO: timing SparkBackend.execute/execute/Compile/InlineApplyIR total 0.060ms self 0.006ms children 0.055ms %children 90.73%
2023-11-17 18:07:56.590 : INFO: timing SparkBackend.execute/execute/Compile/InlineApplyIR/Verify total 0.017ms self 0.017ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.590 : INFO: timing SparkBackend.execute/execute/Compile/InlineApplyIR/LoweringTransformation total 0.024ms self 0.024ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.590 : INFO: timing SparkBackend.execute/execute/Compile/InlineApplyIR/Verify total 0.014ms self 0.014ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.590 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after InlineApplyIR total 4.184ms self 0.005ms children 4.179ms %children 99.88%
2023-11-17 18:07:56.590 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after InlineApplyIR/Verify total 0.006ms self 0.006ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.590 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation total 4.151ms self 0.028ms children 4.124ms %children 99.34%
2023-11-17 18:07:56.590 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize total 4.124ms self 0.084ms children 4.040ms %children 97.97%
2023-11-17 18:07:56.590 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/FoldConstants total 0.057ms self 0.057ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.590 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.016ms self 0.016ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.590 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/NormalizeNames total 0.264ms self 0.264ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.590 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/Simplify total 0.121ms self 0.121ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.590 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/ForwardLets total 0.405ms self 0.405ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.590 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/ForwardRelationalLets total 0.038ms self 0.038ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.590 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/PruneDeadFields total 0.682ms self 0.682ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.590 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/FoldConstants total 0.109ms self 0.109ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.590 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.010ms self 0.010ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.590 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/NormalizeNames total 0.169ms self 0.169ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.590 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/Simplify total 0.171ms self 0.171ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.590 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/ForwardLets total 0.380ms self 0.380ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.590 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/ForwardRelationalLets total 0.034ms self 0.034ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.590 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/PruneDeadFields total 0.450ms self 0.450ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.590 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/FoldConstants total 0.087ms self 0.087ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.591 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.010ms self 0.010ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.591 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/NormalizeNames total 0.163ms self 0.163ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.591 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/Simplify total 0.083ms self 0.083ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.591 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/ForwardLets total 0.320ms self 0.320ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.591 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/ForwardRelationalLets total 0.030ms self 0.030ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.591 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/PruneDeadFields total 0.440ms self 0.440ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.591 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after InlineApplyIR/Verify total 0.022ms self 0.022ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.591 : INFO: timing SparkBackend.execute/execute/Compile/LowerArrayAggsToRunAggs total 1.875ms self 0.005ms children 1.870ms %children 99.73%
2023-11-17 18:07:56.591 : INFO: timing SparkBackend.execute/execute/Compile/LowerArrayAggsToRunAggs/Verify total 0.017ms self 0.017ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.591 : INFO: timing SparkBackend.execute/execute/Compile/LowerArrayAggsToRunAggs/LoweringTransformation total 1.835ms self 1.835ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.591 : INFO: timing SparkBackend.execute/execute/Compile/LowerArrayAggsToRunAggs/Verify total 0.018ms self 0.018ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.591 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs total 3.562ms self 0.009ms children 3.553ms %children 99.74%
2023-11-17 18:07:56.591 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/Verify total 0.008ms self 0.008ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.591 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation total 3.525ms self 0.024ms children 3.500ms %children 99.31%
2023-11-17 18:07:56.591 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize total 3.500ms self 0.073ms children 3.427ms %children 97.90%
2023-11-17 18:07:56.591 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/FoldConstants total 0.052ms self 0.052ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.591 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.014ms self 0.014ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.591 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/NormalizeNames total 0.150ms self 0.150ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.591 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/Simplify total 0.109ms self 0.109ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.591 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/ForwardLets total 0.657ms self 0.657ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.591 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/ForwardRelationalLets total 0.032ms self 0.032ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.591 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/PruneDeadFields total 0.484ms self 0.484ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.591 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/FoldConstants total 0.093ms self 0.093ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.591 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.009ms self 0.009ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.591 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/NormalizeNames total 0.124ms self 0.124ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.591 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/Simplify total 0.082ms self 0.082ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.591 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/ForwardLets total 0.249ms self 0.249ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.591 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/ForwardRelationalLets total 0.025ms self 0.025ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.591 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/PruneDeadFields total 0.390ms self 0.390ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.591 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/FoldConstants total 0.087ms self 0.087ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.591 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.008ms self 0.008ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.591 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/NormalizeNames total 0.124ms self 0.124ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.591 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/Simplify total 0.104ms self 0.104ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.591 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/ForwardLets total 0.248ms self 0.248ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.591 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/ForwardRelationalLets total 0.026ms self 0.026ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.591 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/PruneDeadFields total 0.360ms self 0.360ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.591 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/Verify total 0.020ms self 0.020ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.592 : INFO: timing SparkBackend.execute/execute/Compile/EmitContext.analyze total 0.732ms self 0.732ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.592 : INFO: timing SparkBackend.execute/execute/InitializeCompiledFunction total 1.283ms self 1.283ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.592 : INFO: timing SparkBackend.execute/execute/RunCompiledFunction total 0.012ms self 0.012ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.593 : INFO: RegionPool: initialized for thread 78: Thread-20
2023-11-17 18:07:56.612 : INFO: starting execution of query hail_query_2 of initial size 251
2023-11-17 18:07:56.625 : INFO: java.lang.UnsupportedOperationException: SemanticHash unknown: is.hail.expr.ir.TableHead
2023-11-17 18:07:56.625 : INFO: IR Semantic Hash: None
2023-11-17 18:07:56.634 : INFO: initial IR: IR size 251: 

%1 = RNGStateLiteral
!2 = EncodedLiteral [Array[Tuple[Int32,Int32]]]
!s = ToStream(!2) [False] 
!c0 = I32 [0] 
!c1 = I32 [1]
!s2 = StreamIota(!c0, !c1) [False]
!s3 = StreamZip(!s, !s2) [22, TakeMinLength] {
(%elt, %elt2) =>
  !3 = Cast(%elt2) [Int64]
  MakeTuple(!3, %elt) [(0 1)]
} 
%4 = RNGStateLiteral
!c3 = I32 [3] 
!c10 = I32 [10] 
!c100 = I32 [100] 
!c8 = I32 [8] 
!5 = EncodedLiteral [Array[Int32]] 
!6 = EncodedLiteral [Array[Float64]] 
!false = False
!7 = MakeStruct(n_populations: !c3, n_samples: !c10, n_variants: !c100, n_partitions: !c8, pop_dist: !5, fst: !6, mixture: !false) 
!c0_2 = I32 [0] 
!c10_2 = I32 [10] 
!c1_2 = I32 [1]
!s4 = StreamRange(!c0_2, !c10_2, !c1_2) [1, False]
!s5 = StreamMap(!s4) { (%elt3) =>
  !8 = Cast(%elt3) [Int64]
  MakeTuple(!8, %elt3) [(0 1)]
}
!s8 = StreamMap(!s5) { (%elt4) =>
  !9 = GetTupleElement(%elt4) [0]
  %10 = RNGSplit(%4, !9)
  %11 = GetTupleElement(%elt4) [1]
  !12 = EncodedLiteral [Array[Int32]]
  !s6 = ToStream(!12) [False]
  !s7 = StreamMap(!s6) { (%elt5) =>
    ApplyIR(%elt5) [2, toFloat64, (), Float64]
  }
  !13 = ToArray(!s7)
  !14 = ApplySeeded(!13, %10) [rand_cat, 0, Int32]
  MakeStruct(sample_idx: %11, pop: !14)
}
!15 = ToArray(!s8)
!16 = MakeStruct(bn: !7, cols: !15) 
%17 = GetTupleElement(%undefined_ref) [0]
!c0_3 = I32 [0] 
!c1_3 = I32 [1]
!s9 = StreamIota(!c0_3, !c1_3) [False] 
%18 = RNGStateLiteral
%19 = RNGSplit(%18, %17)
%20 = GetTupleElement(%undefined_ref2) [1]
!21 = GetTupleElement(%20) [0] 
!22 = GetTupleElement(%20) [1] 
!c1_4 = I32 [1]
!s10 = StreamRange(!21, !22, !c1_4) [3, False]
!s11 = StreamMap(!s10) { (%elt6) =>
  !23 = Cast(%elt6) [Int64]
  MakeTuple(!23, %elt6) [(0 1)]
}
!s18 = StreamMap(!s11) { (%elt7) =>
  !24 = GetTupleElement(%elt7) [0]
  %25 = RNGSplit(%19, !24)
  %26 = GetTupleElement(%elt7) [1]
  !27 = F64 [0.1] 
  !28 = F64 [0.9]
  %29 = ApplySeeded(!27, !28, %25) [rand_unif, -1, Float64]
  !30 = ApplyIR(%26) [4, toInt64, (), Int64]
  !31 = Apply(!30) [5, globalPosToLocus, 
  (), Locus(GRCh37)] 
  !32 = EncodedLiteral [Array[String]] 
  !33 = EncodedLiteral [Array[Float64]]
  !s12 = ToStream(!33) [False] 
  !c0_4 = I32 [0] 
  !c1_5 = I32 [1]
  !s13 = StreamIota(!c0_4, !c1_5) [False]
  !s14 = StreamZip(!s12, !s13) [7, TakeMinLength] {
  (%elt8, %elt9) =>
    !34 = Cast(%elt9) [Int64]
    MakeTuple(!34, %elt8) [(0 1)]
  }
  !s15 = StreamMap(!s14) { (%elt10) =>
    !35 = GetTupleElement(%elt10) [0]
    %36 = RNGSplit(%25, !35)
    %37 = GetTupleElement(%elt10) [1]
    !38 = ApplyBinaryPrimOp(%29, %37) [Multiply] 
    !c1_6 = I32 [1]
    !39 = ApplyIR(!c1_6) [6, toFloat64, (), Float64]
    !40 = ApplyBinaryPrimOp(!39, %29) [Subtract]
    !41 = ApplyBinaryPrimOp(!40, %37) [Multiply]
    ApplySeeded(!38, !41, %36) [rand_beta, 1, Float64]
  }
  !42 = ToArray(!s15) 
  %43 = MakeStruct()
  !c0_5 = I32 [0] 
  !c10_3 = I32 [10] 
  !c1_7 = I32 [1]
  !s16 = StreamRange(!c0_5, !c10_3, !c1_7) [8, False]
  !s17 = StreamMap(!s16) { (%elt11) => %43 }
  !44 = ToArray(!s17)
  MakeStruct(locus: !31, alleles: !32, ancestral_af: %29, af: !42, entries: !44)
}
!s19 = StreamZip(!s9, !s18) [23, TakeMinLength] {
(%elt12, %elt13) =>
  !45 = Cast(%elt12) [Int64]
  !46 = MakeTuple(%17, !45) [(0 1)]
  InsertFields %elt13 (__row_uid: !46)
}
!ht = TableGen(!s3, !16, !s19) [__uid_33, globals___uid_8, (Partitioner Struct{locus:Locus(GRCh37),alleles:Array[String]}"[{\"start\":{\"locus\":{\"contig\":\"1\",\"position\":1},\"alleles\":[\"A\",\"C\"]},\"end\":{\"locus\":{\"contig\":\"1\",\"position\":13},\"alleles\":[\"A\",\"C\"]},\"includeStart\":true,\"includeEnd\":false},{\"start\":{\"locus\":{\"contig\":\"1\",\"position\":13},\"alleles\":[\"A\",\"C\"]},\"end\":{\"locus\":{\"contig\":\"1\",\"position\":26},\"alleles\":[\"A\",\"C\"]},\"includeStart\":true,\"includeEnd\":false},{\"start\":{\"locus\":{\"contig\":\"1\",\"position\":26},\"alleles\":[\"A\",\"C\"]},\"end\":{\"locus\":{\"contig\":\"1\",\"position\":38},\"alleles\":[\"A\",\"C\"]},\"includeStart\":true,\"includeEnd\":false},{\"start\":{\"locus\":{\"contig\":\"1\",\"position\":38},\"alleles\":[\"A\",\"C\"]},\"end\":{\"locus\":{\"contig\":\"1\",\"position\":51},\"alleles\":[\"A\",\"C\"]},\"includeStart\":true,\"includeEnd\":false},{\"start\":{\"locus\":{\"contig\":\"1\",\"position\":51},\"alleles\":[\"A\",\"C\"]},\"end\":{\"locus\":{\"contig\":\"1\",\"position\":63},\"alleles\":[\"A\",\"C\"]},\"includeStart\":true,\"includeEnd\":false},{\"start\":{\"locus\":{\"contig\":\"1\",\"position\":63},\"alleles\":[\"A\",\"C\"]},\"end\":{\"locus\":{\"contig\":\"1\",\"position\":76},\"alleles\":[\"A\",\"C\"]},\"includeStart\":true,\"includeEnd\":false},{\"start\":{\"locus\":{\"contig\":\"1\",\"position\":76},\"alleles\":[\"A\",\"C\"]},\"end\":{\"locus\":{\"contig\":\"1\",\"position\":88},\"alleles\":[\"A\",\"C\"]},\"includeStart\":true,\"includeEnd\":false},{\"start\":{\"locus\":{\"contig\":\"1\",\"position\":88},\"alleles\":[\"A\",\"C\"]},\"end\":{\"locus\":{\"contig\":\"1\",\"position\":101},\"alleles\":[\"A\",\"C\"]},\"includeStart\":true,\"includeEnd\":false}]"), 9]
!ht2 = TableMapGlobals(!ht) { (%g) =>
  %47 = GetField(%g) [cols]
  !s20 = ToStream(%47) [False] 
  !c0_6 = I32 [0] 
  !c1_8 = I32 [1]
  !s21 = StreamIota(!c0_6, !c1_8) [False]
  !s22 = StreamZip(!s20, !s21) [21, TakeMinLength] {
  (%elt14, %elt15) =>
    !48 = Cast(%elt15) [Int64]
    InsertFields %elt14 (__col_uid: !48)
  }
  !49 = ToArray(!s22)
  InsertFields %g (cols: !49)
}
!50 = CastTableToMatrix(!ht2) [entries, cols, 
(sample_idx)]
!77 = MatrixMapEntries(!50) {
(%g2, %col, %row, %entry) =>
  %51 = GetField(%row) [__row_uid]
  !52 = RNGStateLiteral 
  !53 = GetTupleElement(%51) [0] 
  !54 = GetTupleElement(%51) [1] 
  !55 = GetField(%col) [__col_uid]
  !56 = MakeTuple(!53, !54, !55) [(0 1 2)]
  %57 = RNGSplit(!52, !56)
  %58 = SelectFields(%col) [(sample_idx pop)]
  %59 = SelectFields(%row) [
  (locus alleles ancestral_af af)]
  !60 = GetField(%59) [af] 
  !61 = GetField(%58) [pop]
  %62 = ApplyIR(!60, !61) [10, indexArray, 
  (), Float64]
  !c1_9 = I32 [1]
  !63 = ApplyIR(!c1_9) [11, toFloat64, (), Float64]
  %64 = ApplyBinaryPrimOp(!63, %62) [Subtract]
  !65 = SelectFields(%entry) [()]
  !66 = SelectFields(!65) [()] 
  !c2 = I32 [2]
  !67 = ApplyIR(!c2) [12, toFloat64, (), Float64]
  !68 = Apply(%64, !67) [13, pow, (), Float64] 
  !c2_2 = I32 [2]
  !69 = ApplyIR(!c2_2) [14, toFloat64, (), Float64]
  !70 = ApplyBinaryPrimOp(!69, %62) [Multiply]
  !71 = ApplyBinaryPrimOp(!70, %64) [Multiply] 
  !c2_3 = I32 [2]
  !72 = ApplyIR(!c2_3) [15, toFloat64, (), Float64]
  !73 = Apply(%62, !72) [16, pow, (), Float64]
  !74 = MakeArray(!68, !71, !73) [Array[Float64]]
  !75 = ApplySeeded(!74, %57) [rand_cat, 2, Int32]
  !76 = Apply(!75) [17, UnphasedDiploidGtIndexCall, 
  (), Call]
  InsertFields !66 (GT: !76)
}
!78 = MatrixMapRows(!77) {
(%g3, %row2, %col2, %entry2, %n_cols) =>
  SelectFields(%row2) [
  (locus alleles ancestral_af af)]
}
!79 = MatrixMapCols(!78) [None] {
(%g4, %row3, %col3, %entry3, %n_rows) =>
  SelectFields(%col3) [(sample_idx pop)]
}
!82 = MatrixMapCols(!79) [None] {
(%g5, %row4, %col4, %entry4, %n_rows2) =>
  !80 = SelectFields(%col4) [(sample_idx pop)]
  !81 = SelectFields(!80) [(sample_idx)]
  InsertFields !81 ()
}
!85 = MatrixMapGlobals(!82) { (%g6) =>
  !83 = SelectFields(%g6) [(bn)]
  !84 = SelectFields(!83) [()]
  InsertFields !84 ()
}
!86 = MatrixMapCols(!85) [()] {
(%g7, %row5, %col5, %entry5, %n_rows3) =>
  SelectFields(%col5) [(sample_idx)]
}
!ht3 = MatrixColsTable(!86)
!ht4 = TableMapRows(!ht3) { (%g8, %row6) =>
  !87 = SelectFields(%row6) [(sample_idx)]
  !88 = SelectFields(!87) [(sample_idx)]
  InsertFields !88 ()
}
!ht5 = TableHead(!ht4) [4]
!89 = TableCollect(!ht5)
!90 = GetField(!89) [rows]
!s23 = ToStream(!90) [False]
!s24 = StreamMap(!s23) { (%elt16) =>
  GetField(%elt16) [sample_idx]
}
!91 = ToArray(!s24)
MakeTuple(!91) [(0)]

2023-11-17 18:07:56.635 : INFO: decoder cache hit
2023-11-17 18:07:56.635 : INFO: decoder cache hit
2023-11-17 18:07:56.686 : INFO: Prune: MakeStruct: eliminating field 'bn'
2023-11-17 18:07:56.686 : INFO: Prune: MakeStruct: eliminating field 'locus'
2023-11-17 18:07:56.686 : INFO: Prune: MakeStruct: eliminating field 'alleles'
2023-11-17 18:07:56.686 : INFO: Prune: MakeStruct: eliminating field 'ancestral_af'
2023-11-17 18:07:56.688 : INFO: Prune: InsertFields: eliminating field 'GT'
2023-11-17 18:07:56.709 : INFO: Prune: MakeStruct: eliminating field 'af'
2023-11-17 18:07:56.709 : INFO: Prune: InsertFields: eliminating field '__row_uid'
2023-11-17 18:07:56.724 : INFO: after optimize: relationalLowerer, initial IR: IR size 96: 

!1 = EncodedLiteral [Array[Tuple[Int32,Int32]]]
!s = ToStream(!1) [False] 
!c0 = I32 [0] 
!c1 = I32 [1]
!s2 = StreamIota(!c0, !c1) [False]
!s3 = StreamZip(!s, !s2) [22, TakeMinLength] {
(%elt, %elt2) =>
  !2 = Cast(%elt2) [Int64]
  MakeTuple(!2, %elt) [(0 1)]
} 
%3 = RNGStateLiteral
!c0_2 = I32 [0] 
!c10 = I32 [10] 
!c1_2 = I32 [1]
!s4 = StreamRange(!c0_2, !c10, !c1_2) [1, False]
!s7 = StreamMap(!s4) { (%elt3) =>
  !4 = Cast(%elt3) [Int64]
  %5 = MakeTuple(!4, %elt3) [(0 1)]
  !6 = GetTupleElement(%5) [1] 
  !7 = EncodedLiteral [Array[Int32]]
  !s5 = ToStream(!7) [False]
  !s6 = StreamMap(!s5) { (%elt4) =>
    Cast(%elt4) [Float64]
  }
  !8 = ToArray(!s6) 
  !9 = GetTupleElement(%5) [0]
  !10 = RNGSplit(%3, !9)
  !11 = ApplySeeded(!8, !10) [rand_cat, 0, Int32]
  MakeStruct(sample_idx: !6, pop: !11)
}
!12 = ToArray(!s7)
!13 = MakeStruct(cols: !12) 
!c0_3 = I32 [0] 
!c1_3 = I32 [1]
!s8 = StreamIota(!c0_3, !c1_3) [False] 
!14 = RNGStateLiteral 
!15 = GetTupleElement(%undefined_ref) [0]
%16 = RNGSplit(!14, !15)
%17 = GetTupleElement(%undefined_ref2) [1]
!18 = GetTupleElement(%17) [0] 
!19 = GetTupleElement(%17) [1] 
!c1_4 = I32 [1]
!s9 = StreamRange(!18, !19, !c1_4) [3, False]
!s12 = StreamMap(!s9) { (%elt5) =>
  !c0_4 = I32 [0] 
  !c10_2 = I32 [10] 
  !c1_5 = I32 [1]
  !s10 = StreamRange(!c0_4, !c10_2, !c1_5) [8, False]
  !s11 = StreamMap(!s10) { (%elt6) =>
    Literal [Struct{}, <literal value>]
  }
  !20 = ToArray(!s11)
  MakeStruct(entries: !20)
}
!s13 = StreamZip(!s8, !s12) [23, TakeMinLength] {
(%elt7, %elt8) => %elt8 }
!ht = TableGen(!s3, !13, !s13) [__uid_33, globals___uid_8, (Partitioner Struct{}"[{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true}]"), 9]
!ht2 = TableMapGlobals(!ht) { (%g) =>
  !21 = GetField(%g) [cols]
  !s14 = ToStream(!21) [False] 
  !c0_5 = I32 [0] 
  !c1_6 = I32 [1]
  !s15 = StreamIota(!c0_5, !c1_6) [False]
  !s16 = StreamZip(!s14, !s15) [21, TakeMinLength] {
  (%elt9, %elt10) =>
    !22 = Cast(%elt10) [Int64]
    InsertFields %elt9 (__col_uid: !22)
  }
  !23 = ToArray(!s16)
  InsertFields %g (cols: !23)
}
!24 = CastTableToMatrix(!ht2) [entries, cols, ()]
!25 = MatrixColsHead(!24) [4]
!26 = MatrixMapCols(!25) [()] {
(%g2, %row, %col, %entry, %n_rows) =>
  SelectFields(%col) [(sample_idx)]
}
!ht3 = MatrixColsTable(!26)
!27 = TableCollect(!ht3)
!28 = GetField(!27) [rows]
!s17 = ToStream(!28) [False]
!s18 = StreamMap(!s17) { (%elt11) =>
  GetField(%elt11) [sample_idx]
}
!29 = ToArray(!s18)
MakeTuple(!29) [(0)]

2023-11-17 18:07:56.736 : INFO: after LowerMatrixToTable: IR size 177: 

!1 = EncodedLiteral [Array[Tuple[Int32,Int32]]]
!s = ToStream(!1) [False] 
!c0 = I32 [0] 
!c1 = I32 [1]
!s2 = StreamIota(!c0, !c1) [False]
!s3 = StreamZip(!s, !s2) [22, TakeMinLength] {
(%elt, %elt2) =>
  !2 = Cast(%elt2) [Int64]
  MakeTuple(!2, %elt) [(0 1)]
} 
%3 = RNGStateLiteral
!c0_2 = I32 [0] 
!c10 = I32 [10] 
!c1_2 = I32 [1]
!s4 = StreamRange(!c0_2, !c10, !c1_2) [1, False]
!s7 = StreamMap(!s4) { (%elt3) =>
  !4 = Cast(%elt3) [Int64]
  %5 = MakeTuple(!4, %elt3) [(0 1)]
  !6 = GetTupleElement(%5) [1] 
  !7 = EncodedLiteral [Array[Int32]]
  !s5 = ToStream(!7) [False]
  !s6 = StreamMap(!s5) { (%elt4) =>
    Cast(%elt4) [Float64]
  }
  !8 = ToArray(!s6) 
  !9 = GetTupleElement(%5) [0]
  !10 = RNGSplit(%3, !9)
  !11 = ApplySeeded(!8, !10) [rand_cat, 0, Int32]
  MakeStruct(sample_idx: !6, pop: !11)
}
!12 = ToArray(!s7)
!13 = MakeStruct(cols: !12) 
!c0_3 = I32 [0] 
!c1_3 = I32 [1]
!s8 = StreamIota(!c0_3, !c1_3) [False] 
!14 = RNGStateLiteral 
!15 = GetTupleElement(%undefined_ref) [0]
%16 = RNGSplit(!14, !15)
%17 = GetTupleElement(%undefined_ref2) [1]
!18 = GetTupleElement(%17) [0] 
!19 = GetTupleElement(%17) [1] 
!c1_4 = I32 [1]
!s9 = StreamRange(!18, !19, !c1_4) [3, False]
!s12 = StreamMap(!s9) { (%elt5) =>
  !c0_4 = I32 [0] 
  !c10_2 = I32 [10] 
  !c1_5 = I32 [1]
  !s10 = StreamRange(!c0_4, !c10_2, !c1_5) [8, False]
  !s11 = StreamMap(!s10) { (%elt6) =>
    Literal [Struct{}, <literal value>]
  }
  !20 = ToArray(!s11)
  MakeStruct(entries: !20)
}
!s13 = StreamZip(!s8, !s12) [23, TakeMinLength] {
(%elt7, %elt8) => %elt8 }
!ht = TableGen(!s3, !13, !s13) [__uid_33, globals___uid_8, (Partitioner Struct{}"[{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true}]"), 9]
!ht2 = TableMapGlobals(!ht) { (%g) =>
  !21 = GetField(%g) [cols]
  !s14 = ToStream(!21) [False] 
  !c0_5 = I32 [0] 
  !c1_6 = I32 [1]
  !s15 = StreamIota(!c0_5, !c1_6) [False]
  !s16 = StreamZip(!s14, !s15) [21, TakeMinLength] {
  (%elt9, %elt10) =>
    !22 = Cast(%elt10) [Int64]
    InsertFields %elt9 (__col_uid: !22)
  }
  !23 = ToArray(!s16)
  InsertFields %g (cols: !23)
}
!ht3 = TableMapRows(!ht2) { (%g2, %row) =>
  %24 = GetField(%row) [entries]
  !25 = IsNA(%24)
  If !25 then {
    !26 = Str ["missing en..."]
    Die(!26) [Struct{entries:Array[Struct{}]}, -1]
  } else {
    !27 = GetField(%g2) [cols]
    %28 = ArrayLen(!27)
    %29 = ArrayLen(%24)
    !30 = ApplyComparisonOp(%29, %28) [NEQWithNA]
    If !30 then {
      !31 = Str ["length mis..."] 
      !32 = Apply(%29) [-1, str, (), String]
      !33 = Apply(!31, !32) [-1, concat, (), String] 
      !34 = Str [" entries, "]
      !35 = Apply(!33, !34) [-1, concat, (), String] 
      !36 = Apply(%28) [-1, str, (), String]
      !37 = Apply(!35, !36) [-1, concat, (), String] 
      !38 = Str [" cols, at "]
      !39 = Apply(!37, !38) [-1, concat, (), String] 
      !40 = SelectFields(%row) [()]
      !41 = Apply(!40) [-1, str, (), String]
      !42 = Apply(!39, !41) [-1, concat, (), String]
      Die(!42) [Struct{entries:Array[Struct{}]}, -1]
    } else { %row }
  }
}
!ht4 = TableRename(!ht3) [("entries"), 
(
  "the entries! [877f12a8827e18f61222c6c8c5fb04a8]"), 
("cols"), ("__cols")]
!ht5 = TableMapGlobals(!ht4) { (%g3) =>
  !43 = GetField(%g3) [__cols] 
  !c0_6 = I32 [0] 
  !c4 = I32 [4] 
  !c1_7 = I32 [1]
  !44 = ArraySlice(!43, !c0_6, !c4, !c1_7)
  InsertFields %g3 (__cols: !44)
}
!ht6 = TableMapRows(!ht5) { (%g4, %row2) =>
  !45 = GetField(%row2) [`the entries! [877f12a8827e18f61222c6c8c5fb04a8]`] 
  !c0_7 = I32 [0] 
  !c4_2 = I32 [4] 
  !c1_8 = I32 [1]
  !46 = ArraySlice(!45, !c0_7, !c4_2, !c1_8)
  InsertFields %row2 (the entries! [877f12a8827e18f61222c6c8c5fb04a8]: !46)
}
!ht7 = TableMapGlobals(!ht6) { (%g5) =>
  !c0_8 = I32 [0] 
  !47 = GetField(%g5) [__cols]
  !48 = ArrayLen(!47) 
  !c1_9 = I32 [1]
  !s17 = StreamRange(!c0_8, !48, !c1_9) [-1, False]
  !49 = ToArray(!s17)
  !s18 = ToStream(!49) [False]
  !s19 = StreamMap(!s18) { (%elt11) =>
    %50 = GetField(%g5) [__cols]
    %51 = ArrayRef(%50, %elt11) [-1]
    SelectFields(%51) [(sample_idx)]
  }
  !52 = ToArray(!s19)
  InsertFields %g5 (__cols: !52)
}
%53 = TableGetGlobals(!ht7)
!54 = GetField(%53) [__cols] 
!55 = SelectFields(%53) [()]
!56 = MakeStruct(rows: !54, global: !55)
!ht8 = TableParallelize(!56) [None]
!ht9 = TableKeyBy(!ht8) [(), False]
!57 = TableCollect(!ht9)
!58 = GetField(!57) [rows]
!s20 = ToStream(!58) [False]
!s21 = StreamMap(!s20) { (%elt12) =>
  GetField(%elt12) [sample_idx]
}
!59 = ToArray(!s21)
MakeTuple(!59) [(0)]

2023-11-17 18:07:56.766 : INFO: Prune: MakeStruct: eliminating field 'entries'
2023-11-17 18:07:56.767 : INFO: Prune: MakeStruct: eliminating field 'global'
2023-11-17 18:07:56.783 : INFO: after optimize: relationalLowerer, after LowerMatrixToTable: IR size 87: 

!1 = EncodedLiteral [Array[Tuple[Int32,Int32]]]
!s = ToStream(!1) [False] 
!c0 = I32 [0] 
!c1 = I32 [1]
!s2 = StreamIota(!c0, !c1) [False]
!s3 = StreamZip(!s, !s2) [22, TakeMinLength] {
(%elt, %elt2) =>
  MakeTuple(%elt) [(1)]
} 
%2 = RNGStateLiteral
!c0_2 = I32 [0] 
!c10 = I32 [10] 
!c1_2 = I32 [1]
!s4 = StreamRange(!c0_2, !c10, !c1_2) [1, False]
!s7 = StreamMap(!s4) { (%elt3) =>
  !3 = Cast(%elt3) [Int64]
  %4 = MakeTuple(!3, %elt3) [(0 1)]
  !5 = GetTupleElement(%4) [1] 
  !6 = EncodedLiteral [Array[Int32]]
  !s5 = ToStream(!6) [False]
  !s6 = StreamMap(!s5) { (%elt4) =>
    Cast(%elt4) [Float64]
  }
  !7 = ToArray(!s6) 
  !8 = GetTupleElement(%4) [0]
  !9 = RNGSplit(%2, !8)
  !10 = ApplySeeded(!7, !9) [rand_cat, 0, Int32]
  MakeStruct(sample_idx: !5, pop: !10)
}
!11 = ToArray(!s7)
!12 = MakeStruct(cols: !11) 
!c0_3 = I32 [0] 
!c1_3 = I32 [1]
!s8 = StreamIota(!c0_3, !c1_3) [False] 
%13 = GetTupleElement(%undefined_ref) [1]
!14 = GetTupleElement(%13) [0] 
!15 = GetTupleElement(%13) [1] 
!c1_4 = I32 [1]
!s9 = StreamRange(!14, !15, !c1_4) [3, False]
!s10 = StreamMap(!s9) { (%elt5) =>
  Literal [Struct{}, <literal value>]
}
!s11 = StreamZip(!s8, !s10) [23, TakeMinLength] {
(%elt6, %elt7) => %elt7 }
!ht = TableGen(!s3, !12, !s11) [__uid_33, globals___uid_8, (Partitioner Struct{}"[{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true}]"), 9]
!16 = TableGetGlobals(!ht)
!17 = GetField(!16) [cols]
!s12 = ToStream(!17) [False] 
!c0_4 = I32 [0] 
!c1_5 = I32 [1]
!s13 = StreamIota(!c0_4, !c1_5) [False]
!s14 = StreamZip(!s12, !s13) [21, TakeMinLength] {
(%elt8, %elt9) =>
  !18 = Cast(%elt9) [Int64]
  InsertFields %elt8 (__col_uid: !18)
} 
!c4 = I32 [4]
!s15 = StreamTake(!s14, !c4)
%19 = ToArray(!s15)
!c0_5 = I32 [0] 
!20 = ArrayLen(%19) 
!c1_6 = I32 [1]
!s16 = StreamRange(!c0_5, !20, !c1_6) [-1, False]
!s17 = StreamMap(!s16) { (%elt10) =>
  !21 = ArrayRef(%19, %elt10) [-1]
  SelectFields(!21) [(sample_idx)]
}
!22 = ToArray(!s17)
!23 = MakeStruct(rows: !22)
!24 = GetField(!23) [rows]
!s18 = ToStream(!24) [False]
!s19 = StreamMap(!s18) { (%elt11) =>
  GetField(%elt11) [sample_idx]
}
!25 = ToArray(!s19)
MakeTuple(!25) [(0)]

2023-11-17 18:07:56.785 : INFO: after LiftRelationalValuesToRelationalLets: IR size 89: 

!1 = EncodedLiteral [Array[Tuple[Int32,Int32]]]
!s = ToStream(!1) [False] 
!c0 = I32 [0] 
!c1 = I32 [1]
!s2 = StreamIota(!c0, !c1) [False]
!s3 = StreamZip(!s, !s2) [22, TakeMinLength] {
(%elt, %elt2) =>
  MakeTuple(%elt) [(1)]
} 
%2 = RNGStateLiteral
!c0_2 = I32 [0] 
!c10 = I32 [10] 
!c1_2 = I32 [1]
!s4 = StreamRange(!c0_2, !c10, !c1_2) [1, False]
!s7 = StreamMap(!s4) { (%elt3) =>
  !3 = Cast(%elt3) [Int64]
  %4 = MakeTuple(!3, %elt3) [(0 1)]
  !5 = GetTupleElement(%4) [1] 
  !6 = EncodedLiteral [Array[Int32]]
  !s5 = ToStream(!6) [False]
  !s6 = StreamMap(!s5) { (%elt4) =>
    Cast(%elt4) [Float64]
  }
  !7 = ToArray(!s6) 
  !8 = GetTupleElement(%4) [0]
  !9 = RNGSplit(%2, !8)
  !10 = ApplySeeded(!7, !9) [rand_cat, 0, Int32]
  MakeStruct(sample_idx: !5, pop: !10)
}
!11 = ToArray(!s7)
!12 = MakeStruct(cols: !11) 
!c0_3 = I32 [0] 
!c1_3 = I32 [1]
!s8 = StreamIota(!c0_3, !c1_3) [False] 
%13 = GetTupleElement(%undefined_ref) [1]
!14 = GetTupleElement(%13) [0] 
!15 = GetTupleElement(%13) [1] 
!c1_4 = I32 [1]
!s9 = StreamRange(!14, !15, !c1_4) [3, False]
!s10 = StreamMap(!s9) { (%elt5) =>
  Literal [Struct{}, <literal value>]
}
!s11 = StreamZip(!s8, !s10) [23, TakeMinLength] {
(%elt6, %elt7) => %elt7 }
!ht = TableGen(!s3, !12, !s11) [__uid_33, globals___uid_8, (Partitioner Struct{}"[{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true}]"), 9]
%16 = TableGetGlobals(!ht)
!17 = GetField(%16) [cols]
!s12 = ToStream(!17) [False] 
!c0_4 = I32 [0] 
!c1_5 = I32 [1]
!s13 = StreamIota(!c0_4, !c1_5) [False]
!s14 = StreamZip(!s12, !s13) [21, TakeMinLength] {
(%elt8, %elt9) =>
  !18 = Cast(%elt9) [Int64]
  InsertFields %elt8 (__col_uid: !18)
} 
!c4 = I32 [4]
!s15 = StreamTake(!s14, !c4)
%19 = ToArray(!s15)
!c0_5 = I32 [0] 
!20 = ArrayLen(%19) 
!c1_6 = I32 [1]
!s16 = StreamRange(!c0_5, !20, !c1_6) [-1, False]
!s17 = StreamMap(!s16) { (%elt10) =>
  !21 = ArrayRef(%19, %elt10) [-1]
  SelectFields(!21) [(sample_idx)]
}
!22 = ToArray(!s17)
!23 = MakeStruct(rows: !22)
!24 = GetField(!23) [rows]
!s18 = ToStream(!24) [False]
!s19 = StreamMap(!s18) { (%elt11) =>
  GetField(%elt11) [sample_idx]
}
!25 = ToArray(!s19)
MakeTuple(!25) [(0)]

2023-11-17 18:07:56.787 : INFO: initial IR: IR size 54: 

!1 = EncodedLiteral [Array[Tuple[Int32,Int32]]]
!s = ToStream(!1) [False] 
!c0 = I32 [0] 
!c1 = I32 [1]
!s2 = StreamIota(!c0, !c1) [False]
!s3 = StreamZip(!s, !s2) [22, TakeMinLength] {
(%elt, %elt2) =>
  MakeTuple(%elt) [(1)]
} 
%2 = RNGStateLiteral
!c0_2 = I32 [0] 
!c10 = I32 [10] 
!c1_2 = I32 [1]
!s4 = StreamRange(!c0_2, !c10, !c1_2) [1, False]
!s7 = StreamMap(!s4) { (%elt3) =>
  !3 = Cast(%elt3) [Int64]
  %4 = MakeTuple(!3, %elt3) [(0 1)]
  !5 = GetTupleElement(%4) [1] 
  !6 = EncodedLiteral [Array[Int32]]
  !s5 = ToStream(!6) [False]
  !s6 = StreamMap(!s5) { (%elt4) =>
    Cast(%elt4) [Float64]
  }
  !7 = ToArray(!s6) 
  !8 = GetTupleElement(%4) [0]
  !9 = RNGSplit(%2, !8)
  !10 = ApplySeeded(!7, !9) [rand_cat, 0, Int32]
  MakeStruct(sample_idx: !5, pop: !10)
}
!11 = ToArray(!s7)
!12 = MakeStruct(cols: !11) 
!c0_3 = I32 [0] 
!c1_3 = I32 [1]
!s8 = StreamIota(!c0_3, !c1_3) [False] 
%13 = GetTupleElement(%undefined_ref) [1]
!14 = GetTupleElement(%13) [0] 
!15 = GetTupleElement(%13) [1] 
!c1_4 = I32 [1]
!s9 = StreamRange(!14, !15, !c1_4) [3, False]
!s10 = StreamMap(!s9) { (%elt5) =>
  Literal [Struct{}, <literal value>]
}
!s11 = StreamZip(!s8, !s10) [23, TakeMinLength] {
(%elt6, %elt7) => %elt7 }
!ht = TableGen(!s3, !12, !s11) [__uid_33, globals___uid_8, (Partitioner Struct{}"[{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true}]"), 9]
TableGetGlobals(!ht)

2023-11-17 18:07:56.789 : INFO: after LowerAndExecuteShuffles: IR size 54: 

!1 = EncodedLiteral [Array[Tuple[Int32,Int32]]]
!s = ToStream(!1) [False] 
!c0 = I32 [0] 
!c1 = I32 [1]
!s2 = StreamIota(!c0, !c1) [False]
!s3 = StreamZip(!s, !s2) [22, TakeMinLength] {
(%elt, %elt2) =>
  MakeTuple(%elt) [(1)]
} 
%2 = RNGStateLiteral
!c0_2 = I32 [0] 
!c10 = I32 [10] 
!c1_2 = I32 [1]
!s4 = StreamRange(!c0_2, !c10, !c1_2) [1, False]
!s7 = StreamMap(!s4) { (%elt3) =>
  !3 = Cast(%elt3) [Int64]
  %4 = MakeTuple(!3, %elt3) [(0 1)]
  !5 = GetTupleElement(%4) [1] 
  !6 = EncodedLiteral [Array[Int32]]
  !s5 = ToStream(!6) [False]
  !s6 = StreamMap(!s5) { (%elt4) =>
    Cast(%elt4) [Float64]
  }
  !7 = ToArray(!s6) 
  !8 = GetTupleElement(%4) [0]
  !9 = RNGSplit(%2, !8)
  !10 = ApplySeeded(!7, !9) [rand_cat, 0, Int32]
  MakeStruct(sample_idx: !5, pop: !10)
}
!11 = ToArray(!s7)
!12 = MakeStruct(cols: !11) 
!c0_3 = I32 [0] 
!c1_3 = I32 [1]
!s8 = StreamIota(!c0_3, !c1_3) [False] 
%13 = GetTupleElement(%undefined_ref) [1]
!14 = GetTupleElement(%13) [0] 
!15 = GetTupleElement(%13) [1] 
!c1_4 = I32 [1]
!s9 = StreamRange(!14, !15, !c1_4) [3, False]
!s10 = StreamMap(!s9) { (%elt5) =>
  Literal [Struct{}, <literal value>]
}
!s11 = StreamZip(!s8, !s10) [23, TakeMinLength] {
(%elt6, %elt7) => %elt7 }
!ht = TableGen(!s3, !12, !s11) [__uid_33, globals___uid_8, (Partitioner Struct{}"[{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true}]"), 9]
TableGetGlobals(!ht)

2023-11-17 18:07:56.800 : INFO: after optimize: relationalLowerer, after LowerAndExecuteShuffles: IR size 54: 

!1 = EncodedLiteral [Array[Tuple[Int32,Int32]]]
!s = ToStream(!1) [False] 
!c0 = I32 [0] 
!c1 = I32 [1]
!s2 = StreamIota(!c0, !c1) [False]
!s3 = StreamZip(!s, !s2) [22, TakeMinLength] {
(%elt, %elt2) =>
  MakeTuple(%elt) [(1)]
} 
%2 = RNGStateLiteral
!c0_2 = I32 [0] 
!c10 = I32 [10] 
!c1_2 = I32 [1]
!s4 = StreamRange(!c0_2, !c10, !c1_2) [1, False]
!s7 = StreamMap(!s4) { (%elt3) =>
  !3 = Cast(%elt3) [Int64]
  %4 = MakeTuple(!3, %elt3) [(0 1)]
  !5 = GetTupleElement(%4) [1] 
  !6 = EncodedLiteral [Array[Int32]]
  !s5 = ToStream(!6) [False]
  !s6 = StreamMap(!s5) { (%elt4) =>
    Cast(%elt4) [Float64]
  }
  !7 = ToArray(!s6) 
  !8 = GetTupleElement(%4) [0]
  !9 = RNGSplit(%2, !8)
  !10 = ApplySeeded(!7, !9) [rand_cat, 0, Int32]
  MakeStruct(sample_idx: !5, pop: !10)
}
!11 = ToArray(!s7)
!12 = MakeStruct(cols: !11) 
!c0_3 = I32 [0] 
!c1_3 = I32 [1]
!s8 = StreamIota(!c0_3, !c1_3) [False] 
%13 = GetTupleElement(%undefined_ref) [1]
!14 = GetTupleElement(%13) [0] 
!15 = GetTupleElement(%13) [1] 
!c1_4 = I32 [1]
!s9 = StreamRange(!14, !15, !c1_4) [3, False]
!s10 = StreamMap(!s9) { (%elt5) =>
  Literal [Struct{}, <literal value>]
}
!s11 = StreamZip(!s8, !s10) [23, TakeMinLength] {
(%elt6, %elt7) => %elt7 }
!ht = TableGen(!s3, !12, !s11) [__uid_33, globals___uid_8, (Partitioner Struct{}"[{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true},{\"start\":{},\"end\":{},\"includeStart\":true,\"includeEnd\":true}]"), 9]
TableGetGlobals(!ht)

2023-11-17 18:07:56.801 : INFO: LowerOrInterpretNonCompilable: whole stage code generation is a go!
2023-11-17 18:07:56.801 : INFO: lowering result: TableGetGlobals
2023-11-17 18:07:56.804 : INFO: compiling and evaluating result: TableGetGlobals
2023-11-17 18:07:56.805 : INFO: initial IR: IR size 30: 

%1 = RNGStateLiteral
!c0 = I32 [0] 
!c10 = I32 [10] 
!c1 = I32 [1]
!s = StreamRange(!c0, !c10, !c1) [1, False]
!s4 = StreamMap(!s) { (%elt) =>
  !2 = Cast(%elt) [Int64]
  %3 = MakeTuple(!2, %elt) [(0 1)]
  !4 = GetTupleElement(%3) [1] 
  !5 = EncodedLiteral [Array[Int32]]
  !s2 = ToStream(!5) [False]
  !s3 = StreamMap(!s2) { (%elt2) =>
    Cast(%elt2) [Float64]
  }
  !6 = ToArray(!s3) 
  !7 = GetTupleElement(%3) [0]
  !8 = RNGSplit(%1, !7)
  !9 = ApplySeeded(!6, !8) [rand_cat, 0, Int32]
  MakeStruct(sample_idx: !4, pop: !9)
}
!10 = ToArray(!s4)
%11 = MakeStruct(cols: !10)
Ref [__iruid_502]

2023-11-17 18:07:56.810 : INFO: after optimize: relationalLowerer, initial IR: IR size 28: 

%1 = RNGStateLiteral
!c0 = I32 [0] 
!c10 = I32 [10] 
!c1 = I32 [1]
!s = StreamRange(!c0, !c10, !c1) [1, False]
!s4 = StreamMap(!s) { (%elt) =>
  !2 = Cast(%elt) [Int64]
  %3 = MakeTuple(!2, %elt) [(0 1)]
  !4 = GetTupleElement(%3) [1] 
  !5 = EncodedLiteral [Array[Int32]]
  !s2 = ToStream(!5) [False]
  !s3 = StreamMap(!s2) { (%elt2) =>
    Cast(%elt2) [Float64]
  }
  !6 = ToArray(!s3) 
  !7 = GetTupleElement(%3) [0]
  !8 = RNGSplit(%1, !7)
  !9 = ApplySeeded(!6, !8) [rand_cat, 0, Int32]
  MakeStruct(sample_idx: !4, pop: !9)
}
!10 = ToArray(!s4)
MakeStruct(cols: !10)

2023-11-17 18:07:56.811 : INFO: after LowerMatrixToTable: IR size 28: 

%1 = RNGStateLiteral
!c0 = I32 [0] 
!c10 = I32 [10] 
!c1 = I32 [1]
!s = StreamRange(!c0, !c10, !c1) [1, False]
!s4 = StreamMap(!s) { (%elt) =>
  !2 = Cast(%elt) [Int64]
  %3 = MakeTuple(!2, %elt) [(0 1)]
  !4 = GetTupleElement(%3) [1] 
  !5 = EncodedLiteral [Array[Int32]]
  !s2 = ToStream(!5) [False]
  !s3 = StreamMap(!s2) { (%elt2) =>
    Cast(%elt2) [Float64]
  }
  !6 = ToArray(!s3) 
  !7 = GetTupleElement(%3) [0]
  !8 = RNGSplit(%1, !7)
  !9 = ApplySeeded(!6, !8) [rand_cat, 0, Int32]
  MakeStruct(sample_idx: !4, pop: !9)
}
!10 = ToArray(!s4)
MakeStruct(cols: !10)

2023-11-17 18:07:56.816 : INFO: after optimize: relationalLowerer, after LowerMatrixToTable: IR size 28: 

%1 = RNGStateLiteral
!c0 = I32 [0] 
!c10 = I32 [10] 
!c1 = I32 [1]
!s = StreamRange(!c0, !c10, !c1) [1, False]
!s4 = StreamMap(!s) { (%elt) =>
  !2 = Cast(%elt) [Int64]
  %3 = MakeTuple(!2, %elt) [(0 1)]
  !4 = GetTupleElement(%3) [1] 
  !5 = EncodedLiteral [Array[Int32]]
  !s2 = ToStream(!5) [False]
  !s3 = StreamMap(!s2) { (%elt2) =>
    Cast(%elt2) [Float64]
  }
  !6 = ToArray(!s3) 
  !7 = GetTupleElement(%3) [0]
  !8 = RNGSplit(%1, !7)
  !9 = ApplySeeded(!6, !8) [rand_cat, 0, Int32]
  MakeStruct(sample_idx: !4, pop: !9)
}
!10 = ToArray(!s4)
MakeStruct(cols: !10)

2023-11-17 18:07:56.817 : INFO: after LiftRelationalValuesToRelationalLets: IR size 28: 

%1 = RNGStateLiteral
!c0 = I32 [0] 
!c10 = I32 [10] 
!c1 = I32 [1]
!s = StreamRange(!c0, !c10, !c1) [1, False]
!s4 = StreamMap(!s) { (%elt) =>
  !2 = Cast(%elt) [Int64]
  %3 = MakeTuple(!2, %elt) [(0 1)]
  !4 = GetTupleElement(%3) [1] 
  !5 = EncodedLiteral [Array[Int32]]
  !s2 = ToStream(!5) [False]
  !s3 = StreamMap(!s2) { (%elt2) =>
    Cast(%elt2) [Float64]
  }
  !6 = ToArray(!s3) 
  !7 = GetTupleElement(%3) [0]
  !8 = RNGSplit(%1, !7)
  !9 = ApplySeeded(!6, !8) [rand_cat, 0, Int32]
  MakeStruct(sample_idx: !4, pop: !9)
}
!10 = ToArray(!s4)
MakeStruct(cols: !10)

2023-11-17 18:07:56.818 : INFO: after EvalRelationalLets: IR size 28: 

%1 = RNGStateLiteral
!c0 = I32 [0] 
!c10 = I32 [10] 
!c1 = I32 [1]
!s = StreamRange(!c0, !c10, !c1) [1, False]
!s4 = StreamMap(!s) { (%elt) =>
  !2 = Cast(%elt) [Int64]
  %3 = MakeTuple(!2, %elt) [(0 1)]
  !4 = GetTupleElement(%3) [1] 
  !5 = EncodedLiteral [Array[Int32]]
  !s2 = ToStream(!5) [False]
  !s3 = StreamMap(!s2) { (%elt2) =>
    Cast(%elt2) [Float64]
  }
  !6 = ToArray(!s3) 
  !7 = GetTupleElement(%3) [0]
  !8 = RNGSplit(%1, !7)
  !9 = ApplySeeded(!6, !8) [rand_cat, 0, Int32]
  MakeStruct(sample_idx: !4, pop: !9)
}
!10 = ToArray(!s4)
MakeStruct(cols: !10)

2023-11-17 18:07:56.819 : INFO: after LowerAndExecuteShuffles: IR size 28: 

%1 = RNGStateLiteral
!c0 = I32 [0] 
!c10 = I32 [10] 
!c1 = I32 [1]
!s = StreamRange(!c0, !c10, !c1) [1, False]
!s4 = StreamMap(!s) { (%elt) =>
  !2 = Cast(%elt) [Int64]
  %3 = MakeTuple(!2, %elt) [(0 1)]
  !4 = GetTupleElement(%3) [1] 
  !5 = EncodedLiteral [Array[Int32]]
  !s2 = ToStream(!5) [False]
  !s3 = StreamMap(!s2) { (%elt2) =>
    Cast(%elt2) [Float64]
  }
  !6 = ToArray(!s3) 
  !7 = GetTupleElement(%3) [0]
  !8 = RNGSplit(%1, !7)
  !9 = ApplySeeded(!6, !8) [rand_cat, 0, Int32]
  MakeStruct(sample_idx: !4, pop: !9)
}
!10 = ToArray(!s4)
MakeStruct(cols: !10)

2023-11-17 18:07:56.824 : INFO: after optimize: relationalLowerer, after LowerAndExecuteShuffles: IR size 28: 

%1 = RNGStateLiteral
!c0 = I32 [0] 
!c10 = I32 [10] 
!c1 = I32 [1]
!s = StreamRange(!c0, !c10, !c1) [1, False]
!s4 = StreamMap(!s) { (%elt) =>
  !2 = Cast(%elt) [Int64]
  %3 = MakeTuple(!2, %elt) [(0 1)]
  !4 = GetTupleElement(%3) [1] 
  !5 = EncodedLiteral [Array[Int32]]
  !s2 = ToStream(!5) [False]
  !s3 = StreamMap(!s2) { (%elt2) =>
    Cast(%elt2) [Float64]
  }
  !6 = ToArray(!s3) 
  !7 = GetTupleElement(%3) [0]
  !8 = RNGSplit(%1, !7)
  !9 = ApplySeeded(!6, !8) [rand_cat, 0, Int32]
  MakeStruct(sample_idx: !4, pop: !9)
}
!10 = ToArray(!s4)
MakeStruct(cols: !10)

2023-11-17 18:07:56.824 : INFO: after LowerOrInterpretNonCompilable: IR size 28: 

%1 = RNGStateLiteral
!c0 = I32 [0] 
!c10 = I32 [10] 
!c1 = I32 [1]
!s = StreamRange(!c0, !c10, !c1) [1, False]
!s4 = StreamMap(!s) { (%elt) =>
  !2 = Cast(%elt) [Int64]
  %3 = MakeTuple(!2, %elt) [(0 1)]
  !4 = GetTupleElement(%3) [1] 
  !5 = EncodedLiteral [Array[Int32]]
  !s2 = ToStream(!5) [False]
  !s3 = StreamMap(!s2) { (%elt2) =>
    Cast(%elt2) [Float64]
  }
  !6 = ToArray(!s3) 
  !7 = GetTupleElement(%3) [0]
  !8 = RNGSplit(%1, !7)
  !9 = ApplySeeded(!6, !8) [rand_cat, 0, Int32]
  MakeStruct(sample_idx: !4, pop: !9)
}
!10 = ToArray(!s4)
MakeStruct(cols: !10)

2023-11-17 18:07:56.829 : INFO: after optimize: relationalLowerer, after LowerOrInterpretNonCompilable: IR size 28: 

%1 = RNGStateLiteral
!c0 = I32 [0] 
!c10 = I32 [10] 
!c1 = I32 [1]
!s = StreamRange(!c0, !c10, !c1) [1, False]
!s4 = StreamMap(!s) { (%elt) =>
  !2 = Cast(%elt) [Int64]
  %3 = MakeTuple(!2, %elt) [(0 1)]
  !4 = GetTupleElement(%3) [1] 
  !5 = EncodedLiteral [Array[Int32]]
  !s2 = ToStream(!5) [False]
  !s3 = StreamMap(!s2) { (%elt2) =>
    Cast(%elt2) [Float64]
  }
  !6 = ToArray(!s3) 
  !7 = GetTupleElement(%3) [0]
  !8 = RNGSplit(%1, !7)
  !9 = ApplySeeded(!6, !8) [rand_cat, 0, Int32]
  MakeStruct(sample_idx: !4, pop: !9)
}
!10 = ToArray(!s4)
MakeStruct(cols: !10)

2023-11-17 18:07:56.831 : INFO: encoder cache hit
2023-11-17 18:07:56.831 : INFO: took 30.430ms
2023-11-17 18:07:56.832 : INFO: after LowerOrInterpretNonCompilable: IR size 1: 

EncodedLiteral [Struct{cols:Array[Struct{sample_idx:Int32,pop:Int32}]}]

2023-11-17 18:07:56.832 : INFO: after optimize: relationalLowerer, after LowerOrInterpretNonCompilable: IR size 1: 

EncodedLiteral [Struct{cols:Array[Struct{sample_idx:Int32,pop:Int32}]}]

2023-11-17 18:07:56.833 : INFO: after EvalRelationalLets: IR size 34: 

!1 = EncodedLiteral [Struct{cols:Array[Struct{sample_idx:Int32,pop:Int32}]}]
!2 = GetField(!1) [cols]
!s = ToStream(!2) [False] 
!c0 = I32 [0] 
!c1 = I32 [1]
!s2 = StreamIota(!c0, !c1) [False]
!s3 = StreamZip(!s, !s2) [21, TakeMinLength] {
(%elt, %elt2) =>
  !3 = Cast(%elt2) [Int64]
  InsertFields %elt (__col_uid: !3)
} 
!c4 = I32 [4]
!s4 = StreamTake(!s3, !c4)
%4 = ToArray(!s4)
!c0_2 = I32 [0] 
!5 = ArrayLen(%4) 
!c1_2 = I32 [1]
!s5 = StreamRange(!c0_2, !5, !c1_2) [-1, False]
!s6 = StreamMap(!s5) { (%elt3) =>
  !6 = ArrayRef(%4, %elt3) [-1]
  SelectFields(!6) [(sample_idx)]
}
!7 = ToArray(!s6)
!8 = MakeStruct(rows: !7)
!9 = GetField(!8) [rows]
!s7 = ToStream(!9) [False]
!s8 = StreamMap(!s7) { (%elt4) =>
  GetField(%elt4) [sample_idx]
}
!10 = ToArray(!s8)
MakeTuple(!10) [(0)]

2023-11-17 18:07:56.834 : INFO: after LowerAndExecuteShuffles: IR size 34: 

!1 = EncodedLiteral [Struct{cols:Array[Struct{sample_idx:Int32,pop:Int32}]}]
!2 = GetField(!1) [cols]
!s = ToStream(!2) [False] 
!c0 = I32 [0] 
!c1 = I32 [1]
!s2 = StreamIota(!c0, !c1) [False]
!s3 = StreamZip(!s, !s2) [21, TakeMinLength] {
(%elt, %elt2) =>
  !3 = Cast(%elt2) [Int64]
  InsertFields %elt (__col_uid: !3)
} 
!c4 = I32 [4]
!s4 = StreamTake(!s3, !c4)
%4 = ToArray(!s4)
!c0_2 = I32 [0] 
!5 = ArrayLen(%4) 
!c1_2 = I32 [1]
!s5 = StreamRange(!c0_2, !5, !c1_2) [-1, False]
!s6 = StreamMap(!s5) { (%elt3) =>
  !6 = ArrayRef(%4, %elt3) [-1]
  SelectFields(!6) [(sample_idx)]
}
!7 = ToArray(!s6)
!8 = MakeStruct(rows: !7)
!9 = GetField(!8) [rows]
!s7 = ToStream(!9) [False]
!s8 = StreamMap(!s7) { (%elt4) =>
  GetField(%elt4) [sample_idx]
}
!10 = ToArray(!s8)
MakeTuple(!10) [(0)]

2023-11-17 18:07:56.834 : INFO: decoder cache hit
2023-11-17 18:07:56.843 : INFO: after optimize: relationalLowerer, after LowerAndExecuteShuffles: IR size 33: 

!1 = Literal [Array[Struct{sample_idx:Int32,pop:Int32}], <literal value>]
!s = ToStream(!1) [False] 
!c0 = I32 [0] 
!c1 = I32 [1]
!s2 = StreamIota(!c0, !c1) [False]
!s3 = StreamZip(!s, !s2) [21, TakeMinLength] {
(%elt, %elt2) =>
  !2 = Cast(%elt2) [Int64]
  InsertFields %elt (__col_uid: !2)
} 
!c4 = I32 [4]
!s4 = StreamTake(!s3, !c4)
%3 = ToArray(!s4)
!c0_2 = I32 [0] 
!4 = ArrayLen(%3) 
!c1_2 = I32 [1]
!s5 = StreamRange(!c0_2, !4, !c1_2) [-1, False]
!s6 = StreamMap(!s5) { (%elt3) =>
  !5 = ArrayRef(%3, %elt3) [-1]
  SelectFields(!5) [(sample_idx)]
}
!6 = ToArray(!s6)
!7 = MakeStruct(rows: !6)
!8 = GetField(!7) [rows]
!s7 = ToStream(!8) [False]
!s8 = StreamMap(!s7) { (%elt4) =>
  GetField(%elt4) [sample_idx]
}
!9 = ToArray(!s8)
MakeTuple(!9) [(0)]

2023-11-17 18:07:56.844 : INFO: after LowerOrInterpretNonCompilable: IR size 33: 

!1 = Literal [Array[Struct{sample_idx:Int32,pop:Int32}], <literal value>]
!s = ToStream(!1) [False] 
!c0 = I32 [0] 
!c1 = I32 [1]
!s2 = StreamIota(!c0, !c1) [False]
!s3 = StreamZip(!s, !s2) [21, TakeMinLength] {
(%elt, %elt2) =>
  !2 = Cast(%elt2) [Int64]
  InsertFields %elt (__col_uid: !2)
} 
!c4 = I32 [4]
!s4 = StreamTake(!s3, !c4)
%3 = ToArray(!s4)
!c0_2 = I32 [0] 
!4 = ArrayLen(%3) 
!c1_2 = I32 [1]
!s5 = StreamRange(!c0_2, !4, !c1_2) [-1, False]
!s6 = StreamMap(!s5) { (%elt3) =>
  !5 = ArrayRef(%3, %elt3) [-1]
  SelectFields(!5) [(sample_idx)]
}
!6 = ToArray(!s6)
!7 = MakeStruct(rows: !6)
!8 = GetField(!7) [rows]
!s7 = ToStream(!8) [False]
!s8 = StreamMap(!s7) { (%elt4) =>
  GetField(%elt4) [sample_idx]
}
!9 = ToArray(!s8)
MakeTuple(!9) [(0)]

2023-11-17 18:07:56.852 : INFO: after optimize: relationalLowerer, after LowerOrInterpretNonCompilable: IR size 33: 

!1 = Literal [Array[Struct{sample_idx:Int32,pop:Int32}], <literal value>]
!s = ToStream(!1) [False] 
!c0 = I32 [0] 
!c1 = I32 [1]
!s2 = StreamIota(!c0, !c1) [False]
!s3 = StreamZip(!s, !s2) [21, TakeMinLength] {
(%elt, %elt2) =>
  !2 = Cast(%elt2) [Int64]
  InsertFields %elt (__col_uid: !2)
} 
!c4 = I32 [4]
!s4 = StreamTake(!s3, !c4)
%3 = ToArray(!s4)
!c0_2 = I32 [0] 
!4 = ArrayLen(%3) 
!c1_2 = I32 [1]
!s5 = StreamRange(!c0_2, !4, !c1_2) [-1, False]
!s6 = StreamMap(!s5) { (%elt3) =>
  !5 = ArrayRef(%3, %elt3) [-1]
  SelectFields(!5) [(sample_idx)]
}
!6 = ToArray(!s6)
!7 = MakeStruct(rows: !6)
!8 = GetField(!7) [rows]
!s7 = ToStream(!8) [False]
!s8 = StreamMap(!s7) { (%elt4) =>
  GetField(%elt4) [sample_idx]
}
!9 = ToArray(!s8)
MakeTuple(!9) [(0)]

2023-11-17 18:07:56.854 : INFO: initial IR: IR size 34: 

!1 = Literal [Array[Struct{sample_idx:Int32,pop:Int32}], <literal value>]
!s = ToStream(!1) [False] 
!c0 = I32 [0] 
!c1 = I32 [1]
!s2 = StreamIota(!c0, !c1) [False]
!s3 = StreamZip(!s, !s2) [21, TakeMinLength] {
(%elt, %elt2) =>
  !2 = Cast(%elt2) [Int64]
  InsertFields %elt (__col_uid: !2)
} 
!c4 = I32 [4]
!s4 = StreamTake(!s3, !c4)
%3 = ToArray(!s4)
!c0_2 = I32 [0] 
!4 = ArrayLen(%3) 
!c1_2 = I32 [1]
!s5 = StreamRange(!c0_2, !4, !c1_2) [-1, False]
!s6 = StreamMap(!s5) { (%elt3) =>
  !5 = ArrayRef(%3, %elt3) [-1]
  SelectFields(!5) [(sample_idx)]
}
!6 = ToArray(!s6)
!7 = MakeStruct(rows: !6)
!8 = GetField(!7) [rows]
!s7 = ToStream(!8) [False]
!s8 = StreamMap(!s7) { (%elt4) =>
  GetField(%elt4) [sample_idx]
}
!9 = ToArray(!s8)
!10 = MakeTuple(!9) [(0)]
MakeTuple(!10) [(0)]

2023-11-17 18:07:56.861 : INFO: after optimize: compileLowerer, initial IR: IR size 34: 

!1 = Literal [Array[Struct{sample_idx:Int32,pop:Int32}], <literal value>]
!s = ToStream(!1) [False] 
!c0 = I32 [0] 
!c1 = I32 [1]
!s2 = StreamIota(!c0, !c1) [False]
!s3 = StreamZip(!s, !s2) [21, TakeMinLength] {
(%elt, %elt2) =>
  !2 = Cast(%elt2) [Int64]
  InsertFields %elt (__col_uid: !2)
} 
!c4 = I32 [4]
!s4 = StreamTake(!s3, !c4)
%3 = ToArray(!s4)
!c0_2 = I32 [0] 
!4 = ArrayLen(%3) 
!c1_2 = I32 [1]
!s5 = StreamRange(!c0_2, !4, !c1_2) [-1, False]
!s6 = StreamMap(!s5) { (%elt3) =>
  !5 = ArrayRef(%3, %elt3) [-1]
  SelectFields(!5) [(sample_idx)]
}
!6 = ToArray(!s6)
!7 = MakeStruct(rows: !6)
!8 = GetField(!7) [rows]
!s7 = ToStream(!8) [False]
!s8 = StreamMap(!s7) { (%elt4) =>
  GetField(%elt4) [sample_idx]
}
!9 = ToArray(!s8)
!10 = MakeTuple(!9) [(0)]
MakeTuple(!10) [(0)]

2023-11-17 18:07:56.863 : INFO: after InlineApplyIR: IR size 34: 

!1 = Literal [Array[Struct{sample_idx:Int32,pop:Int32}], <literal value>]
!s = ToStream(!1) [False] 
!c0 = I32 [0] 
!c1 = I32 [1]
!s2 = StreamIota(!c0, !c1) [False]
!s3 = StreamZip(!s, !s2) [21, TakeMinLength] {
(%elt, %elt2) =>
  !2 = Cast(%elt2) [Int64]
  InsertFields %elt (__col_uid: !2)
} 
!c4 = I32 [4]
!s4 = StreamTake(!s3, !c4)
%3 = ToArray(!s4)
!c0_2 = I32 [0] 
!4 = ArrayLen(%3) 
!c1_2 = I32 [1]
!s5 = StreamRange(!c0_2, !4, !c1_2) [-1, False]
!s6 = StreamMap(!s5) { (%elt3) =>
  !5 = ArrayRef(%3, %elt3) [-1]
  SelectFields(!5) [(sample_idx)]
}
!6 = ToArray(!s6)
!7 = MakeStruct(rows: !6)
!8 = GetField(!7) [rows]
!s7 = ToStream(!8) [False]
!s8 = StreamMap(!s7) { (%elt4) =>
  GetField(%elt4) [sample_idx]
}
!9 = ToArray(!s8)
!10 = MakeTuple(!9) [(0)]
MakeTuple(!10) [(0)]

2023-11-17 18:07:56.870 : INFO: after optimize: compileLowerer, after InlineApplyIR: IR size 34: 

!1 = Literal [Array[Struct{sample_idx:Int32,pop:Int32}], <literal value>]
!s = ToStream(!1) [False] 
!c0 = I32 [0] 
!c1 = I32 [1]
!s2 = StreamIota(!c0, !c1) [False]
!s3 = StreamZip(!s, !s2) [21, TakeMinLength] {
(%elt, %elt2) =>
  !2 = Cast(%elt2) [Int64]
  InsertFields %elt (__col_uid: !2)
} 
!c4 = I32 [4]
!s4 = StreamTake(!s3, !c4)
%3 = ToArray(!s4)
!c0_2 = I32 [0] 
!4 = ArrayLen(%3) 
!c1_2 = I32 [1]
!s5 = StreamRange(!c0_2, !4, !c1_2) [-1, False]
!s6 = StreamMap(!s5) { (%elt3) =>
  !5 = ArrayRef(%3, %elt3) [-1]
  SelectFields(!5) [(sample_idx)]
}
!6 = ToArray(!s6)
!7 = MakeStruct(rows: !6)
!8 = GetField(!7) [rows]
!s7 = ToStream(!8) [False]
!s8 = StreamMap(!s7) { (%elt4) =>
  GetField(%elt4) [sample_idx]
}
!9 = ToArray(!s8)
!10 = MakeTuple(!9) [(0)]
MakeTuple(!10) [(0)]

2023-11-17 18:07:56.872 : INFO: after LowerArrayAggsToRunAggs: IR size 34: 

!1 = Literal [Array[Struct{sample_idx:Int32,pop:Int32}], <literal value>]
!s = ToStream(!1) [False] 
!c0 = I32 [0] 
!c1 = I32 [1]
!s2 = StreamIota(!c0, !c1) [False]
!s3 = StreamZip(!s, !s2) [21, TakeMinLength] {
(%elt, %elt2) =>
  !2 = Cast(%elt2) [Int64]
  InsertFields %elt (__col_uid: !2)
} 
!c4 = I32 [4]
!s4 = StreamTake(!s3, !c4)
%3 = ToArray(!s4)
!c0_2 = I32 [0] 
!4 = ArrayLen(%3) 
!c1_2 = I32 [1]
!s5 = StreamRange(!c0_2, !4, !c1_2) [-1, False]
!s6 = StreamMap(!s5) { (%elt3) =>
  !5 = ArrayRef(%3, %elt3) [-1]
  SelectFields(!5) [(sample_idx)]
}
!6 = ToArray(!s6)
!7 = MakeStruct(rows: !6)
!8 = GetField(!7) [rows]
!s7 = ToStream(!8) [False]
!s8 = StreamMap(!s7) { (%elt4) =>
  GetField(%elt4) [sample_idx]
}
!9 = ToArray(!s8)
!10 = MakeTuple(!9) [(0)]
MakeTuple(!10) [(0)]

2023-11-17 18:07:56.882 : INFO: after optimize: compileLowerer, after LowerArrayAggsToRunAggs: IR size 34: 

!1 = Literal [Array[Struct{sample_idx:Int32,pop:Int32}], <literal value>]
!s = ToStream(!1) [False] 
!c0 = I32 [0] 
!c1 = I32 [1]
!s2 = StreamIota(!c0, !c1) [False]
!s3 = StreamZip(!s, !s2) [21, TakeMinLength] {
(%elt, %elt2) =>
  !2 = Cast(%elt2) [Int64]
  InsertFields %elt (__col_uid: !2)
} 
!c4 = I32 [4]
!s4 = StreamTake(!s3, !c4)
%3 = ToArray(!s4)
!c0_2 = I32 [0] 
!4 = ArrayLen(%3) 
!c1_2 = I32 [1]
!s5 = StreamRange(!c0_2, !4, !c1_2) [-1, False]
!s6 = StreamMap(!s5) { (%elt3) =>
  !5 = ArrayRef(%3, %elt3) [-1]
  SelectFields(!5) [(sample_idx)]
}
!6 = ToArray(!s6)
!7 = MakeStruct(rows: !6)
!8 = GetField(!7) [rows]
!s7 = ToStream(!8) [False]
!s8 = StreamMap(!s7) { (%elt4) =>
  GetField(%elt4) [sample_idx]
}
!9 = ToArray(!s8)
!10 = MakeTuple(!9) [(0)]
MakeTuple(!10) [(0)]

2023-11-17 18:07:56.907 : INFO: encoder cache hit
2023-11-17 18:07:56.910 : INFO: instruction count: 3: __C156HailClassLoaderContainer.<init>
2023-11-17 18:07:56.910 : INFO: instruction count: 3: __C156HailClassLoaderContainer.<clinit>
2023-11-17 18:07:56.910 : INFO: instruction count: 3: __C158FSContainer.<init>
2023-11-17 18:07:56.910 : INFO: instruction count: 3: __C158FSContainer.<clinit>
2023-11-17 18:07:56.915 : INFO: instruction count: 3: __C160Compiled.<init>
2023-11-17 18:07:56.915 : INFO: instruction count: 41: __C160Compiled.apply
2023-11-17 18:07:56.916 : INFO: instruction count: 177: __C160Compiled.__m162split_ToArray
2023-11-17 18:07:56.916 : INFO: instruction count: 265: __C160Compiled.__m164split_ToArray
2023-11-17 18:07:56.917 : INFO: instruction count: 202: __C160Compiled.__m185split_ToArray
2023-11-17 18:07:56.917 : INFO: instruction count: 35: __C160Compiled.__m192arrayref_bounds_check
2023-11-17 18:07:56.917 : INFO: instruction count: 9: __C160Compiled.setPartitionIndex
2023-11-17 18:07:56.918 : INFO: instruction count: 4: __C160Compiled.addPartitionRegion
2023-11-17 18:07:56.918 : INFO: instruction count: 4: __C160Compiled.setPool
2023-11-17 18:07:56.918 : INFO: instruction count: 3: __C160Compiled.addHailClassLoader
2023-11-17 18:07:56.918 : INFO: instruction count: 3: __C160Compiled.addFS
2023-11-17 18:07:56.918 : INFO: instruction count: 4: __C160Compiled.addTaskContext
2023-11-17 18:07:56.918 : INFO: instruction count: 66: __C160Compiled.addAndDecodeLiterals
2023-11-17 18:07:56.918 : INFO: instruction count: 27: __C160Compiled.__m209DECODE_r_struct_of_r_array_of_r_struct_of_r_int32ANDr_int32ENDEND_TO_SBaseStructPointer
2023-11-17 18:07:56.918 : INFO: instruction count: 62: __C160Compiled.__m210INPLACE_DECODE_r_array_of_r_struct_of_r_int32ANDr_int32END_TO_r_array_of_r_struct_of_r_int32ANDr_int32END
2023-11-17 18:07:56.919 : INFO: instruction count: 26: __C160Compiled.__m211INPLACE_DECODE_r_struct_of_r_int32ANDr_int32END_TO_r_struct_of_r_int32ANDr_int32END
2023-11-17 18:07:56.919 : INFO: instruction count: 10: __C160Compiled.__m212INPLACE_DECODE_r_int32_TO_r_int32
2023-11-17 18:07:56.942 : INFO: encoder cache miss (2 hits, 5 misses, 0.286)
2023-11-17 18:07:56.946 : INFO: instruction count: 3: __C213HailClassLoaderContainer.<init>
2023-11-17 18:07:56.947 : INFO: instruction count: 3: __C213HailClassLoaderContainer.<clinit>
2023-11-17 18:07:56.948 : INFO: instruction count: 3: __C215FSContainer.<init>
2023-11-17 18:07:56.948 : INFO: instruction count: 3: __C215FSContainer.<clinit>
2023-11-17 18:07:56.949 : INFO: instruction count: 3: __C217etypeEncode.<init>
2023-11-17 18:07:56.949 : INFO: instruction count: 7: __C217etypeEncode.apply
2023-11-17 18:07:56.949 : INFO: instruction count: 33: __C217etypeEncode.__m219ENCODE_SBaseStructPointer_TO_o_struct_of_o_array_of_o_int32END
2023-11-17 18:07:56.949 : INFO: instruction count: 78: __C217etypeEncode.__m220ENCODE_SIndexablePointer_TO_o_array_of_o_int32
2023-11-17 18:07:56.949 : INFO: instruction count: 4: __C217etypeEncode.__m221ENCODE_SInt32$_TO_o_int32
2023-11-17 18:07:56.950 : INFO: RegionPool: initialized for thread 78: Thread-20
2023-11-17 18:07:56.950 : INFO: TaskReport: stage=0, partition=0, attempt=0, peakBytes=0, peakBytesReadable=0.00 B, chunks requested=0, cache hits=0
2023-11-17 18:07:56.950 : INFO: RegionPool: FREE: 0 allocated (0 blocks / 0 chunks), regions.size = 0, 0 current java objects, thread 78: Thread-20
2023-11-17 18:07:56.951 : INFO: RegionPool: FREE: 192.0K allocated (192.0K blocks / 0 chunks), regions.size = 3, 0 current java objects, thread 78: Thread-20
2023-11-17 18:07:56.951 : INFO: timing SparkBackend.execute total 327.919ms self 0.141ms children 327.778ms %children 99.96%
2023-11-17 18:07:56.951 : INFO: timing SparkBackend.execute/execute total 327.778ms self 51.752ms children 276.026ms %children 84.21%
2023-11-17 18:07:56.951 : INFO: timing SparkBackend.execute/execute/SemanticHash total 9.185ms self 0.051ms children 9.135ms %children 99.45%
2023-11-17 18:07:56.951 : INFO: timing SparkBackend.execute/execute/SemanticHash/NormalizeNames total 7.798ms self 7.798ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.951 : INFO: timing SparkBackend.execute/execute/SemanticHash/Hash total 1.337ms self 1.337ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.951 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, initial IR total 87.006ms self 0.009ms children 86.997ms %children 99.99%
2023-11-17 18:07:56.951 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, initial IR/Verify total 0.136ms self 0.136ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.951 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, initial IR/LoweringTransformation total 86.450ms self 0.082ms children 86.368ms %children 99.91%
2023-11-17 18:07:56.951 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize total 86.368ms self 0.144ms children 86.224ms %children 99.83%
2023-11-17 18:07:56.951 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/FoldConstants total 2.373ms self 2.373ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.951 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.201ms self 0.201ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.951 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/NormalizeNames total 4.608ms self 4.608ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.951 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/Simplify total 14.735ms self 14.735ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.951 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/ForwardLets total 12.466ms self 12.466ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.951 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/ForwardRelationalLets total 0.574ms self 0.574ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.951 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/PruneDeadFields total 19.629ms self 19.629ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.951 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/FoldConstants total 0.592ms self 0.592ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.951 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.087ms self 0.087ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.951 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/NormalizeNames total 3.258ms self 3.258ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.951 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/Simplify total 6.042ms self 6.042ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.951 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/ForwardLets total 5.691ms self 5.691ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.951 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/ForwardRelationalLets total 0.179ms self 0.179ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.951 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/PruneDeadFields total 4.240ms self 4.240ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.951 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/FoldConstants total 0.805ms self 0.805ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.951 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.443ms self 0.443ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.951 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/NormalizeNames total 2.101ms self 2.101ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.951 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/Simplify total 2.403ms self 2.403ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.951 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/ForwardLets total 2.336ms self 2.336ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.951 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/ForwardRelationalLets total 0.148ms self 0.148ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.951 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/PruneDeadFields total 3.313ms self 3.313ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.952 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, initial IR/Verify total 0.411ms self 0.411ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.952 : INFO: timing SparkBackend.execute/execute/LowerMatrixToTable total 6.764ms self 0.006ms children 6.757ms %children 99.91%
2023-11-17 18:07:56.952 : INFO: timing SparkBackend.execute/execute/LowerMatrixToTable/Verify total 0.032ms self 0.032ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.952 : INFO: timing SparkBackend.execute/execute/LowerMatrixToTable/LoweringTransformation total 6.307ms self 6.307ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.952 : INFO: timing SparkBackend.execute/execute/LowerMatrixToTable/Verify total 0.418ms self 0.418ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.952 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerMatrixToTable total 43.381ms self 0.006ms children 43.375ms %children 99.99%
2023-11-17 18:07:56.952 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerMatrixToTable/Verify total 0.049ms self 0.049ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.952 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation total 43.244ms self 0.027ms children 43.217ms %children 99.94%
2023-11-17 18:07:56.952 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize total 43.217ms self 0.090ms children 43.128ms %children 99.79%
2023-11-17 18:07:56.952 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/FoldConstants total 0.258ms self 0.258ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.952 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.094ms self 0.094ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.952 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/NormalizeNames total 2.611ms self 2.611ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.952 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/Simplify total 18.666ms self 18.666ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.952 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/ForwardLets total 3.982ms self 3.982ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.952 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/ForwardRelationalLets total 0.239ms self 0.239ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.952 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/PruneDeadFields total 3.648ms self 3.648ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.952 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/FoldConstants total 0.639ms self 0.639ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.952 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.071ms self 0.071ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.952 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/NormalizeNames total 1.206ms self 1.206ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.952 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/Simplify total 0.608ms self 0.608ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.952 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/ForwardLets total 2.434ms self 2.434ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.952 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/ForwardRelationalLets total 0.214ms self 0.214ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.952 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/PruneDeadFields total 2.080ms self 2.080ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.952 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/FoldConstants total 0.256ms self 0.256ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.952 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.038ms self 0.038ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.952 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/NormalizeNames total 0.870ms self 0.870ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.952 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/Simplify total 1.245ms self 1.245ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.952 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/ForwardLets total 2.032ms self 2.032ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.952 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/ForwardRelationalLets total 0.105ms self 0.105ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.952 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/PruneDeadFields total 1.831ms self 1.831ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.952 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerMatrixToTable/Verify total 0.081ms self 0.081ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.952 : INFO: timing SparkBackend.execute/execute/LiftRelationalValuesToRelationalLets total 0.229ms self 0.004ms children 0.225ms %children 98.24%
2023-11-17 18:07:56.952 : INFO: timing SparkBackend.execute/execute/LiftRelationalValuesToRelationalLets/Verify total 0.033ms self 0.033ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.952 : INFO: timing SparkBackend.execute/execute/LiftRelationalValuesToRelationalLets/LoweringTransformation total 0.137ms self 0.137ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.952 : INFO: timing SparkBackend.execute/execute/LiftRelationalValuesToRelationalLets/Verify total 0.055ms self 0.055ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.952 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets total 46.010ms self 0.005ms children 46.005ms %children 99.99%
2023-11-17 18:07:56.953 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/Verify total 0.034ms self 0.034ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.953 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation total 45.845ms self 5.018ms children 40.828ms %children 89.06%
2023-11-17 18:07:56.953 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerAndExecuteShuffles total 0.171ms self 0.004ms children 0.167ms %children 97.89%
2023-11-17 18:07:56.953 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerAndExecuteShuffles/Verify total 0.036ms self 0.036ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.953 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerAndExecuteShuffles/LoweringTransformation total 0.057ms self 0.057ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.953 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerAndExecuteShuffles/Verify total 0.074ms self 0.074ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.953 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles total 9.837ms self 0.005ms children 9.832ms %children 99.95%
2023-11-17 18:07:56.953 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/Verify total 0.016ms self 0.016ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.953 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation total 9.780ms self 0.018ms children 9.762ms %children 99.82%
2023-11-17 18:07:56.953 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize total 9.762ms self 0.054ms children 9.708ms %children 99.44%
2023-11-17 18:07:56.953 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/FoldConstants total 0.100ms self 0.100ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.953 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.032ms self 0.032ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.953 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/NormalizeNames total 0.544ms self 0.544ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.953 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/Simplify total 0.686ms self 0.686ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.953 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/ForwardLets total 0.947ms self 0.947ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.953 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/ForwardRelationalLets total 0.073ms self 0.073ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.953 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/PruneDeadFields total 1.104ms self 1.104ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.953 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/FoldConstants total 0.110ms self 0.110ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.953 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.020ms self 0.020ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.953 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/NormalizeNames total 0.410ms self 0.410ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.953 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/Simplify total 0.222ms self 0.222ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.953 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/ForwardLets total 0.992ms self 0.992ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.953 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/ForwardRelationalLets total 0.066ms self 0.066ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.953 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/PruneDeadFields total 1.056ms self 1.056ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.953 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/FoldConstants total 0.141ms self 0.141ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.953 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.028ms self 0.028ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.953 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/NormalizeNames total 0.494ms self 0.494ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.953 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/Simplify total 0.266ms self 0.266ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.953 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/ForwardLets total 1.313ms self 1.313ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.954 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/ForwardRelationalLets total 0.062ms self 0.062ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.954 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/PruneDeadFields total 1.040ms self 1.040ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.954 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/Verify total 0.036ms self 0.036ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.954 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable total 30.616ms self 0.006ms children 30.609ms %children 99.98%
2023-11-17 18:07:56.954 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/Verify total 0.023ms self 0.023ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.954 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation total 30.580ms self 11.251ms children 19.329ms %children 63.21%
2023-11-17 18:07:56.954 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, initial IR total 4.523ms self 0.005ms children 4.518ms %children 99.88%
2023-11-17 18:07:56.954 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, initial IR/Verify total 0.012ms self 0.012ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.954 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, initial IR/LoweringTransformation total 4.484ms self 0.081ms children 4.403ms %children 98.18%
2023-11-17 18:07:56.954 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize total 4.403ms self 0.032ms children 4.371ms %children 99.27%
2023-11-17 18:07:56.954 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/FoldConstants total 0.076ms self 0.076ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.954 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.015ms self 0.015ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.954 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/NormalizeNames total 0.207ms self 0.207ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.954 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/Simplify total 0.215ms self 0.215ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.954 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/ForwardLets total 0.608ms self 0.608ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.954 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/ForwardRelationalLets total 0.036ms self 0.036ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.954 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/PruneDeadFields total 0.467ms self 0.467ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.954 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/FoldConstants total 0.147ms self 0.147ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.954 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.012ms self 0.012ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.954 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/NormalizeNames total 0.189ms self 0.189ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.954 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/Simplify total 0.100ms self 0.100ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.954 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/ForwardLets total 0.423ms self 0.423ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.954 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/ForwardRelationalLets total 0.035ms self 0.035ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.954 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/PruneDeadFields total 0.468ms self 0.468ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.954 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/FoldConstants total 0.136ms self 0.136ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.954 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.012ms self 0.012ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.954 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/NormalizeNames total 0.184ms self 0.184ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.954 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/Simplify total 0.102ms self 0.102ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.954 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/ForwardLets total 0.415ms self 0.415ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.954 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/ForwardRelationalLets total 0.034ms self 0.034ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.954 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/PruneDeadFields total 0.491ms self 0.491ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.954 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, initial IR/Verify total 0.022ms self 0.022ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.954 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/LowerMatrixToTable total 0.067ms self 0.004ms children 0.063ms %children 94.26%
2023-11-17 18:07:56.954 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/LowerMatrixToTable/Verify total 0.010ms self 0.010ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.954 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/LowerMatrixToTable/LoweringTransformation total 0.041ms self 0.041ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.954 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/LowerMatrixToTable/Verify total 0.012ms self 0.012ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.954 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerMatrixToTable total 4.706ms self 0.005ms children 4.701ms %children 99.90%
2023-11-17 18:07:56.954 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerMatrixToTable/Verify total 0.009ms self 0.009ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.954 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation total 4.669ms self 0.087ms children 4.582ms %children 98.15%
2023-11-17 18:07:56.954 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize total 4.582ms self 0.034ms children 4.548ms %children 99.25%
2023-11-17 18:07:56.954 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/FoldConstants total 0.056ms self 0.056ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.954 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.012ms self 0.012ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.954 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/NormalizeNames total 0.181ms self 0.181ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.954 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/Simplify total 0.105ms self 0.105ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.955 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/ForwardLets total 0.409ms self 0.409ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.955 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/ForwardRelationalLets total 0.038ms self 0.038ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.955 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/PruneDeadFields total 0.667ms self 0.667ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.955 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/FoldConstants total 0.165ms self 0.165ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.955 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.015ms self 0.015ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.955 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/NormalizeNames total 0.187ms self 0.187ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.955 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/Simplify total 0.146ms self 0.146ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.955 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/ForwardLets total 0.506ms self 0.506ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.955 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/ForwardRelationalLets total 0.037ms self 0.037ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.955 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/PruneDeadFields total 0.550ms self 0.550ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.955 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/FoldConstants total 0.162ms self 0.162ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.955 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.013ms self 0.013ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.955 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/NormalizeNames total 0.194ms self 0.194ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.955 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/Simplify total 0.116ms self 0.116ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.955 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/ForwardLets total 0.429ms self 0.429ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.955 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/ForwardRelationalLets total 0.037ms self 0.037ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.955 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/PruneDeadFields total 0.522ms self 0.522ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.955 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerMatrixToTable/Verify total 0.023ms self 0.023ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.955 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/LiftRelationalValuesToRelationalLets total 0.066ms self 0.004ms children 0.062ms %children 94.17%
2023-11-17 18:07:56.955 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/LiftRelationalValuesToRelationalLets/Verify total 0.013ms self 0.013ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.955 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/LiftRelationalValuesToRelationalLets/LoweringTransformation total 0.039ms self 0.039ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.955 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/LiftRelationalValuesToRelationalLets/Verify total 0.010ms self 0.010ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.955 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/EvalRelationalLets total 0.057ms self 0.003ms children 0.054ms %children 94.53%
2023-11-17 18:07:56.955 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/EvalRelationalLets/Verify total 0.011ms self 0.011ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.955 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/EvalRelationalLets/LoweringTransformation total 0.024ms self 0.024ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.955 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/EvalRelationalLets/Verify total 0.018ms self 0.018ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.955 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/LowerAndExecuteShuffles total 0.058ms self 0.003ms children 0.056ms %children 95.26%
2023-11-17 18:07:56.955 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/LowerAndExecuteShuffles/Verify total 0.014ms self 0.014ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.955 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/LowerAndExecuteShuffles/LoweringTransformation total 0.027ms self 0.027ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.955 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/LowerAndExecuteShuffles/Verify total 0.015ms self 0.015ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.955 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles total 4.300ms self 0.005ms children 4.295ms %children 99.89%
2023-11-17 18:07:56.955 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/Verify total 0.010ms self 0.010ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.955 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation total 4.263ms self 0.086ms children 4.177ms %children 97.97%
2023-11-17 18:07:56.955 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize total 4.177ms self 0.034ms children 4.143ms %children 99.18%
2023-11-17 18:07:56.955 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/FoldConstants total 0.060ms self 0.060ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.955 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.013ms self 0.013ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.955 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/NormalizeNames total 0.224ms self 0.224ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.955 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/Simplify total 0.116ms self 0.116ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.955 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/ForwardLets total 0.465ms self 0.465ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.955 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/ForwardRelationalLets total 0.040ms self 0.040ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.955 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/PruneDeadFields total 0.563ms self 0.563ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.955 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/FoldConstants total 0.166ms self 0.166ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.955 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.013ms self 0.013ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.955 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/NormalizeNames total 0.175ms self 0.175ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.956 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/Simplify total 0.105ms self 0.105ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.956 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/ForwardLets total 0.402ms self 0.402ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.956 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/ForwardRelationalLets total 0.036ms self 0.036ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.956 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/PruneDeadFields total 0.447ms self 0.447ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.956 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/FoldConstants total 0.148ms self 0.148ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.956 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.012ms self 0.012ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.956 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/NormalizeNames total 0.163ms self 0.163ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.956 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/Simplify total 0.101ms self 0.101ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.956 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/ForwardLets total 0.418ms self 0.418ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.956 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/ForwardRelationalLets total 0.034ms self 0.034ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.956 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/PruneDeadFields total 0.443ms self 0.443ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.956 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/Verify total 0.022ms self 0.022ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.956 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/LowerOrInterpretNonCompilable total 0.086ms self 0.004ms children 0.082ms %children 95.71%
2023-11-17 18:07:56.956 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/LowerOrInterpretNonCompilable/Verify total 0.013ms self 0.013ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.956 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation total 0.045ms self 0.045ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.956 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/LowerOrInterpretNonCompilable/Verify total 0.024ms self 0.024ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.956 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable total 4.127ms self 0.005ms children 4.122ms %children 99.88%
2023-11-17 18:07:56.956 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/Verify total 0.019ms self 0.019ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.956 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation total 4.075ms self 0.094ms children 3.981ms %children 97.70%
2023-11-17 18:07:56.956 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize total 3.981ms self 0.030ms children 3.951ms %children 99.24%
2023-11-17 18:07:56.956 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/FoldConstants total 0.055ms self 0.055ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.956 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.012ms self 0.012ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.956 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/NormalizeNames total 0.163ms self 0.163ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.956 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/Simplify total 0.106ms self 0.106ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.956 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/ForwardLets total 0.481ms self 0.481ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.956 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/ForwardRelationalLets total 0.038ms self 0.038ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.956 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/PruneDeadFields total 0.486ms self 0.486ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.956 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/FoldConstants total 0.141ms self 0.141ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.956 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.011ms self 0.011ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.956 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/NormalizeNames total 0.160ms self 0.160ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.956 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/Simplify total 0.099ms self 0.099ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.956 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/ForwardLets total 0.385ms self 0.385ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.956 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/ForwardRelationalLets total 0.034ms self 0.034ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.956 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/PruneDeadFields total 0.454ms self 0.454ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.956 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/FoldConstants total 0.143ms self 0.143ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.956 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.013ms self 0.013ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.956 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/NormalizeNames total 0.163ms self 0.163ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.956 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/Simplify total 0.101ms self 0.101ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.956 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/ForwardLets total 0.397ms self 0.397ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.956 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/ForwardRelationalLets total 0.037ms self 0.037ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.956 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/PruneDeadFields total 0.473ms self 0.473ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.956 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/Verify total 0.028ms self 0.028ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.956 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile total 1.147ms self 1.147ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.956 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/InitializeCompiledFunction total 0.074ms self 0.074ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.957 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/RunCompiledFunction total 0.119ms self 0.119ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.957 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/Verify total 0.007ms self 0.007ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.957 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable total 0.204ms self 0.004ms children 0.200ms %children 98.15%
2023-11-17 18:07:56.957 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/Verify total 0.010ms self 0.010ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.957 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation total 0.189ms self 0.007ms children 0.182ms %children 96.11%
2023-11-17 18:07:56.957 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize total 0.182ms self 0.010ms children 0.172ms %children 94.51%
2023-11-17 18:07:56.957 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/FoldConstants total 0.029ms self 0.029ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.957 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.004ms self 0.004ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.957 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/NormalizeNames total 0.039ms self 0.039ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.957 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/Simplify total 0.014ms self 0.014ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.957 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/ForwardLets total 0.037ms self 0.037ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.957 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/ForwardRelationalLets total 0.016ms self 0.016ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.957 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/PruneDeadFields total 0.033ms self 0.033ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.957 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/Verify total 0.002ms self 0.002ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.957 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/Verify total 0.126ms self 0.126ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.957 : INFO: timing SparkBackend.execute/execute/LowerAndExecuteShuffles total 0.066ms self 0.003ms children 0.063ms %children 95.65%
2023-11-17 18:07:56.957 : INFO: timing SparkBackend.execute/execute/LowerAndExecuteShuffles/Verify total 0.017ms self 0.017ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.957 : INFO: timing SparkBackend.execute/execute/LowerAndExecuteShuffles/LoweringTransformation total 0.028ms self 0.028ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.957 : INFO: timing SparkBackend.execute/execute/LowerAndExecuteShuffles/Verify total 0.018ms self 0.018ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.957 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerAndExecuteShuffles total 8.074ms self 0.005ms children 8.070ms %children 99.94%
2023-11-17 18:07:56.957 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerAndExecuteShuffles/Verify total 0.013ms self 0.013ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.957 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation total 7.991ms self 0.024ms children 7.966ms %children 99.70%
2023-11-17 18:07:56.957 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize total 7.966ms self 0.046ms children 7.920ms %children 99.42%
2023-11-17 18:07:56.957 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/FoldConstants total 0.547ms self 0.547ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.957 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.034ms self 0.034ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.957 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/NormalizeNames total 0.731ms self 0.731ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.958 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/Simplify total 0.233ms self 0.233ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.958 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/ForwardLets total 0.824ms self 0.824ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.958 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/ForwardRelationalLets total 0.068ms self 0.068ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.958 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/PruneDeadFields total 0.860ms self 0.860ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.958 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/FoldConstants total 0.131ms self 0.131ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.958 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.018ms self 0.018ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.958 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/NormalizeNames total 0.331ms self 0.331ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.958 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/Simplify total 0.198ms self 0.198ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.958 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/ForwardLets total 0.819ms self 0.819ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.958 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/ForwardRelationalLets total 0.058ms self 0.058ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.958 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/PruneDeadFields total 0.829ms self 0.829ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.958 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/FoldConstants total 0.127ms self 0.127ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.958 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.026ms self 0.026ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.958 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/NormalizeNames total 0.319ms self 0.319ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.958 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/Simplify total 0.175ms self 0.175ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.958 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/ForwardLets total 0.803ms self 0.803ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.958 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/ForwardRelationalLets total 0.052ms self 0.052ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.958 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/PruneDeadFields total 0.738ms self 0.738ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.958 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerAndExecuteShuffles/Verify total 0.066ms self 0.066ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.958 : INFO: timing SparkBackend.execute/execute/LowerOrInterpretNonCompilable total 0.556ms self 0.005ms children 0.551ms %children 99.04%
2023-11-17 18:07:56.958 : INFO: timing SparkBackend.execute/execute/LowerOrInterpretNonCompilable/Verify total 0.016ms self 0.016ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.958 : INFO: timing SparkBackend.execute/execute/LowerOrInterpretNonCompilable/LoweringTransformation total 0.491ms self 0.491ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.958 : INFO: timing SparkBackend.execute/execute/LowerOrInterpretNonCompilable/Verify total 0.044ms self 0.044ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.958 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerOrInterpretNonCompilable total 6.884ms self 0.005ms children 6.879ms %children 99.92%
2023-11-17 18:07:56.958 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/Verify total 0.013ms self 0.013ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.958 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation total 6.797ms self 0.025ms children 6.772ms %children 99.63%
2023-11-17 18:07:56.958 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize total 6.772ms self 0.043ms children 6.729ms %children 99.37%
2023-11-17 18:07:56.958 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/FoldConstants total 0.071ms self 0.071ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.959 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.017ms self 0.017ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.959 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/NormalizeNames total 0.219ms self 0.219ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.959 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/Simplify total 0.193ms self 0.193ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.959 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/ForwardLets total 0.792ms self 0.792ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.959 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/ForwardRelationalLets total 0.056ms self 0.056ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.959 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/PruneDeadFields total 0.808ms self 0.808ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.959 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/FoldConstants total 0.145ms self 0.145ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.959 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.017ms self 0.017ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.959 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/NormalizeNames total 0.303ms self 0.303ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.959 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/Simplify total 0.183ms self 0.183ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.959 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/ForwardLets total 0.690ms self 0.690ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.959 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/ForwardRelationalLets total 0.054ms self 0.054ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.959 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/PruneDeadFields total 0.704ms self 0.704ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.959 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/FoldConstants total 0.125ms self 0.125ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.959 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.016ms self 0.016ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.959 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/NormalizeNames total 0.257ms self 0.257ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.959 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/Simplify total 0.163ms self 0.163ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.959 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/ForwardLets total 1.101ms self 1.101ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.959 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/ForwardRelationalLets total 0.059ms self 0.059ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.959 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/PruneDeadFields total 0.758ms self 0.758ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.959 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/Verify total 0.069ms self 0.069ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.959 : INFO: timing SparkBackend.execute/execute/Compile total 66.418ms self 41.876ms children 24.542ms %children 36.95%
2023-11-17 18:07:56.959 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, initial IR total 6.604ms self 0.007ms children 6.598ms %children 99.90%
2023-11-17 18:07:56.959 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, initial IR/Verify total 0.013ms self 0.013ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.959 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, initial IR/LoweringTransformation total 6.512ms self 0.045ms children 6.467ms %children 99.31%
2023-11-17 18:07:56.959 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize total 6.467ms self 0.045ms children 6.423ms %children 99.31%
2023-11-17 18:07:56.959 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/FoldConstants total 0.081ms self 0.081ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.959 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.021ms self 0.021ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.959 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/NormalizeNames total 0.183ms self 0.183ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.959 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/Simplify total 0.182ms self 0.182ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.959 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/ForwardLets total 1.119ms self 1.119ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.959 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/ForwardRelationalLets total 0.061ms self 0.061ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.959 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/PruneDeadFields total 0.791ms self 0.791ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.959 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/FoldConstants total 0.136ms self 0.136ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.959 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.017ms self 0.017ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.959 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/NormalizeNames total 0.265ms self 0.265ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.959 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/Simplify total 0.170ms self 0.170ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.959 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/ForwardLets total 0.643ms self 0.643ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.959 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/ForwardRelationalLets total 0.057ms self 0.057ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.959 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/PruneDeadFields total 0.690ms self 0.690ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.959 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/FoldConstants total 0.131ms self 0.131ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.959 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.015ms self 0.015ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.960 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/NormalizeNames total 0.252ms self 0.252ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.960 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/Simplify total 0.169ms self 0.169ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.960 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/ForwardLets total 0.649ms self 0.649ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.960 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/ForwardRelationalLets total 0.057ms self 0.057ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.960 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/PruneDeadFields total 0.732ms self 0.732ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.960 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, initial IR/Verify total 0.073ms self 0.073ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.960 : INFO: timing SparkBackend.execute/execute/Compile/InlineApplyIR total 0.096ms self 0.004ms children 0.091ms %children 95.58%
2023-11-17 18:07:56.960 : INFO: timing SparkBackend.execute/execute/Compile/InlineApplyIR/Verify total 0.036ms self 0.036ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.960 : INFO: timing SparkBackend.execute/execute/Compile/InlineApplyIR/LoweringTransformation total 0.029ms self 0.029ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.960 : INFO: timing SparkBackend.execute/execute/Compile/InlineApplyIR/Verify total 0.027ms self 0.027ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.960 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after InlineApplyIR total 6.408ms self 0.008ms children 6.400ms %children 99.88%
2023-11-17 18:07:56.960 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after InlineApplyIR/Verify total 0.011ms self 0.011ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.960 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation total 6.330ms self 0.026ms children 6.304ms %children 99.58%
2023-11-17 18:07:56.960 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize total 6.304ms self 0.044ms children 6.260ms %children 99.30%
2023-11-17 18:07:56.960 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/FoldConstants total 0.070ms self 0.070ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.960 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.019ms self 0.019ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.960 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/NormalizeNames total 0.411ms self 0.411ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.960 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/Simplify total 0.190ms self 0.190ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.960 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/ForwardLets total 1.045ms self 1.045ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.960 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/ForwardRelationalLets total 0.061ms self 0.061ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.960 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/PruneDeadFields total 0.809ms self 0.809ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.960 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/FoldConstants total 0.130ms self 0.130ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.960 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.016ms self 0.016ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.960 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/NormalizeNames total 0.224ms self 0.224ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.960 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/Simplify total 0.167ms self 0.167ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.960 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/ForwardLets total 0.562ms self 0.562ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.960 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/ForwardRelationalLets total 0.054ms self 0.054ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.960 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/PruneDeadFields total 0.660ms self 0.660ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.960 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/FoldConstants total 0.123ms self 0.123ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.960 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.017ms self 0.017ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.960 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/NormalizeNames total 0.212ms self 0.212ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.960 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/Simplify total 0.161ms self 0.161ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.961 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/ForwardLets total 0.595ms self 0.595ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.961 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/ForwardRelationalLets total 0.066ms self 0.066ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.961 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/PruneDeadFields total 0.666ms self 0.666ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.961 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after InlineApplyIR/Verify total 0.059ms self 0.059ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.961 : INFO: timing SparkBackend.execute/execute/Compile/LowerArrayAggsToRunAggs total 1.411ms self 0.005ms children 1.406ms %children 99.67%
2023-11-17 18:07:56.961 : INFO: timing SparkBackend.execute/execute/Compile/LowerArrayAggsToRunAggs/Verify total 0.047ms self 0.047ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.961 : INFO: timing SparkBackend.execute/execute/Compile/LowerArrayAggsToRunAggs/LoweringTransformation total 1.325ms self 1.325ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.961 : INFO: timing SparkBackend.execute/execute/Compile/LowerArrayAggsToRunAggs/Verify total 0.034ms self 0.034ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.961 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs total 8.866ms self 0.005ms children 8.861ms %children 99.94%
2023-11-17 18:07:56.961 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/Verify total 0.011ms self 0.011ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.961 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation total 8.814ms self 0.026ms children 8.788ms %children 99.71%
2023-11-17 18:07:56.961 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize total 8.788ms self 0.046ms children 8.742ms %children 99.48%
2023-11-17 18:07:56.961 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/FoldConstants total 0.062ms self 0.062ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.961 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.016ms self 0.016ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.961 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/NormalizeNames total 0.189ms self 0.189ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.961 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/Simplify total 0.181ms self 0.181ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.961 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/ForwardLets total 2.775ms self 2.775ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.961 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/ForwardRelationalLets total 0.053ms self 0.053ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.961 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/PruneDeadFields total 0.736ms self 0.736ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.961 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/FoldConstants total 0.135ms self 0.135ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.961 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.017ms self 0.017ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.961 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/NormalizeNames total 0.171ms self 0.171ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.961 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/Simplify total 0.174ms self 0.174ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.961 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/ForwardLets total 1.562ms self 1.562ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.961 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/ForwardRelationalLets total 0.157ms self 0.157ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.961 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/PruneDeadFields total 0.779ms self 0.779ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.961 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/FoldConstants total 0.230ms self 0.230ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.961 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.016ms self 0.016ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.961 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/NormalizeNames total 0.176ms self 0.176ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.961 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/Simplify total 0.155ms self 0.155ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.961 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/ForwardLets total 0.461ms self 0.461ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.961 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/ForwardRelationalLets total 0.040ms self 0.040ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.961 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/PruneDeadFields total 0.658ms self 0.658ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.961 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/Verify total 0.036ms self 0.036ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.961 : INFO: timing SparkBackend.execute/execute/Compile/EmitContext.analyze total 1.157ms self 1.157ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.961 : INFO: timing SparkBackend.execute/execute/InitializeCompiledFunction total 1.384ms self 1.384ms children 0.000ms %children 0.00%
2023-11-17 18:07:56.961 : INFO: timing SparkBackend.execute/execute/RunCompiledFunction total 0.069ms self 0.069ms children 0.000ms %children 0.00%
2023-11-17 18:07:57.001 : INFO: RegionPool: initialized for thread 78: Thread-20
2023-11-17 18:07:57.028 : INFO: starting execution of query hail_query_3 of initial size 297
2023-11-17 18:07:57.039 : INFO: java.lang.UnsupportedOperationException: SemanticHash unknown: is.hail.expr.ir.TableHead
2023-11-17 18:07:57.039 : INFO: IR Semantic Hash: None
2023-11-17 18:07:57.046 : INFO: initial IR: IR size 297: 

%1 = RNGStateLiteral
!2 = EncodedLiteral [Array[Tuple[Int32,Int32]]]
!s = ToStream(!2) [False] 
!c0 = I32 [0] 
!c1 = I32 [1]
!s2 = StreamIota(!c0, !c1) [False]
!s3 = StreamZip(!s, !s2) [35, TakeMinLength] {
(%elt, %elt2) =>
  !3 = Cast(%elt2) [Int64]
  MakeTuple(!3, %elt) [(0 1)]
} 
%4 = RNGStateLiteral
!c3 = I32 [3] 
!c10 = I32 [10] 
!c100 = I32 [100] 
!c8 = I32 [8] 
!5 = EncodedLiteral [Array[Int32]] 
!6 = EncodedLiteral [Array[Float64]] 
!false = False
!7 = MakeStruct(n_populations: !c3, n_samples: !c10, n_variants: !c100, n_partitions: !c8, pop_dist: !5, fst: !6, mixture: !false) 
!c0_2 = I32 [0] 
!c10_2 = I32 [10] 
!c1_2 = I32 [1]
!s4 = StreamRange(!c0_2, !c10_2, !c1_2) [1, False]
!s5 = StreamMap(!s4) { (%elt3) =>
  !8 = Cast(%elt3) [Int64]
  MakeTuple(!8, %elt3) [(0 1)]
}
!s8 = StreamMap(!s5) { (%elt4) =>
  !9 = GetTupleElement(%elt4) [0]
  %10 = RNGSplit(%4, !9)
  %11 = GetTupleElement(%elt4) [1]
  !12 = EncodedLiteral [Array[Int32]]
  !s6 = ToStream(!12) [False]
  !s7 = StreamMap(!s6) { (%elt5) =>
    ApplyIR(%elt5) [2, toFloat64, (), Float64]
  }
  !13 = ToArray(!s7)
  !14 = ApplySeeded(!13, %10) [rand_cat, 0, Int32]
  MakeStruct(sample_idx: %11, pop: !14)
}
!15 = ToArray(!s8)
!16 = MakeStruct(bn: !7, cols: !15) 
%17 = GetTupleElement(%undefined_ref) [0]
!c0_3 = I32 [0] 
!c1_3 = I32 [1]
!s9 = StreamIota(!c0_3, !c1_3) [False] 
%18 = RNGStateLiteral
%19 = RNGSplit(%18, %17)
%20 = GetTupleElement(%undefined_ref2) [1]
!21 = GetTupleElement(%20) [0] 
!22 = GetTupleElement(%20) [1] 
!c1_4 = I32 [1]
!s10 = StreamRange(!21, !22, !c1_4) [3, False]
!s11 = StreamMap(!s10) { (%elt6) =>
  !23 = Cast(%elt6) [Int64]
  MakeTuple(!23, %elt6) [(0 1)]
}
!s18 = StreamMap(!s11) { (%elt7) =>
  !24 = GetTupleElement(%elt7) [0]
  %25 = RNGSplit(%19, !24)
  %26 = GetTupleElement(%elt7) [1]
  !27 = F64 [0.1] 
  !28 = F64 [0.9]
  %29 = ApplySeeded(!27, !28, %25) [rand_unif, -1, Float64]
  !30 = ApplyIR(%26) [4, toInt64, (), Int64]
  !31 = Apply(!30) [5, globalPosToLocus, 
  (), Locus(GRCh37)] 
  !32 = EncodedLiteral [Array[String]] 
  !33 = EncodedLiteral [Array[Float64]]
  !s12 = ToStream(!33) [False] 
  !c0_4 = I32 [0] 
  !c1_5 = I32 [1]
  !s13 = StreamIota(!c0_4, !c1_5) [False]
  !s14 = StreamZip(!s12, !s13) [7, TakeMinLength] {
  (%elt8, %elt9) =>
    !34 = Cast(%elt9) [Int64]
    MakeTuple(!34, %elt8) [(0 1)]
  }
  !s15 = StreamMap(!s14) { (%elt10) =>
    !35 = GetTupleElement(%elt10) [0]
    %36 = RNGSplit(%25, !35)
    %37 = GetTupleElement(%elt10) [1]
    !38 = ApplyBinaryPrimOp(%29, %37) [Multiply] 
    !c1_6 = I32 [1]
    !39 = ApplyIR(!c1_6) [6, toFloat64, (), Float64]
    !40 = ApplyBinaryPrimOp(!39, %29) [Subtract]
    !41 = ApplyBinaryPrimOp(!40, %37) [Multiply]
    ApplySeeded(!38, !41, %36) [rand_beta, 1, Float64]
  }
  !42 = ToArray(!s15) 
  %43 = MakeStruct()
  !c0_5 = I32 [0] 
  !c10_3 = I32 [10] 
  !c1_7 = I32 [1]
  !s16 = StreamRange(!c0_5, !c10_3, !c1_7) [8, False]
  !s17 = StreamMap(!s16) { (%elt11) => %43 }
  !44 = ToArray(!s17)
  MakeStruct(locus: !31, alleles: !32, ancestral_af: %29, af: !42, entries: !44)
}
!s19 = StreamZip(!s9, !s18) [36, TakeMinLength] {
(%elt12, %elt13) =>
  !45 = Cast(%elt12) [Int64]
  !46 = MakeTuple(%17, !45) [(0 1)]
  InsertFields %elt13 (__row_uid: !46)
}
!ht = TableGen(!s3, !16, !s19) [__uid_42, globals___uid_8, (Partitioner Struct{locus:Locus(GRCh37),alleles:Array[String]}"[{\"start\":{\"locus\":{\"contig\":\"1\",\"position\":1},\"alleles\":[\"A\",\"C\"]},\"end\":{\"locus\":{\"contig\":\"1\",\"position\":13},\"alleles\":[\"A\",\"C\"]},\"includeStart\":true,\"includeEnd\":false},{\"start\":{\"locus\":{\"contig\":\"1\",\"position\":13},\"alleles\":[\"A\",\"C\"]},\"end\":{\"locus\":{\"contig\":\"1\",\"position\":26},\"alleles\":[\"A\",\"C\"]},\"includeStart\":true,\"includeEnd\":false},{\"start\":{\"locus\":{\"contig\":\"1\",\"position\":26},\"alleles\":[\"A\",\"C\"]},\"end\":{\"locus\":{\"contig\":\"1\",\"position\":38},\"alleles\":[\"A\",\"C\"]},\"includeStart\":true,\"includeEnd\":false},{\"start\":{\"locus\":{\"contig\":\"1\",\"position\":38},\"alleles\":[\"A\",\"C\"]},\"end\":{\"locus\":{\"contig\":\"1\",\"position\":51},\"alleles\":[\"A\",\"C\"]},\"includeStart\":true,\"includeEnd\":false},{\"start\":{\"locus\":{\"contig\":\"1\",\"position\":51},\"alleles\":[\"A\",\"C\"]},\"end\":{\"locus\":{\"contig\":\"1\",\"position\":63},\"alleles\":[\"A\",\"C\"]},\"includeStart\":true,\"includeEnd\":false},{\"start\":{\"locus\":{\"contig\":\"1\",\"position\":63},\"alleles\":[\"A\",\"C\"]},\"end\":{\"locus\":{\"contig\":\"1\",\"position\":76},\"alleles\":[\"A\",\"C\"]},\"includeStart\":true,\"includeEnd\":false},{\"start\":{\"locus\":{\"contig\":\"1\",\"position\":76},\"alleles\":[\"A\",\"C\"]},\"end\":{\"locus\":{\"contig\":\"1\",\"position\":88},\"alleles\":[\"A\",\"C\"]},\"includeStart\":true,\"includeEnd\":false},{\"start\":{\"locus\":{\"contig\":\"1\",\"position\":88},\"alleles\":[\"A\",\"C\"]},\"end\":{\"locus\":{\"contig\":\"1\",\"position\":101},\"alleles\":[\"A\",\"C\"]},\"includeStart\":true,\"includeEnd\":false}]"), 9]
!ht2 = TableMapGlobals(!ht) { (%g) =>
  %47 = GetField(%g) [cols]
  !s20 = ToStream(%47) [False] 
  !c0_6 = I32 [0] 
  !c1_8 = I32 [1]
  !s21 = StreamIota(!c0_6, !c1_8) [False]
  !s22 = StreamZip(!s20, !s21) [34, TakeMinLength] {
  (%elt14, %elt15) =>
    !48 = Cast(%elt15) [Int64]
    InsertFields %elt14 (__col_uid: !48)
  }
  !49 = ToArray(!s22)
  InsertFields %g (cols: !49)
}
!50 = CastTableToMatrix(!ht2) [entries, cols, 
(sample_idx)]
!77 = MatrixMapEntries(!50) {
(%g2, %col, %row, %entry) =>
  %51 = GetField(%row) [__row_uid]
  !52 = RNGStateLiteral 
  !53 = GetTupleElement(%51) [0] 
  !54 = GetTupleElement(%51) [1] 
  !55 = GetField(%col) [__col_uid]
  !56 = MakeTuple(!53, !54, !55) [(0 1 2)]
  %57 = RNGSplit(!52, !56)
  %58 = SelectFields(%col) [(sample_idx pop)]
  %59 = SelectFields(%row) [
  (locus alleles ancestral_af af)]
  !60 = GetField(%59) [af] 
  !61 = GetField(%58) [pop]
  %62 = ApplyIR(!60, !61) [10, indexArray, 
  (), Float64]
  !c1_9 = I32 [1]
  !63 = ApplyIR(!c1_9) [11, toFloat64, (), Float64]
  %64 = ApplyBinaryPrimOp(!63, %62) [Subtract]
  !65 = SelectFields(%entry) [()]
  !66 = SelectFields(!65) [()] 
  !c2 = I32 [2]
  !67 = ApplyIR(!c2) [12, toFloat64, (), Float64]
  !68 = Apply(%64, !67) [13, pow, (), Float64] 
  !c2_2 = I32 [2]
  !69 = ApplyIR(!c2_2) [14, toFloat64, (), Float64]
  !70 = ApplyBinaryPrimOp(!69, %62) [Multiply]
  !71 = ApplyBinaryPrimOp(!70, %64) [Multiply] 
  !c2_3 = I32 [2]
  !72 = ApplyIR(!c2_3) [15, toFloat64, (), Float64]
  !73 = Apply(%62, !72) [16, pow, (), Float64]
  !74 = MakeArray(!68, !71, !73) [Array[Float64]]
  !75 = ApplySeeded(!74, %57) [rand_cat, 2, Int32]
  !76 = Apply(!75) [17, UnphasedDiploidGtIndexCall, 
  (), Call]
  InsertFields !66 (GT: !76)
}
!78 = MatrixMapRows(!77) {
(%g3, %row2, %col2, %entry2, %n_cols) =>
  SelectFields(%row2) [
  (locus alleles ancestral_af af)]
}
!79 = MatrixMapCols(!78) [None] {
(%g4, %row3, %col3, %entry3, %n_rows) =>
  SelectFields(%col3) [(sample_idx pop)]
}
!ht3 = CastMatrixToTable(!79) ["entries", "cols"]
!ht4 = TableOrderBy(!ht3) [(Alocus Aalleles)]
!ht5 = TableMapRows(!ht4) { (%g5, %row4) =>
  %80 = GetField(%row4) [entries]
  !81 = SelectFields(%row4) [
  (locus alleles ancestral_af af entries)]
  !82 = SelectFields(!81) [()] 
  !83 = GetField(%row4) [locus] 
  !84 = GetField(%row4) [alleles] 
  !c0_7 = I32 [0]
  !85 = ApplyIR(%80, !c0_7) [24, indexArray, 
  (), Struct{GT:Call}] 
  !c1_10 = I32 [1]
  !86 = ApplyIR(%80, !c1_10) [25, indexArray, 
  (), Struct{GT:Call}] 
  !c2_4 = I32 [2]
  !87 = ApplyIR(%80, !c2_4) [26, indexArray, 
  (), Struct{GT:Call}] 
  !c3_2 = I32 [3]
  !88 = ApplyIR(%80, !c3_2) [27, indexArray, 
  (), Struct{GT:Call}]
  InsertFields !82 (locus: !83, alleles: !84, 0: !85, 1: !86, 2: !87, 3: !88)
}
!ht6 = TableOrderBy(!ht5) [()]
!ht7 = TableMapRows(!ht6) { (%g6, %row5) =>
  !89 = SelectFields(%row5) [
  (locus alleles `0` `1` `2` `3`)]
  !90 = SelectFields(!89) [()] 
  !91 = GetField(%row5) [locus] 
  !92 = GetField(%row5) [alleles] 
  !93 = GetField(%row5) [`0`]
  !94 = GetField(!93) [GT] 
  !95 = GetField(%row5) [`1`]
  !96 = GetField(!95) [GT] 
  !97 = GetField(%row5) [`2`]
  !98 = GetField(!97) [GT] 
  !99 = GetField(%row5) [`3`]
  !100 = GetField(!99) [GT]
  InsertFields !90 (locus: !91, alleles: !92, 0.GT: !94, 1.GT: !96, 2.GT: !98, 3.GT: !100)
}
!ht8 = TableMapRows(!ht7) { (%g7, %row6) =>
  !101 = SelectFields(%row6) [
  (locus alleles `0.GT` `1.GT` `2.GT` `3.GT`)]
  !102 = SelectFields(!101) [()] 
  !103 = GetField(%row6) [locus]
  !104 = ApplySpecial(!103) [28, showStr, 
  (), String] 
  !105 = GetField(%row6) [alleles]
  !106 = ApplySpecial(!105) [29, showStr, 
  (), String] 
  !107 = GetField(%row6) [`0.GT`]
  !108 = ApplySpecial(!107) [30, showStr, 
  (), String] 
  !109 = GetField(%row6) [`1.GT`]
  !110 = ApplySpecial(!109) [31, showStr, 
  (), String] 
  !111 = GetField(%row6) [`2.GT`]
  !112 = ApplySpecial(!111) [32, showStr, 
  (), String] 
  !113 = GetField(%row6) [`3.GT`]
  !114 = ApplySpecial(!113) [33, showStr, 
  (), String]
  InsertFields !102 (locus: !104, alleles: !106, 0.GT: !108, 1.GT: !110, 2.GT: !112, 3.GT: !114)
}
!ht9 = TableHead(!ht8) [11]
!115 = TableCollect(!ht9)
GetField(!115) [rows]

2023-11-17 18:07:57.047 : INFO: decoder cache hit
2023-11-17 18:07:57.047 : INFO: decoder cache hit
2023-11-17 18:07:57.081 : INFO: Prune: MakeStruct: eliminating field 'bn'
2023-11-17 18:07:57.082 : INFO: Prune: MakeStruct: eliminating field 'ancestral_af'
2023-11-17 18:07:57.124 : INFO: after optimize: relationalLowerer, initial IR: IR size 237: 

!1 = EncodedLiteral [Array[Tuple[Int32,Int32]]]
!s = ToStream(!1) [False] 
!c0 = I32 [0] 
!c1 = I32 [1]
!s2 = StreamIota(!c0, !c1) [False]
!s3 = StreamZip(!s, !s2) [35, TakeMinLength] {
(%elt, %elt2) =>
  !2 = Cast(%elt2) [Int64]
  MakeTuple(!2, %elt) [(0 1)]
} 
%3 = RNGStateLiteral
!c0_2 = I32 [0] 
!c10 = I32 [10] 
!c1_2 = I32 [1]
!s4 = StreamRange(!c0_2, !c10, !c1_2) [1, False]
!s7 = StreamMap(!s4) { (%elt3) =>
  !4 = Cast(%elt3) [Int64]
  %5 = MakeTuple(!4, %elt3) [(0 1)]
  !6 = GetTupleElement(%5) [1] 
  !7 = EncodedLiteral [Array[Int32]]
  !s5 = ToStream(!7) [False]
  !s6 = StreamMap(!s5) { (%elt4) =>
    Cast(%elt4) [Float64]
  }
  !8 = ToArray(!s6) 
  !9 = GetTupleElement(%5) [0]
  !10 = RNGSplit(%3, !9)
  !11 = ApplySeeded(!8, !10) [rand_cat, 0, Int32]
  MakeStruct(sample_idx: !6, pop: !11)
}
!12 = ToArray(!s7)
!13 = MakeStruct(cols: !12) 
%14 = GetTupleElement(%undefined_ref) [0]
!c0_3 = I32 [0] 
!c1_3 = I32 [1]
!s8 = StreamIota(!c0_3, !c1_3) [False] 
!15 = RNGStateLiteral
%16 = RNGSplit(!15, %14)
%17 = GetTupleElement(%undefined_ref2) [1]
!18 = GetTupleElement(%17) [0] 
!19 = GetTupleElement(%17) [1] 
!c1_4 = I32 [1]
!s9 = StreamRange(!18, !19, !c1_4) [3, False]
!s15 = StreamMap(!s9) { (%elt5) =>
  !20 = Cast(%elt5) [Int64]
  %21 = MakeTuple(!20, %elt5) [(0 1)]
  !22 = GetTupleElement(%21) [0]
  %23 = RNGSplit(%16, !22)
  !24 = F64 [0.1] 
  !25 = F64 [0.9]
  %26 = ApplySeeded(!24, !25, %23) [rand_unif, -1, Float64]
  !27 = GetTupleElement(%21) [1]
  !28 = Cast(!27) [Int64]
  !29 = Apply(!28) [5, globalPosToLocus, 
  (), Locus(GRCh37)] 
  !30 = EncodedLiteral [Array[String]] 
  !31 = EncodedLiteral [Array[Float64]]
  !s10 = ToStream(!31) [False] 
  !c0_4 = I32 [0] 
  !c1_5 = I32 [1]
  !s11 = StreamIota(!c0_4, !c1_5) [False]
  !s12 = StreamZip(!s10, !s11) [7, TakeMinLength] {
  (%elt6, %elt7) =>
    !32 = Cast(%elt7) [Int64]
    %33 = MakeTuple(!32, %elt6) [(0 1)]
    %34 = GetTupleElement(%33) [1]
    !35 = ApplyBinaryPrimOp(%26, %34) [Multiply] 
    !36 = F64 [1.0]
    !37 = ApplyBinaryPrimOp(!36, %26) [Subtract]
    !38 = ApplyBinaryPrimOp(!37, %34) [Multiply] 
    !39 = GetTupleElement(%33) [0]
    !40 = RNGSplit(%23, !39)
    ApplySeeded(!35, !38, !40) [rand_beta, 1, Float64]
  }
  !41 = ToArray(!s12) 
  !c0_5 = I32 [0] 
  !c10_2 = I32 [10] 
  !c1_6 = I32 [1]
  !s13 = StreamRange(!c0_5, !c10_2, !c1_6) [8, False]
  !s14 = StreamMap(!s13) { (%elt8) =>
    Literal [Struct{}, <literal value>]
  }
  !42 = ToArray(!s14)
  MakeStruct(locus: !29, alleles: !30, af: !41, entries: !42)
}
!s16 = StreamZip(!s8, !s15) [36, TakeMinLength] {
(%elt9, %elt10) =>
  !43 = Cast(%elt9) [Int64]
  !44 = MakeTuple(%14, !43) [(0 1)]
  InsertFields %elt10 (__row_uid: !44)
}
!ht = TableGen(!s3, !13, !s16) [__uid_42, globals___uid_8, (Partitioner Struct{locus:Locus(GRCh37),alleles:Array[String]}"[{\"start\":{\"locus\":{\"contig\":\"1\",\"position\":1},\"alleles\":[\"A\",\"C\"]},\"end\":{\"locus\":{\"contig\":\"1\",\"position\":13},\"alleles\":[\"A\",\"C\"]},\"includeStart\":true,\"includeEnd\":false},{\"start\":{\"locus\":{\"contig\":\"1\",\"position\":13},\"alleles\":[\"A\",\"C\"]},\"end\":{\"locus\":{\"contig\":\"1\",\"position\":26},\"alleles\":[\"A\",\"C\"]},\"includeStart\":true,\"includeEnd\":false},{\"start\":{\"locus\":{\"contig\":\"1\",\"position\":26},\"alleles\":[\"A\",\"C\"]},\"end\":{\"locus\":{\"contig\":\"1\",\"position\":38},\"alleles\":[\"A\",\"C\"]},\"includeStart\":true,\"includeEnd\":false},{\"start\":{\"locus\":{\"contig\":\"1\",\"position\":38},\"alleles\":[\"A\",\"C\"]},\"end\":{\"locus\":{\"contig\":\"1\",\"position\":51},\"alleles\":[\"A\",\"C\"]},\"includeStart\":true,\"includeEnd\":false},{\"start\":{\"locus\":{\"contig\":\"1\",\"position\":51},\"alleles\":[\"A\",\"C\"]},\"end\":{\"locus\":{\"contig\":\"1\",\"position\":63},\"alleles\":[\"A\",\"C\"]},\"includeStart\":true,\"includeEnd\":false},{\"start\":{\"locus\":{\"contig\":\"1\",\"position\":63},\"alleles\":[\"A\",\"C\"]},\"end\":{\"locus\":{\"contig\":\"1\",\"position\":76},\"alleles\":[\"A\",\"C\"]},\"includeStart\":true,\"includeEnd\":false},{\"start\":{\"locus\":{\"contig\":\"1\",\"position\":76},\"alleles\":[\"A\",\"C\"]},\"end\":{\"locus\":{\"contig\":\"1\",\"position\":88},\"alleles\":[\"A\",\"C\"]},\"includeStart\":true,\"includeEnd\":false},{\"start\":{\"locus\":{\"contig\":\"1\",\"position\":88},\"alleles\":[\"A\",\"C\"]},\"end\":{\"locus\":{\"contig\":\"1\",\"position\":101},\"alleles\":[\"A\",\"C\"]},\"includeStart\":true,\"includeEnd\":false}]"), 9]
!ht2 = TableMapGlobals(!ht) { (%g) =>
  !45 = GetField(%g) [cols]
  !s17 = ToStream(!45) [False] 
  !c0_6 = I32 [0] 
  !c1_7 = I32 [1]
  !s18 = StreamIota(!c0_6, !c1_7) [False]
  !s19 = StreamZip(!s17, !s18) [34, TakeMinLength] {
  (%elt11, %elt12) =>
    !46 = Cast(%elt12) [Int64]
    InsertFields %elt11 (__col_uid: !46)
  }
  !47 = ToArray(!s19)
  InsertFields %g (cols: !47)
}
!48 = CastTableToMatrix(!ht2) [entries, cols, ()]
!71 = MatrixMapEntries(!48) {
(%g2, %col, %row, %entry) =>
  %49 = GetField(%row) [__row_uid]
  !50 = GetField(%row) [af] 
  !51 = GetField(%col) [pop]
  %52 = ApplyIR(!50, !51) [10, indexArray, 
  (), Float64]
  !53 = F64 [1.0]
  %54 = ApplyBinaryPrimOp(!53, %52) [Subtract]
  !55 = F64 [2.0]
  !56 = Apply(%54, !55) [13, pow, (), Float64] 
  !57 = F64 [2.0]
  !58 = ApplyBinaryPrimOp(!57, %52) [Multiply]
  !59 = ApplyBinaryPrimOp(!58, %54) [Multiply] 
  !60 = F64 [2.0]
  !61 = Apply(%52, !60) [16, pow, (), Float64]
  !62 = MakeArray(!56, !59, !61) [Array[Float64]] 
  !63 = RNGStateLiteral 
  !64 = GetTupleElement(%49) [0] 
  !65 = GetTupleElement(%49) [1] 
  !66 = GetField(%col) [__col_uid]
  !67 = MakeTuple(!64, !65, !66) [(0 1 2)]
  !68 = RNGSplit(!63, !67)
  !69 = ApplySeeded(!62, !68) [rand_cat, 2, Int32]
  !70 = Apply(!69) [17, UnphasedDiploidGtIndexCall, 
  (), Call]
  InsertFields %entry (GT: !70)
}
!72 = MatrixMapRows(!71) {
(%g3, %row2, %col2, %entry2, %n_cols) =>
  SelectFields(%row2) [(locus alleles)]
}
!73 = MatrixMapCols(!72) [None] {
(%g4, %row3, %col3, %entry3, %n_rows) =>
  SelectFields(%col3) [()]
}
!ht3 = CastMatrixToTable(!73) ["entries", "cols"]
!ht4 = TableOrderBy(!ht3) [(Alocus Aalleles)]
!ht5 = TableMapRows(!ht4) { (%g5, %row4) =>
  %74 = GetField(%row4) [entries]
  !75 = SelectFields(%row4) [(locus alleles)] 
  !c0_7 = I32 [0]
  !76 = ArrayRef(%74, !c0_7) [24] 
  !c1_8 = I32 [1]
  !77 = ArrayRef(%74, !c1_8) [25] 
  !c2 = I32 [2]
  !78 = ArrayRef(%74, !c2) [26] 
  !c3 = I32 [3]
  !79 = ArrayRef(%74, !c3) [27]
  InsertFields !75 (0: !76, 1: !77, 2: !78, 3: !79)
}
!ht6 = TableOrderBy(!ht5) [()]
!ht7 = TableHead(!ht6) [11]
!ht8 = TableMapRows(!ht7) { (%g6, %row5) =>
  %80 = SelectFields(%row5) [(locus alleles)]
  !81 = SelectFields(%80) [()] 
  !82 = GetField(%80) [locus]
  !83 = ApplySpecial(!82) [28, showStr, (), String] 
  !84 = GetField(%80) [alleles]
  !85 = ApplySpecial(!84) [29, showStr, (), String] 
  !86 = GetField(%row5) [`0`]
  !87 = GetField(!86) [GT]
  !88 = ApplySpecial(!87) [30, showStr, (), String] 
  !89 = GetField(%row5) [`1`]
  !90 = GetField(!89) [GT]
  !91 = ApplySpecial(!90) [31, showStr, (), String] 
  !92 = GetField(%row5) [`2`]
  !93 = GetField(!92) [GT]
  !94 = ApplySpecial(!93) [32, showStr, (), String] 
  !95 = GetField(%row5) [`3`]
  !96 = GetField(!95) [GT]
  !97 = ApplySpecial(!96) [33, showStr, (), String]
  InsertFields !81 (locus: !83, alleles: !85, 0.GT: !88, 1.GT: !91, 2.GT: !94, 3.GT: !97)
}
!98 = TableCollect(!ht8)
GetField(!98) [rows]

2023-11-17 18:07:57.138 : INFO: after LowerMatrixToTable: IR size 321: 

!1 = EncodedLiteral [Array[Tuple[Int32,Int32]]]
!s = ToStream(!1) [False] 
!c0 = I32 [0] 
!c1 = I32 [1]
!s2 = StreamIota(!c0, !c1) [False]
!s3 = StreamZip(!s, !s2) [35, TakeMinLength] {
(%elt, %elt2) =>
  !2 = Cast(%elt2) [Int64]
  MakeTuple(!2, %elt) [(0 1)]
} 
%3 = RNGStateLiteral
!c0_2 = I32 [0] 
!c10 = I32 [10] 
!c1_2 = I32 [1]
!s4 = StreamRange(!c0_2, !c10, !c1_2) [1, False]
!s7 = StreamMap(!s4) { (%elt3) =>
  !4 = Cast(%elt3) [Int64]
  %5 = MakeTuple(!4, %elt3) [(0 1)]
  !6 = GetTupleElement(%5) [1] 
  !7 = EncodedLiteral [Array[Int32]]
  !s5 = ToStream(!7) [False]
  !s6 = StreamMap(!s5) { (%elt4) =>
    Cast(%elt4) [Float64]
  }
  !8 = ToArray(!s6) 
  !9 = GetTupleElement(%5) [0]
  !10 = RNGSplit(%3, !9)
  !11 = ApplySeeded(!8, !10) [rand_cat, 0, Int32]
  MakeStruct(sample_idx: !6, pop: !11)
}
!12 = ToArray(!s7)
!13 = MakeStruct(cols: !12) 
%14 = GetTupleElement(%undefined_ref) [0]
!c0_3 = I32 [0] 
!c1_3 = I32 [1]
!s8 = StreamIota(!c0_3, !c1_3) [False] 
!15 = RNGStateLiteral
%16 = RNGSplit(!15, %14)
%17 = GetTupleElement(%undefined_ref2) [1]
!18 = GetTupleElement(%17) [0] 
!19 = GetTupleElement(%17) [1] 
!c1_4 = I32 [1]
!s9 = StreamRange(!18, !19, !c1_4) [3, False]
!s15 = StreamMap(!s9) { (%elt5) =>
  !20 = Cast(%elt5) [Int64]
  %21 = MakeTuple(!20, %elt5) [(0 1)]
  !22 = GetTupleElement(%21) [0]
  %23 = RNGSplit(%16, !22)
  !24 = F64 [0.1] 
  !25 = F64 [0.9]
  %26 = ApplySeeded(!24, !25, %23) [rand_unif, -1, Float64]
  !27 = GetTupleElement(%21) [1]
  !28 = Cast(!27) [Int64]
  !29 = Apply(!28) [5, globalPosToLocus, 
  (), Locus(GRCh37)] 
  !30 = EncodedLiteral [Array[String]] 
  !31 = EncodedLiteral [Array[Float64]]
  !s10 = ToStream(!31) [False] 
  !c0_4 = I32 [0] 
  !c1_5 = I32 [1]
  !s11 = StreamIota(!c0_4, !c1_5) [False]
  !s12 = StreamZip(!s10, !s11) [7, TakeMinLength] {
  (%elt6, %elt7) =>
    !32 = Cast(%elt7) [Int64]
    %33 = MakeTuple(!32, %elt6) [(0 1)]
    %34 = GetTupleElement(%33) [1]
    !35 = ApplyBinaryPrimOp(%26, %34) [Multiply] 
    !36 = F64 [1.0]
    !37 = ApplyBinaryPrimOp(!36, %26) [Subtract]
    !38 = ApplyBinaryPrimOp(!37, %34) [Multiply] 
    !39 = GetTupleElement(%33) [0]
    !40 = RNGSplit(%23, !39)
    ApplySeeded(!35, !38, !40) [rand_beta, 1, Float64]
  }
  !41 = ToArray(!s12) 
  !c0_5 = I32 [0] 
  !c10_2 = I32 [10] 
  !c1_6 = I32 [1]
  !s13 = StreamRange(!c0_5, !c10_2, !c1_6) [8, False]
  !s14 = StreamMap(!s13) { (%elt8) =>
    Literal [Struct{}, <literal value>]
  }
  !42 = ToArray(!s14)
  MakeStruct(locus: !29, alleles: !30, af: !41, entries: !42)
}
!s16 = StreamZip(!s8, !s15) [36, TakeMinLength] {
(%elt9, %elt10) =>
  !43 = Cast(%elt9) [Int64]
  !44 = MakeTuple(%14, !43) [(0 1)]
  InsertFields %elt10 (__row_uid: !44)
}
!ht = TableGen(!s3, !13, !s16) [__uid_42, globals___uid_8, (Partitioner Struct{locus:Locus(GRCh37),alleles:Array[String]}"[{\"start\":{\"locus\":{\"contig\":\"1\",\"position\":1},\"alleles\":[\"A\",\"C\"]},\"end\":{\"locus\":{\"contig\":\"1\",\"position\":13},\"alleles\":[\"A\",\"C\"]},\"includeStart\":true,\"includeEnd\":false},{\"start\":{\"locus\":{\"contig\":\"1\",\"position\":13},\"alleles\":[\"A\",\"C\"]},\"end\":{\"locus\":{\"contig\":\"1\",\"position\":26},\"alleles\":[\"A\",\"C\"]},\"includeStart\":true,\"includeEnd\":false},{\"start\":{\"locus\":{\"contig\":\"1\",\"position\":26},\"alleles\":[\"A\",\"C\"]},\"end\":{\"locus\":{\"contig\":\"1\",\"position\":38},\"alleles\":[\"A\",\"C\"]},\"includeStart\":true,\"includeEnd\":false},{\"start\":{\"locus\":{\"contig\":\"1\",\"position\":38},\"alleles\":[\"A\",\"C\"]},\"end\":{\"locus\":{\"contig\":\"1\",\"position\":51},\"alleles\":[\"A\",\"C\"]},\"includeStart\":true,\"includeEnd\":false},{\"start\":{\"locus\":{\"contig\":\"1\",\"position\":51},\"alleles\":[\"A\",\"C\"]},\"end\":{\"locus\":{\"contig\":\"1\",\"position\":63},\"alleles\":[\"A\",\"C\"]},\"includeStart\":true,\"includeEnd\":false},{\"start\":{\"locus\":{\"contig\":\"1\",\"position\":63},\"alleles\":[\"A\",\"C\"]},\"end\":{\"locus\":{\"contig\":\"1\",\"position\":76},\"alleles\":[\"A\",\"C\"]},\"includeStart\":true,\"includeEnd\":false},{\"start\":{\"locus\":{\"contig\":\"1\",\"position\":76},\"alleles\":[\"A\",\"C\"]},\"end\":{\"locus\":{\"contig\":\"1\",\"position\":88},\"alleles\":[\"A\",\"C\"]},\"includeStart\":true,\"includeEnd\":false},{\"start\":{\"locus\":{\"contig\":\"1\",\"position\":88},\"alleles\":[\"A\",\"C\"]},\"end\":{\"locus\":{\"contig\":\"1\",\"position\":101},\"alleles\":[\"A\",\"C\"]},\"includeStart\":true,\"includeEnd\":false}]"), 9]
!ht2 = TableMapGlobals(!ht) { (%g) =>
  !45 = GetField(%g) [cols]
  !s17 = ToStream(!45) [False] 
  !c0_6 = I32 [0] 
  !c1_7 = I32 [1]
  !s18 = StreamIota(!c0_6, !c1_7) [False]
  !s19 = StreamZip(!s17, !s18) [34, TakeMinLength] {
  (%elt11, %elt12) =>
    !46 = Cast(%elt12) [Int64]
    InsertFields %elt11 (__col_uid: !46)
  }
  !47 = ToArray(!s19)
  InsertFields %g (cols: !47)
}
!ht3 = TableMapRows(!ht2) { (%g2, %row) =>
  %48 = GetField(%row) [entries]
  !49 = IsNA(%48)
  If !49 then {
    !50 = Str ["missing en..."]
    Die(!50) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, -1]
  } else {
    !51 = GetField(%g2) [cols]
    %52 = ArrayLen(!51)
    %53 = ArrayLen(%48)
    !54 = ApplyComparisonOp(%53, %52) [NEQWithNA]
    If !54 then {
      !55 = Str ["length mis..."] 
      !56 = Apply(%53) [-1, str, (), String]
      !57 = Apply(!55, !56) [-1, concat, (), String] 
      !58 = Str [" entries, "]
      !59 = Apply(!57, !58) [-1, concat, (), String] 
      !60 = Apply(%52) [-1, str, (), String]
      !61 = Apply(!59, !60) [-1, concat, (), String] 
      !62 = Str [" cols, at "]
      !63 = Apply(!61, !62) [-1, concat, (), String] 
      !64 = SelectFields(%row) [(locus alleles)]
      !65 = Apply(!64) [-1, str, (), String]
      !66 = Apply(!63, !65) [-1, concat, (), String]
      Die(!66) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, -1]
    } else { %row }
  }
}
!ht4 = TableRename(!ht3) [("entries"), 
(
  "the entries! [877f12a8827e18f61222c6c8c5fb04a8]"), 
("cols"), ("__cols")]
!ht5 = TableMapRows(!ht4) { (%g3, %row2) =>
  !67 = GetField(%row2) [`the entries! [877f12a8827e18f61222c6c8c5fb04a8]`]
  !s20 = ToStream(!67) [False] 
  !68 = GetField(%g3) [__cols]
  !s21 = ToStream(!68) [False]
  !s22 = StreamZip(!s20, !s21) [-1, AssumeSameLength] {
  (%elt13, %elt14) =>
    !69 = SelectFields(%row2) [
    (locus alleles af __row_uid)]
    %70 = GetField(!69) [__row_uid]
    !71 = SelectFields(%row2) [
    (locus alleles af __row_uid)]
    !72 = GetField(!71) [af] 
    !73 = GetField(%elt14) [pop]
    %74 = ApplyIR(!72, !73) [10, indexArray, 
    (), Float64]
    !75 = F64 [1.0]
    %76 = ApplyBinaryPrimOp(!75, %74) [Subtract]
    !77 = F64 [2.0]
    !78 = Apply(%76, !77) [13, pow, (), Float64] 
    !79 = F64 [2.0]
    !80 = ApplyBinaryPrimOp(!79, %74) [Multiply]
    !81 = ApplyBinaryPrimOp(!80, %76) [Multiply] 
    !82 = F64 [2.0]
    !83 = Apply(%74, !82) [16, pow, (), Float64]
    !84 = MakeArray(!78, !81, !83) [Array[Float64]] 
    !85 = RNGStateLiteral 
    !86 = GetTupleElement(%70) [0] 
    !87 = GetTupleElement(%70) [1] 
    !88 = GetField(%elt14) [__col_uid]
    !89 = MakeTuple(!86, !87, !88) [(0 1 2)]
    !90 = RNGSplit(!85, !89)
    !91 = ApplySeeded(!84, !90) [rand_cat, 2, Int32]
    !92 = Apply(!91) [17, UnphasedDiploidGtIndexCall, 
    (), Call]
    InsertFields %elt13 (GT: !92)
  }
  !93 = ToArray(!s22)
  InsertFields %row2 (the entries! [877f12a8827e18f61222c6c8c5fb04a8]: !93)
}
!ht6 = TableMapRows(!ht5) { (%g4, %row3) =>
  !94 = GetField(%g4) [__cols]
  %95 = ArrayLen(!94)
  %96 = MakeStruct()
  !97 = SelectFields(%row3) [
  (locus alleles af __row_uid)]
  !98 = SelectFields(!97) [(locus alleles)] 
  !99 = GetField(%row3) [`the entries! [877f12a8827e18f61222c6c8c5fb04a8]`]
  InsertFields !98 (the entries! [877f12a8827e18f61222c6c8c5fb04a8]: !99)
}
!ht7 = TableMapGlobals(!ht6) { (%g5) =>
  !c0_7 = I32 [0] 
  !100 = GetField(%g5) [__cols]
  !101 = ArrayLen(!100) 
  !c1_8 = I32 [1]
  !s23 = StreamRange(!c0_7, !101, !c1_8) [-1, False]
  !102 = ToArray(!s23)
  !s24 = ToStream(!102) [False]
  !s25 = StreamMap(!s24) { (%elt15) =>
    %103 = GetField(%g5) [__cols]
    %104 = ArrayRef(%103, %elt15) [-1]
    SelectFields(%104) [()]
  }
  !105 = ToArray(!s25)
  InsertFields %g5 (__cols: !105)
}
!ht8 = TableMapRows(!ht7) { (%g6, %row4) =>
  SelectFields(%row4) [
  (locus alleles
    `the entries! [877f12a8827e18f61222c6c8c5fb04a8]`)]
}
!ht9 = TableMapGlobals(!ht8) { (%g7) =>
  SelectFields(%g7) [(__cols)]
}
!ht10 = TableRename(!ht9) [
(
  "the entries! [877f12a8827e18f61222c6c8c5fb04a8]"), 
("entries"), ("__cols"), ("cols")]
!ht11 = TableOrderBy(!ht10) [(Alocus Aalleles)]
!ht12 = TableMapRows(!ht11) { (%g8, %row5) =>
  %106 = GetField(%row5) [entries]
  !107 = SelectFields(%row5) [(locus alleles)] 
  !c0_8 = I32 [0]
  !108 = ArrayRef(%106, !c0_8) [24] 
  !c1_9 = I32 [1]
  !109 = ArrayRef(%106, !c1_9) [25] 
  !c2 = I32 [2]
  !110 = ArrayRef(%106, !c2) [26] 
  !c3 = I32 [3]
  !111 = ArrayRef(%106, !c3) [27]
  InsertFields !107 (0: !108, 1: !109, 2: !110, 3: !111)
}
!ht13 = TableOrderBy(!ht12) [()]
!ht14 = TableHead(!ht13) [11]
!ht15 = TableMapRows(!ht14) { (%g9, %row6) =>
  %112 = SelectFields(%row6) [(locus alleles)]
  !113 = SelectFields(%112) [()] 
  !114 = GetField(%112) [locus]
  !115 = ApplySpecial(!114) [28, showStr, 
  (), String] 
  !116 = GetField(%112) [alleles]
  !117 = ApplySpecial(!116) [29, showStr, 
  (), String] 
  !118 = GetField(%row6) [`0`]
  !119 = GetField(!118) [GT]
  !120 = ApplySpecial(!119) [30, showStr, 
  (), String] 
  !121 = GetField(%row6) [`1`]
  !122 = GetField(!121) [GT]
  !123 = ApplySpecial(!122) [31, showStr, 
  (), String] 
  !124 = GetField(%row6) [`2`]
  !125 = GetField(!124) [GT]
  !126 = ApplySpecial(!125) [32, showStr, 
  (), String] 
  !127 = GetField(%row6) [`3`]
  !128 = GetField(!127) [GT]
  !129 = ApplySpecial(!128) [33, showStr, 
  (), String]
  InsertFields !113 (locus: !115, alleles: !117, 0.GT: !120, 1.GT: !123, 2.GT: !126, 3.GT: !129)
}
!130 = TableCollect(!ht15)
GetField(!130) [rows]

2023-11-17 18:07:57.170 : INFO: Prune: InsertFields: eliminating field '__cols'
2023-11-17 18:07:57.215 : INFO: after optimize: relationalLowerer, after LowerMatrixToTable: IR size 282: 

!1 = EncodedLiteral [Array[Tuple[Int32,Int32]]]
!s = ToStream(!1) [False] 
!c0 = I32 [0] 
!c1 = I32 [1]
!s2 = StreamIota(!c0, !c1) [False]
!s3 = StreamZip(!s, !s2) [35, TakeMinLength] {
(%elt, %elt2) =>
  !2 = Cast(%elt2) [Int64]
  MakeTuple(!2, %elt) [(0 1)]
} 
%3 = RNGStateLiteral
!c0_2 = I32 [0] 
!c10 = I32 [10] 
!c1_2 = I32 [1]
!s4 = StreamRange(!c0_2, !c10, !c1_2) [1, False]
!s7 = StreamMap(!s4) { (%elt3) =>
  !4 = Cast(%elt3) [Int64]
  %5 = MakeTuple(!4, %elt3) [(0 1)]
  !6 = GetTupleElement(%5) [1] 
  !7 = EncodedLiteral [Array[Int32]]
  !s5 = ToStream(!7) [False]
  !s6 = StreamMap(!s5) { (%elt4) =>
    Cast(%elt4) [Float64]
  }
  !8 = ToArray(!s6) 
  !9 = GetTupleElement(%5) [0]
  !10 = RNGSplit(%3, !9)
  !11 = ApplySeeded(!8, !10) [rand_cat, 0, Int32]
  MakeStruct(sample_idx: !6, pop: !11)
}
!12 = ToArray(!s7)
!13 = MakeStruct(cols: !12) 
%14 = GetTupleElement(%undefined_ref) [0]
!c0_3 = I32 [0] 
!c1_3 = I32 [1]
!s8 = StreamIota(!c0_3, !c1_3) [False] 
!15 = RNGStateLiteral
%16 = RNGSplit(!15, %14)
%17 = GetTupleElement(%undefined_ref2) [1]
!18 = GetTupleElement(%17) [0] 
!19 = GetTupleElement(%17) [1] 
!c1_4 = I32 [1]
!s9 = StreamRange(!18, !19, !c1_4) [3, False]
!s15 = StreamMap(!s9) { (%elt5) =>
  !20 = Cast(%elt5) [Int64]
  %21 = MakeTuple(!20, %elt5) [(0 1)]
  !22 = GetTupleElement(%21) [0]
  %23 = RNGSplit(%16, !22)
  !24 = F64 [0.1] 
  !25 = F64 [0.9]
  %26 = ApplySeeded(!24, !25, %23) [rand_unif, -1, Float64]
  !27 = GetTupleElement(%21) [1]
  !28 = Cast(!27) [Int64]
  !29 = Apply(!28) [5, globalPosToLocus, 
  (), Locus(GRCh37)] 
  !30 = EncodedLiteral [Array[String]] 
  !31 = EncodedLiteral [Array[Float64]]
  !s10 = ToStream(!31) [False] 
  !c0_4 = I32 [0] 
  !c1_5 = I32 [1]
  !s11 = StreamIota(!c0_4, !c1_5) [False]
  !s12 = StreamZip(!s10, !s11) [7, TakeMinLength] {
  (%elt6, %elt7) =>
    !32 = Cast(%elt7) [Int64]
    %33 = MakeTuple(!32, %elt6) [(0 1)]
    %34 = GetTupleElement(%33) [1]
    !35 = ApplyBinaryPrimOp(%26, %34) [Multiply] 
    !36 = F64 [1.0]
    !37 = ApplyBinaryPrimOp(!36, %26) [Subtract]
    !38 = ApplyBinaryPrimOp(!37, %34) [Multiply] 
    !39 = GetTupleElement(%33) [0]
    !40 = RNGSplit(%23, !39)
    ApplySeeded(!35, !38, !40) [rand_beta, 1, Float64]
  }
  !41 = ToArray(!s12) 
  !c0_5 = I32 [0] 
  !c10_2 = I32 [10] 
  !c1_6 = I32 [1]
  !s13 = StreamRange(!c0_5, !c10_2, !c1_6) [8, False]
  !s14 = StreamMap(!s13) { (%elt8) =>
    Literal [Struct{}, <literal value>]
  }
  !42 = ToArray(!s14)
  MakeStruct(locus: !29, alleles: !30, af: !41, entries: !42)
}
!s16 = StreamZip(!s8, !s15) [36, TakeMinLength] {
(%elt9, %elt10) =>
  !43 = Cast(%elt9) [Int64]
  !44 = MakeTuple(%14, !43) [(0 1)]
  InsertFields %elt10 (__row_uid: !44)
}
!ht = TableGen(!s3, !13, !s16) [__uid_42, globals___uid_8, (Partitioner Struct{locus:Locus(GRCh37),alleles:Array[String]}"[{\"start\":{\"locus\":{\"contig\":\"1\",\"position\":1},\"alleles\":[\"A\",\"C\"]},\"end\":{\"locus\":{\"contig\":\"1\",\"position\":13},\"alleles\":[\"A\",\"C\"]},\"includeStart\":true,\"includeEnd\":false},{\"start\":{\"locus\":{\"contig\":\"1\",\"position\":13},\"alleles\":[\"A\",\"C\"]},\"end\":{\"locus\":{\"contig\":\"1\",\"position\":26},\"alleles\":[\"A\",\"C\"]},\"includeStart\":true,\"includeEnd\":false},{\"start\":{\"locus\":{\"contig\":\"1\",\"position\":26},\"alleles\":[\"A\",\"C\"]},\"end\":{\"locus\":{\"contig\":\"1\",\"position\":38},\"alleles\":[\"A\",\"C\"]},\"includeStart\":true,\"includeEnd\":false},{\"start\":{\"locus\":{\"contig\":\"1\",\"position\":38},\"alleles\":[\"A\",\"C\"]},\"end\":{\"locus\":{\"contig\":\"1\",\"position\":51},\"alleles\":[\"A\",\"C\"]},\"includeStart\":true,\"includeEnd\":false},{\"start\":{\"locus\":{\"contig\":\"1\",\"position\":51},\"alleles\":[\"A\",\"C\"]},\"end\":{\"locus\":{\"contig\":\"1\",\"position\":63},\"alleles\":[\"A\",\"C\"]},\"includeStart\":true,\"includeEnd\":false},{\"start\":{\"locus\":{\"contig\":\"1\",\"position\":63},\"alleles\":[\"A\",\"C\"]},\"end\":{\"locus\":{\"contig\":\"1\",\"position\":76},\"alleles\":[\"A\",\"C\"]},\"includeStart\":true,\"includeEnd\":false},{\"start\":{\"locus\":{\"contig\":\"1\",\"position\":76},\"alleles\":[\"A\",\"C\"]},\"end\":{\"locus\":{\"contig\":\"1\",\"position\":88},\"alleles\":[\"A\",\"C\"]},\"includeStart\":true,\"includeEnd\":false},{\"start\":{\"locus\":{\"contig\":\"1\",\"position\":88},\"alleles\":[\"A\",\"C\"]},\"end\":{\"locus\":{\"contig\":\"1\",\"position\":101},\"alleles\":[\"A\",\"C\"]},\"includeStart\":true,\"includeEnd\":false}]"), 9]
!ht2 = TableMapGlobals(!ht) { (%g) =>
  !45 = GetField(%g) [cols]
  !s17 = ToStream(!45) [False] 
  !c0_6 = I32 [0] 
  !c1_7 = I32 [1]
  !s18 = StreamIota(!c0_6, !c1_7) [False]
  !s19 = StreamZip(!s17, !s18) [34, TakeMinLength] {
  (%elt11, %elt12) =>
    !46 = Cast(%elt12) [Int64]
    InsertFields %elt11 (__col_uid: !46)
  }
  !47 = ToArray(!s19)
  InsertFields %g (cols: !47)
}
!ht3 = TableMapRows(!ht2) { (%g2, %row) =>
  %48 = GetField(%row) [entries]
  !49 = IsNA(%48)
  If !49 then {
    !50 = Str ["missing en..."]
    Die(!50) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, -1]
  } else {
    !51 = GetField(%g2) [cols]
    %52 = ArrayLen(!51)
    %53 = ArrayLen(%48)
    !54 = ApplyComparisonOp(%53, %52) [NEQWithNA]
    If !54 then {
      !55 = Str ["length mis..."] 
      !56 = Apply(%53) [-1, str, (), String]
      !57 = Apply(!55, !56) [-1, concat, (), String] 
      !58 = Str [" entries, "]
      !59 = Apply(!57, !58) [-1, concat, (), String] 
      !60 = Apply(%52) [-1, str, (), String]
      !61 = Apply(!59, !60) [-1, concat, (), String] 
      !62 = Str [" cols, at "]
      !63 = Apply(!61, !62) [-1, concat, (), String] 
      !64 = SelectFields(%row) [(locus alleles)]
      !65 = Apply(!64) [-1, str, (), String]
      !66 = Apply(!63, !65) [-1, concat, (), String]
      Die(!66) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, -1]
    } else { %row }
  }
}
!ht4 = TableRename(!ht3) [("entries"), 
(
  "the entries! [877f12a8827e18f61222c6c8c5fb04a8]"), 
("cols"), ("__cols")]
!ht5 = TableMapRows(!ht4) { (%g3, %row2) =>
  !67 = SelectFields(%row2) [(locus alleles)] 
  !68 = GetField(%row2) [`the entries! [877f12a8827e18f61222c6c8c5fb04a8]`]
  !s20 = ToStream(!68) [False] 
  !69 = GetField(%g3) [__cols]
  !s21 = ToStream(!69) [False]
  !s22 = StreamZip(!s20, !s21) [-1, AssumeSameLength] {
  (%elt13, %elt14) =>
    %70 = GetField(%row2) [__row_uid]
    !71 = GetField(%row2) [af] 
    !72 = GetField(%elt14) [pop]
    %73 = ApplyIR(!71, !72) [10, indexArray, 
    (), Float64]
    !74 = F64 [1.0]
    %75 = ApplyBinaryPrimOp(!74, %73) [Subtract]
    !76 = F64 [2.0]
    !77 = Apply(%75, !76) [13, pow, (), Float64] 
    !78 = F64 [2.0]
    !79 = ApplyBinaryPrimOp(!78, %73) [Multiply]
    !80 = ApplyBinaryPrimOp(!79, %75) [Multiply] 
    !81 = F64 [2.0]
    !82 = Apply(%73, !81) [16, pow, (), Float64]
    !83 = MakeArray(!77, !80, !82) [Array[Float64]] 
    !84 = RNGStateLiteral 
    !85 = GetTupleElement(%70) [0] 
    !86 = GetTupleElement(%70) [1] 
    !87 = GetField(%elt14) [__col_uid]
    !88 = MakeTuple(!85, !86, !87) [(0 1 2)]
    !89 = RNGSplit(!84, !88)
    !90 = ApplySeeded(!83, !89) [rand_cat, 2, Int32]
    !91 = Apply(!90) [17, UnphasedDiploidGtIndexCall, 
    (), Call]
    InsertFields %elt13 (GT: !91)
  }
  !92 = ToArray(!s22)
  InsertFields !67 (the entries! [877f12a8827e18f61222c6c8c5fb04a8]: !92)
}
!ht6 = TableMapGlobals(!ht5) { (%g4) =>
  SelectFields(%g4) [()]
}
!ht7 = TableRename(!ht6) [
(
  "the entries! [877f12a8827e18f61222c6c8c5fb04a8]"), 
("entries"), (), ()]
!ht8 = TableOrderBy(!ht7) [(Alocus Aalleles)]
!ht9 = TableMapRows(!ht8) { (%g5, %row3) =>
  %93 = GetField(%row3) [entries]
  !94 = SelectFields(%row3) [(locus alleles)] 
  !c0_7 = I32 [0]
  !95 = ArrayRef(%93, !c0_7) [24] 
  !c1_8 = I32 [1]
  !96 = ArrayRef(%93, !c1_8) [25] 
  !c2 = I32 [2]
  !97 = ArrayRef(%93, !c2) [26] 
  !c3 = I32 [3]
  !98 = ArrayRef(%93, !c3) [27]
  InsertFields !94 (0: !95, 1: !96, 2: !97, 3: !98)
}
!ht10 = TableOrderBy(!ht9) [()]
!ht11 = TableHead(!ht10) [11]
!ht12 = TableMapRows(!ht11) { (%g6, %row4) =>
  %99 = SelectFields(%row4) [(locus alleles)]
  !100 = SelectFields(%99) [()] 
  !101 = GetField(%99) [locus]
  !102 = ApplySpecial(!101) [28, showStr, 
  (), String] 
  !103 = GetField(%99) [alleles]
  !104 = ApplySpecial(!103) [29, showStr, 
  (), String] 
  !105 = GetField(%row4) [`0`]
  !106 = GetField(!105) [GT]
  !107 = ApplySpecial(!106) [30, showStr, 
  (), String] 
  !108 = GetField(%row4) [`1`]
  !109 = GetField(!108) [GT]
  !110 = ApplySpecial(!109) [31, showStr, 
  (), String] 
  !111 = GetField(%row4) [`2`]
  !112 = GetField(!111) [GT]
  !113 = ApplySpecial(!112) [32, showStr, 
  (), String] 
  !114 = GetField(%row4) [`3`]
  !115 = GetField(!114) [GT]
  !116 = ApplySpecial(!115) [33, showStr, 
  (), String]
  InsertFields !100 (locus: !102, alleles: !104, 0.GT: !107, 1.GT: !110, 2.GT: !113, 3.GT: !116)
}
!117 = TableCollect(!ht12)
GetField(!117) [rows]

2023-11-17 18:07:57.224 : INFO: after LiftRelationalValuesToRelationalLets: IR size 284: 

!1 = EncodedLiteral [Array[Tuple[Int32,Int32]]]
!s = ToStream(!1) [False] 
!c0 = I32 [0] 
!c1 = I32 [1]
!s2 = StreamIota(!c0, !c1) [False]
!s3 = StreamZip(!s, !s2) [35, TakeMinLength] {
(%elt, %elt2) =>
  !2 = Cast(%elt2) [Int64]
  MakeTuple(!2, %elt) [(0 1)]
} 
%3 = RNGStateLiteral
!c0_2 = I32 [0] 
!c10 = I32 [10] 
!c1_2 = I32 [1]
!s4 = StreamRange(!c0_2, !c10, !c1_2) [1, False]
!s7 = StreamMap(!s4) { (%elt3) =>
  !4 = Cast(%elt3) [Int64]
  %5 = MakeTuple(!4, %elt3) [(0 1)]
  !6 = GetTupleElement(%5) [1] 
  !7 = EncodedLiteral [Array[Int32]]
  !s5 = ToStream(!7) [False]
  !s6 = StreamMap(!s5) { (%elt4) =>
    Cast(%elt4) [Float64]
  }
  !8 = ToArray(!s6) 
  !9 = GetTupleElement(%5) [0]
  !10 = RNGSplit(%3, !9)
  !11 = ApplySeeded(!8, !10) [rand_cat, 0, Int32]
  MakeStruct(sample_idx: !6, pop: !11)
}
!12 = ToArray(!s7)
!13 = MakeStruct(cols: !12) 
%14 = GetTupleElement(%undefined_ref) [0]
!c0_3 = I32 [0] 
!c1_3 = I32 [1]
!s8 = StreamIota(!c0_3, !c1_3) [False] 
!15 = RNGStateLiteral
%16 = RNGSplit(!15, %14)
%17 = GetTupleElement(%undefined_ref2) [1]
!18 = GetTupleElement(%17) [0] 
!19 = GetTupleElement(%17) [1] 
!c1_4 = I32 [1]
!s9 = StreamRange(!18, !19, !c1_4) [3, False]
!s15 = StreamMap(!s9) { (%elt5) =>
  !20 = Cast(%elt5) [Int64]
  %21 = MakeTuple(!20, %elt5) [(0 1)]
  !22 = GetTupleElement(%21) [0]
  %23 = RNGSplit(%16, !22)
  !24 = F64 [0.1] 
  !25 = F64 [0.9]
  %26 = ApplySeeded(!24, !25, %23) [rand_unif, -1, Float64]
  !27 = GetTupleElement(%21) [1]
  !28 = Cast(!27) [Int64]
  !29 = Apply(!28) [5, globalPosToLocus, 
  (), Locus(GRCh37)] 
  !30 = EncodedLiteral [Array[String]] 
  !31 = EncodedLiteral [Array[Float64]]
  !s10 = ToStream(!31) [False] 
  !c0_4 = I32 [0] 
  !c1_5 = I32 [1]
  !s11 = StreamIota(!c0_4, !c1_5) [False]
  !s12 = StreamZip(!s10, !s11) [7, TakeMinLength] {
  (%elt6, %elt7) =>
    !32 = Cast(%elt7) [Int64]
    %33 = MakeTuple(!32, %elt6) [(0 1)]
    %34 = GetTupleElement(%33) [1]
    !35 = ApplyBinaryPrimOp(%26, %34) [Multiply] 
    !36 = F64 [1.0]
    !37 = ApplyBinaryPrimOp(!36, %26) [Subtract]
    !38 = ApplyBinaryPrimOp(!37, %34) [Multiply] 
    !39 = GetTupleElement(%33) [0]
    !40 = RNGSplit(%23, !39)
    ApplySeeded(!35, !38, !40) [rand_beta, 1, Float64]
  }
  !41 = ToArray(!s12) 
  !c0_5 = I32 [0] 
  !c10_2 = I32 [10] 
  !c1_6 = I32 [1]
  !s13 = StreamRange(!c0_5, !c10_2, !c1_6) [8, False]
  !s14 = StreamMap(!s13) { (%elt8) =>
    Literal [Struct{}, <literal value>]
  }
  !42 = ToArray(!s14)
  MakeStruct(locus: !29, alleles: !30, af: !41, entries: !42)
}
!s16 = StreamZip(!s8, !s15) [36, TakeMinLength] {
(%elt9, %elt10) =>
  !43 = Cast(%elt9) [Int64]
  !44 = MakeTuple(%14, !43) [(0 1)]
  InsertFields %elt10 (__row_uid: !44)
}
!ht = TableGen(!s3, !13, !s16) [__uid_42, globals___uid_8, (Partitioner Struct{locus:Locus(GRCh37),alleles:Array[String]}"[{\"start\":{\"locus\":{\"contig\":\"1\",\"position\":1},\"alleles\":[\"A\",\"C\"]},\"end\":{\"locus\":{\"contig\":\"1\",\"position\":13},\"alleles\":[\"A\",\"C\"]},\"includeStart\":true,\"includeEnd\":false},{\"start\":{\"locus\":{\"contig\":\"1\",\"position\":13},\"alleles\":[\"A\",\"C\"]},\"end\":{\"locus\":{\"contig\":\"1\",\"position\":26},\"alleles\":[\"A\",\"C\"]},\"includeStart\":true,\"includeEnd\":false},{\"start\":{\"locus\":{\"contig\":\"1\",\"position\":26},\"alleles\":[\"A\",\"C\"]},\"end\":{\"locus\":{\"contig\":\"1\",\"position\":38},\"alleles\":[\"A\",\"C\"]},\"includeStart\":true,\"includeEnd\":false},{\"start\":{\"locus\":{\"contig\":\"1\",\"position\":38},\"alleles\":[\"A\",\"C\"]},\"end\":{\"locus\":{\"contig\":\"1\",\"position\":51},\"alleles\":[\"A\",\"C\"]},\"includeStart\":true,\"includeEnd\":false},{\"start\":{\"locus\":{\"contig\":\"1\",\"position\":51},\"alleles\":[\"A\",\"C\"]},\"end\":{\"locus\":{\"contig\":\"1\",\"position\":63},\"alleles\":[\"A\",\"C\"]},\"includeStart\":true,\"includeEnd\":false},{\"start\":{\"locus\":{\"contig\":\"1\",\"position\":63},\"alleles\":[\"A\",\"C\"]},\"end\":{\"locus\":{\"contig\":\"1\",\"position\":76},\"alleles\":[\"A\",\"C\"]},\"includeStart\":true,\"includeEnd\":false},{\"start\":{\"locus\":{\"contig\":\"1\",\"position\":76},\"alleles\":[\"A\",\"C\"]},\"end\":{\"locus\":{\"contig\":\"1\",\"position\":88},\"alleles\":[\"A\",\"C\"]},\"includeStart\":true,\"includeEnd\":false},{\"start\":{\"locus\":{\"contig\":\"1\",\"position\":88},\"alleles\":[\"A\",\"C\"]},\"end\":{\"locus\":{\"contig\":\"1\",\"position\":101},\"alleles\":[\"A\",\"C\"]},\"includeStart\":true,\"includeEnd\":false}]"), 9]
!ht2 = TableMapGlobals(!ht) { (%g) =>
  !45 = GetField(%g) [cols]
  !s17 = ToStream(!45) [False] 
  !c0_6 = I32 [0] 
  !c1_7 = I32 [1]
  !s18 = StreamIota(!c0_6, !c1_7) [False]
  !s19 = StreamZip(!s17, !s18) [34, TakeMinLength] {
  (%elt11, %elt12) =>
    !46 = Cast(%elt12) [Int64]
    InsertFields %elt11 (__col_uid: !46)
  }
  !47 = ToArray(!s19)
  InsertFields %g (cols: !47)
}
!ht3 = TableMapRows(!ht2) { (%g2, %row) =>
  %48 = GetField(%row) [entries]
  !49 = IsNA(%48)
  If !49 then {
    !50 = Str ["missing en..."]
    Die(!50) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, -1]
  } else {
    !51 = GetField(%g2) [cols]
    %52 = ArrayLen(!51)
    %53 = ArrayLen(%48)
    !54 = ApplyComparisonOp(%53, %52) [NEQWithNA]
    If !54 then {
      !55 = Str ["length mis..."] 
      !56 = Apply(%53) [-1, str, (), String]
      !57 = Apply(!55, !56) [-1, concat, (), String] 
      !58 = Str [" entries, "]
      !59 = Apply(!57, !58) [-1, concat, (), String] 
      !60 = Apply(%52) [-1, str, (), String]
      !61 = Apply(!59, !60) [-1, concat, (), String] 
      !62 = Str [" cols, at "]
      !63 = Apply(!61, !62) [-1, concat, (), String] 
      !64 = SelectFields(%row) [(locus alleles)]
      !65 = Apply(!64) [-1, str, (), String]
      !66 = Apply(!63, !65) [-1, concat, (), String]
      Die(!66) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, -1]
    } else { %row }
  }
}
!ht4 = TableRename(!ht3) [("entries"), 
(
  "the entries! [877f12a8827e18f61222c6c8c5fb04a8]"), 
("cols"), ("__cols")]
!ht5 = TableMapRows(!ht4) { (%g3, %row2) =>
  !67 = SelectFields(%row2) [(locus alleles)] 
  !68 = GetField(%row2) [`the entries! [877f12a8827e18f61222c6c8c5fb04a8]`]
  !s20 = ToStream(!68) [False] 
  !69 = GetField(%g3) [__cols]
  !s21 = ToStream(!69) [False]
  !s22 = StreamZip(!s20, !s21) [-1, AssumeSameLength] {
  (%elt13, %elt14) =>
    %70 = GetField(%row2) [__row_uid]
    !71 = GetField(%row2) [af] 
    !72 = GetField(%elt14) [pop]
    %73 = ApplyIR(!71, !72) [10, indexArray, 
    (), Float64]
    !74 = F64 [1.0]
    %75 = ApplyBinaryPrimOp(!74, %73) [Subtract]
    !76 = F64 [2.0]
    !77 = Apply(%75, !76) [13, pow, (), Float64] 
    !78 = F64 [2.0]
    !79 = ApplyBinaryPrimOp(!78, %73) [Multiply]
    !80 = ApplyBinaryPrimOp(!79, %75) [Multiply] 
    !81 = F64 [2.0]
    !82 = Apply(%73, !81) [16, pow, (), Float64]
    !83 = MakeArray(!77, !80, !82) [Array[Float64]] 
    !84 = RNGStateLiteral 
    !85 = GetTupleElement(%70) [0] 
    !86 = GetTupleElement(%70) [1] 
    !87 = GetField(%elt14) [__col_uid]
    !88 = MakeTuple(!85, !86, !87) [(0 1 2)]
    !89 = RNGSplit(!84, !88)
    !90 = ApplySeeded(!83, !89) [rand_cat, 2, Int32]
    !91 = Apply(!90) [17, UnphasedDiploidGtIndexCall, 
    (), Call]
    InsertFields %elt13 (GT: !91)
  }
  !92 = ToArray(!s22)
  InsertFields !67 (the entries! [877f12a8827e18f61222c6c8c5fb04a8]: !92)
}
!ht6 = TableMapGlobals(!ht5) { (%g4) =>
  SelectFields(%g4) [()]
}
!ht7 = TableRename(!ht6) [
(
  "the entries! [877f12a8827e18f61222c6c8c5fb04a8]"), 
("entries"), (), ()]
!ht8 = TableOrderBy(!ht7) [(Alocus Aalleles)]
!ht9 = TableMapRows(!ht8) { (%g5, %row3) =>
  %93 = GetField(%row3) [entries]
  !94 = SelectFields(%row3) [(locus alleles)] 
  !c0_7 = I32 [0]
  !95 = ArrayRef(%93, !c0_7) [24] 
  !c1_8 = I32 [1]
  !96 = ArrayRef(%93, !c1_8) [25] 
  !c2 = I32 [2]
  !97 = ArrayRef(%93, !c2) [26] 
  !c3 = I32 [3]
  !98 = ArrayRef(%93, !c3) [27]
  InsertFields !94 (0: !95, 1: !96, 2: !97, 3: !98)
}
!ht10 = TableOrderBy(!ht9) [()]
!ht11 = TableHead(!ht10) [11]
!ht12 = TableMapRows(!ht11) { (%g6, %row4) =>
  %99 = SelectFields(%row4) [(locus alleles)]
  !100 = SelectFields(%99) [()] 
  !101 = GetField(%99) [locus]
  !102 = ApplySpecial(!101) [28, showStr, 
  (), String] 
  !103 = GetField(%99) [alleles]
  !104 = ApplySpecial(!103) [29, showStr, 
  (), String] 
  !105 = GetField(%row4) [`0`]
  !106 = GetField(!105) [GT]
  !107 = ApplySpecial(!106) [30, showStr, 
  (), String] 
  !108 = GetField(%row4) [`1`]
  !109 = GetField(!108) [GT]
  !110 = ApplySpecial(!109) [31, showStr, 
  (), String] 
  !111 = GetField(%row4) [`2`]
  !112 = GetField(!111) [GT]
  !113 = ApplySpecial(!112) [32, showStr, 
  (), String] 
  !114 = GetField(%row4) [`3`]
  !115 = GetField(!114) [GT]
  !116 = ApplySpecial(!115) [33, showStr, 
  (), String]
  InsertFields !100 (locus: !102, alleles: !104, 0.GT: !107, 1.GT: !110, 2.GT: !113, 3.GT: !116)
}
%117 = TableCollect(!ht12)
GetField(%117) [rows]

2023-11-17 18:07:57.233 : INFO: initial IR: IR size 281: 

!1 = EncodedLiteral [Array[Tuple[Int32,Int32]]]
!s = ToStream(!1) [False] 
!c0 = I32 [0] 
!c1 = I32 [1]
!s2 = StreamIota(!c0, !c1) [False]
!s3 = StreamZip(!s, !s2) [35, TakeMinLength] {
(%elt, %elt2) =>
  !2 = Cast(%elt2) [Int64]
  MakeTuple(!2, %elt) [(0 1)]
} 
%3 = RNGStateLiteral
!c0_2 = I32 [0] 
!c10 = I32 [10] 
!c1_2 = I32 [1]
!s4 = StreamRange(!c0_2, !c10, !c1_2) [1, False]
!s7 = StreamMap(!s4) { (%elt3) =>
  !4 = Cast(%elt3) [Int64]
  %5 = MakeTuple(!4, %elt3) [(0 1)]
  !6 = GetTupleElement(%5) [1] 
  !7 = EncodedLiteral [Array[Int32]]
  !s5 = ToStream(!7) [False]
  !s6 = StreamMap(!s5) { (%elt4) =>
    Cast(%elt4) [Float64]
  }
  !8 = ToArray(!s6) 
  !9 = GetTupleElement(%5) [0]
  !10 = RNGSplit(%3, !9)
  !11 = ApplySeeded(!8, !10) [rand_cat, 0, Int32]
  MakeStruct(sample_idx: !6, pop: !11)
}
!12 = ToArray(!s7)
!13 = MakeStruct(cols: !12) 
%14 = GetTupleElement(%undefined_ref) [0]
!c0_3 = I32 [0] 
!c1_3 = I32 [1]
!s8 = StreamIota(!c0_3, !c1_3) [False] 
!15 = RNGStateLiteral
%16 = RNGSplit(!15, %14)
%17 = GetTupleElement(%undefined_ref2) [1]
!18 = GetTupleElement(%17) [0] 
!19 = GetTupleElement(%17) [1] 
!c1_4 = I32 [1]
!s9 = StreamRange(!18, !19, !c1_4) [3, False]
!s15 = StreamMap(!s9) { (%elt5) =>
  !20 = Cast(%elt5) [Int64]
  %21 = MakeTuple(!20, %elt5) [(0 1)]
  !22 = GetTupleElement(%21) [0]
  %23 = RNGSplit(%16, !22)
  !24 = F64 [0.1] 
  !25 = F64 [0.9]
  %26 = ApplySeeded(!24, !25, %23) [rand_unif, -1, Float64]
  !27 = GetTupleElement(%21) [1]
  !28 = Cast(!27) [Int64]
  !29 = Apply(!28) [5, globalPosToLocus, 
  (), Locus(GRCh37)] 
  !30 = EncodedLiteral [Array[String]] 
  !31 = EncodedLiteral [Array[Float64]]
  !s10 = ToStream(!31) [False] 
  !c0_4 = I32 [0] 
  !c1_5 = I32 [1]
  !s11 = StreamIota(!c0_4, !c1_5) [False]
  !s12 = StreamZip(!s10, !s11) [7, TakeMinLength] {
  (%elt6, %elt7) =>
    !32 = Cast(%elt7) [Int64]
    %33 = MakeTuple(!32, %elt6) [(0 1)]
    %34 = GetTupleElement(%33) [1]
    !35 = ApplyBinaryPrimOp(%26, %34) [Multiply] 
    !36 = F64 [1.0]
    !37 = ApplyBinaryPrimOp(!36, %26) [Subtract]
    !38 = ApplyBinaryPrimOp(!37, %34) [Multiply] 
    !39 = GetTupleElement(%33) [0]
    !40 = RNGSplit(%23, !39)
    ApplySeeded(!35, !38, !40) [rand_beta, 1, Float64]
  }
  !41 = ToArray(!s12) 
  !c0_5 = I32 [0] 
  !c10_2 = I32 [10] 
  !c1_6 = I32 [1]
  !s13 = StreamRange(!c0_5, !c10_2, !c1_6) [8, False]
  !s14 = StreamMap(!s13) { (%elt8) =>
    Literal [Struct{}, <literal value>]
  }
  !42 = ToArray(!s14)
  MakeStruct(locus: !29, alleles: !30, af: !41, entries: !42)
}
!s16 = StreamZip(!s8, !s15) [36, TakeMinLength] {
(%elt9, %elt10) =>
  !43 = Cast(%elt9) [Int64]
  !44 = MakeTuple(%14, !43) [(0 1)]
  InsertFields %elt10 (__row_uid: !44)
}
!ht = TableGen(!s3, !13, !s16) [__uid_42, globals___uid_8, (Partitioner Struct{locus:Locus(GRCh37),alleles:Array[String]}"[{\"start\":{\"locus\":{\"contig\":\"1\",\"position\":1},\"alleles\":[\"A\",\"C\"]},\"end\":{\"locus\":{\"contig\":\"1\",\"position\":13},\"alleles\":[\"A\",\"C\"]},\"includeStart\":true,\"includeEnd\":false},{\"start\":{\"locus\":{\"contig\":\"1\",\"position\":13},\"alleles\":[\"A\",\"C\"]},\"end\":{\"locus\":{\"contig\":\"1\",\"position\":26},\"alleles\":[\"A\",\"C\"]},\"includeStart\":true,\"includeEnd\":false},{\"start\":{\"locus\":{\"contig\":\"1\",\"position\":26},\"alleles\":[\"A\",\"C\"]},\"end\":{\"locus\":{\"contig\":\"1\",\"position\":38},\"alleles\":[\"A\",\"C\"]},\"includeStart\":true,\"includeEnd\":false},{\"start\":{\"locus\":{\"contig\":\"1\",\"position\":38},\"alleles\":[\"A\",\"C\"]},\"end\":{\"locus\":{\"contig\":\"1\",\"position\":51},\"alleles\":[\"A\",\"C\"]},\"includeStart\":true,\"includeEnd\":false},{\"start\":{\"locus\":{\"contig\":\"1\",\"position\":51},\"alleles\":[\"A\",\"C\"]},\"end\":{\"locus\":{\"contig\":\"1\",\"position\":63},\"alleles\":[\"A\",\"C\"]},\"includeStart\":true,\"includeEnd\":false},{\"start\":{\"locus\":{\"contig\":\"1\",\"position\":63},\"alleles\":[\"A\",\"C\"]},\"end\":{\"locus\":{\"contig\":\"1\",\"position\":76},\"alleles\":[\"A\",\"C\"]},\"includeStart\":true,\"includeEnd\":false},{\"start\":{\"locus\":{\"contig\":\"1\",\"position\":76},\"alleles\":[\"A\",\"C\"]},\"end\":{\"locus\":{\"contig\":\"1\",\"position\":88},\"alleles\":[\"A\",\"C\"]},\"includeStart\":true,\"includeEnd\":false},{\"start\":{\"locus\":{\"contig\":\"1\",\"position\":88},\"alleles\":[\"A\",\"C\"]},\"end\":{\"locus\":{\"contig\":\"1\",\"position\":101},\"alleles\":[\"A\",\"C\"]},\"includeStart\":true,\"includeEnd\":false}]"), 9]
!ht2 = TableMapGlobals(!ht) { (%g) =>
  !45 = GetField(%g) [cols]
  !s17 = ToStream(!45) [False] 
  !c0_6 = I32 [0] 
  !c1_7 = I32 [1]
  !s18 = StreamIota(!c0_6, !c1_7) [False]
  !s19 = StreamZip(!s17, !s18) [34, TakeMinLength] {
  (%elt11, %elt12) =>
    !46 = Cast(%elt12) [Int64]
    InsertFields %elt11 (__col_uid: !46)
  }
  !47 = ToArray(!s19)
  InsertFields %g (cols: !47)
}
!ht3 = TableMapRows(!ht2) { (%g2, %row) =>
  %48 = GetField(%row) [entries]
  !49 = IsNA(%48)
  If !49 then {
    !50 = Str ["missing en..."]
    Die(!50) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, -1]
  } else {
    !51 = GetField(%g2) [cols]
    %52 = ArrayLen(!51)
    %53 = ArrayLen(%48)
    !54 = ApplyComparisonOp(%53, %52) [NEQWithNA]
    If !54 then {
      !55 = Str ["length mis..."] 
      !56 = Apply(%53) [-1, str, (), String]
      !57 = Apply(!55, !56) [-1, concat, (), String] 
      !58 = Str [" entries, "]
      !59 = Apply(!57, !58) [-1, concat, (), String] 
      !60 = Apply(%52) [-1, str, (), String]
      !61 = Apply(!59, !60) [-1, concat, (), String] 
      !62 = Str [" cols, at "]
      !63 = Apply(!61, !62) [-1, concat, (), String] 
      !64 = SelectFields(%row) [(locus alleles)]
      !65 = Apply(!64) [-1, str, (), String]
      !66 = Apply(!63, !65) [-1, concat, (), String]
      Die(!66) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, -1]
    } else { %row }
  }
}
!ht4 = TableRename(!ht3) [("entries"), 
(
  "the entries! [877f12a8827e18f61222c6c8c5fb04a8]"), 
("cols"), ("__cols")]
!ht5 = TableMapRows(!ht4) { (%g3, %row2) =>
  !67 = SelectFields(%row2) [(locus alleles)] 
  !68 = GetField(%row2) [`the entries! [877f12a8827e18f61222c6c8c5fb04a8]`]
  !s20 = ToStream(!68) [False] 
  !69 = GetField(%g3) [__cols]
  !s21 = ToStream(!69) [False]
  !s22 = StreamZip(!s20, !s21) [-1, AssumeSameLength] {
  (%elt13, %elt14) =>
    %70 = GetField(%row2) [__row_uid]
    !71 = GetField(%row2) [af] 
    !72 = GetField(%elt14) [pop]
    %73 = ApplyIR(!71, !72) [10, indexArray, 
    (), Float64]
    !74 = F64 [1.0]
    %75 = ApplyBinaryPrimOp(!74, %73) [Subtract]
    !76 = F64 [2.0]
    !77 = Apply(%75, !76) [13, pow, (), Float64] 
    !78 = F64 [2.0]
    !79 = ApplyBinaryPrimOp(!78, %73) [Multiply]
    !80 = ApplyBinaryPrimOp(!79, %75) [Multiply] 
    !81 = F64 [2.0]
    !82 = Apply(%73, !81) [16, pow, (), Float64]
    !83 = MakeArray(!77, !80, !82) [Array[Float64]] 
    !84 = RNGStateLiteral 
    !85 = GetTupleElement(%70) [0] 
    !86 = GetTupleElement(%70) [1] 
    !87 = GetField(%elt14) [__col_uid]
    !88 = MakeTuple(!85, !86, !87) [(0 1 2)]
    !89 = RNGSplit(!84, !88)
    !90 = ApplySeeded(!83, !89) [rand_cat, 2, Int32]
    !91 = Apply(!90) [17, UnphasedDiploidGtIndexCall, 
    (), Call]
    InsertFields %elt13 (GT: !91)
  }
  !92 = ToArray(!s22)
  InsertFields !67 (the entries! [877f12a8827e18f61222c6c8c5fb04a8]: !92)
}
!ht6 = TableMapGlobals(!ht5) { (%g4) =>
  SelectFields(%g4) [()]
}
!ht7 = TableRename(!ht6) [
(
  "the entries! [877f12a8827e18f61222c6c8c5fb04a8]"), 
("entries"), (), ()]
!ht8 = TableOrderBy(!ht7) [(Alocus Aalleles)]
!ht9 = TableMapRows(!ht8) { (%g5, %row3) =>
  %93 = GetField(%row3) [entries]
  !94 = SelectFields(%row3) [(locus alleles)] 
  !c0_7 = I32 [0]
  !95 = ArrayRef(%93, !c0_7) [24] 
  !c1_8 = I32 [1]
  !96 = ArrayRef(%93, !c1_8) [25] 
  !c2 = I32 [2]
  !97 = ArrayRef(%93, !c2) [26] 
  !c3 = I32 [3]
  !98 = ArrayRef(%93, !c3) [27]
  InsertFields !94 (0: !95, 1: !96, 2: !97, 3: !98)
}
!ht10 = TableOrderBy(!ht9) [()]
!ht11 = TableHead(!ht10) [11]
!ht12 = TableMapRows(!ht11) { (%g6, %row4) =>
  %99 = SelectFields(%row4) [(locus alleles)]
  !100 = SelectFields(%99) [()] 
  !101 = GetField(%99) [locus]
  !102 = ApplySpecial(!101) [28, showStr, 
  (), String] 
  !103 = GetField(%99) [alleles]
  !104 = ApplySpecial(!103) [29, showStr, 
  (), String] 
  !105 = GetField(%row4) [`0`]
  !106 = GetField(!105) [GT]
  !107 = ApplySpecial(!106) [30, showStr, 
  (), String] 
  !108 = GetField(%row4) [`1`]
  !109 = GetField(!108) [GT]
  !110 = ApplySpecial(!109) [31, showStr, 
  (), String] 
  !111 = GetField(%row4) [`2`]
  !112 = GetField(!111) [GT]
  !113 = ApplySpecial(!112) [32, showStr, 
  (), String] 
  !114 = GetField(%row4) [`3`]
  !115 = GetField(!114) [GT]
  !116 = ApplySpecial(!115) [33, showStr, 
  (), String]
  InsertFields !100 (locus: !102, alleles: !104, 0.GT: !107, 1.GT: !110, 2.GT: !113, 3.GT: !116)
}
TableCollect(!ht12)

2023-11-17 18:07:57.239 : INFO: after LowerAndExecuteShuffles: IR size 281: 

!1 = EncodedLiteral [Array[Tuple[Int32,Int32]]]
!s = ToStream(!1) [False] 
!c0 = I32 [0] 
!c1 = I32 [1]
!s2 = StreamIota(!c0, !c1) [False]
!s3 = StreamZip(!s, !s2) [35, TakeMinLength] {
(%elt, %elt2) =>
  !2 = Cast(%elt2) [Int64]
  MakeTuple(!2, %elt) [(0 1)]
} 
%3 = RNGStateLiteral
!c0_2 = I32 [0] 
!c10 = I32 [10] 
!c1_2 = I32 [1]
!s4 = StreamRange(!c0_2, !c10, !c1_2) [1, False]
!s7 = StreamMap(!s4) { (%elt3) =>
  !4 = Cast(%elt3) [Int64]
  %5 = MakeTuple(!4, %elt3) [(0 1)]
  !6 = GetTupleElement(%5) [1] 
  !7 = EncodedLiteral [Array[Int32]]
  !s5 = ToStream(!7) [False]
  !s6 = StreamMap(!s5) { (%elt4) =>
    Cast(%elt4) [Float64]
  }
  !8 = ToArray(!s6) 
  !9 = GetTupleElement(%5) [0]
  !10 = RNGSplit(%3, !9)
  !11 = ApplySeeded(!8, !10) [rand_cat, 0, Int32]
  MakeStruct(sample_idx: !6, pop: !11)
}
!12 = ToArray(!s7)
!13 = MakeStruct(cols: !12) 
%14 = GetTupleElement(%undefined_ref) [0]
!c0_3 = I32 [0] 
!c1_3 = I32 [1]
!s8 = StreamIota(!c0_3, !c1_3) [False] 
!15 = RNGStateLiteral
%16 = RNGSplit(!15, %14)
%17 = GetTupleElement(%undefined_ref2) [1]
!18 = GetTupleElement(%17) [0] 
!19 = GetTupleElement(%17) [1] 
!c1_4 = I32 [1]
!s9 = StreamRange(!18, !19, !c1_4) [3, False]
!s15 = StreamMap(!s9) { (%elt5) =>
  !20 = Cast(%elt5) [Int64]
  %21 = MakeTuple(!20, %elt5) [(0 1)]
  !22 = GetTupleElement(%21) [0]
  %23 = RNGSplit(%16, !22)
  !24 = F64 [0.1] 
  !25 = F64 [0.9]
  %26 = ApplySeeded(!24, !25, %23) [rand_unif, -1, Float64]
  !27 = GetTupleElement(%21) [1]
  !28 = Cast(!27) [Int64]
  !29 = Apply(!28) [5, globalPosToLocus, 
  (), Locus(GRCh37)] 
  !30 = EncodedLiteral [Array[String]] 
  !31 = EncodedLiteral [Array[Float64]]
  !s10 = ToStream(!31) [False] 
  !c0_4 = I32 [0] 
  !c1_5 = I32 [1]
  !s11 = StreamIota(!c0_4, !c1_5) [False]
  !s12 = StreamZip(!s10, !s11) [7, TakeMinLength] {
  (%elt6, %elt7) =>
    !32 = Cast(%elt7) [Int64]
    %33 = MakeTuple(!32, %elt6) [(0 1)]
    %34 = GetTupleElement(%33) [1]
    !35 = ApplyBinaryPrimOp(%26, %34) [Multiply] 
    !36 = F64 [1.0]
    !37 = ApplyBinaryPrimOp(!36, %26) [Subtract]
    !38 = ApplyBinaryPrimOp(!37, %34) [Multiply] 
    !39 = GetTupleElement(%33) [0]
    !40 = RNGSplit(%23, !39)
    ApplySeeded(!35, !38, !40) [rand_beta, 1, Float64]
  }
  !41 = ToArray(!s12) 
  !c0_5 = I32 [0] 
  !c10_2 = I32 [10] 
  !c1_6 = I32 [1]
  !s13 = StreamRange(!c0_5, !c10_2, !c1_6) [8, False]
  !s14 = StreamMap(!s13) { (%elt8) =>
    Literal [Struct{}, <literal value>]
  }
  !42 = ToArray(!s14)
  MakeStruct(locus: !29, alleles: !30, af: !41, entries: !42)
}
!s16 = StreamZip(!s8, !s15) [36, TakeMinLength] {
(%elt9, %elt10) =>
  !43 = Cast(%elt9) [Int64]
  !44 = MakeTuple(%14, !43) [(0 1)]
  InsertFields %elt10 (__row_uid: !44)
}
!ht = TableGen(!s3, !13, !s16) [__uid_42, globals___uid_8, (Partitioner Struct{locus:Locus(GRCh37),alleles:Array[String]}"[{\"start\":{\"locus\":{\"contig\":\"1\",\"position\":1},\"alleles\":[\"A\",\"C\"]},\"end\":{\"locus\":{\"contig\":\"1\",\"position\":13},\"alleles\":[\"A\",\"C\"]},\"includeStart\":true,\"includeEnd\":false},{\"start\":{\"locus\":{\"contig\":\"1\",\"position\":13},\"alleles\":[\"A\",\"C\"]},\"end\":{\"locus\":{\"contig\":\"1\",\"position\":26},\"alleles\":[\"A\",\"C\"]},\"includeStart\":true,\"includeEnd\":false},{\"start\":{\"locus\":{\"contig\":\"1\",\"position\":26},\"alleles\":[\"A\",\"C\"]},\"end\":{\"locus\":{\"contig\":\"1\",\"position\":38},\"alleles\":[\"A\",\"C\"]},\"includeStart\":true,\"includeEnd\":false},{\"start\":{\"locus\":{\"contig\":\"1\",\"position\":38},\"alleles\":[\"A\",\"C\"]},\"end\":{\"locus\":{\"contig\":\"1\",\"position\":51},\"alleles\":[\"A\",\"C\"]},\"includeStart\":true,\"includeEnd\":false},{\"start\":{\"locus\":{\"contig\":\"1\",\"position\":51},\"alleles\":[\"A\",\"C\"]},\"end\":{\"locus\":{\"contig\":\"1\",\"position\":63},\"alleles\":[\"A\",\"C\"]},\"includeStart\":true,\"includeEnd\":false},{\"start\":{\"locus\":{\"contig\":\"1\",\"position\":63},\"alleles\":[\"A\",\"C\"]},\"end\":{\"locus\":{\"contig\":\"1\",\"position\":76},\"alleles\":[\"A\",\"C\"]},\"includeStart\":true,\"includeEnd\":false},{\"start\":{\"locus\":{\"contig\":\"1\",\"position\":76},\"alleles\":[\"A\",\"C\"]},\"end\":{\"locus\":{\"contig\":\"1\",\"position\":88},\"alleles\":[\"A\",\"C\"]},\"includeStart\":true,\"includeEnd\":false},{\"start\":{\"locus\":{\"contig\":\"1\",\"position\":88},\"alleles\":[\"A\",\"C\"]},\"end\":{\"locus\":{\"contig\":\"1\",\"position\":101},\"alleles\":[\"A\",\"C\"]},\"includeStart\":true,\"includeEnd\":false}]"), 9]
!ht2 = TableMapGlobals(!ht) { (%g) =>
  !45 = GetField(%g) [cols]
  !s17 = ToStream(!45) [False] 
  !c0_6 = I32 [0] 
  !c1_7 = I32 [1]
  !s18 = StreamIota(!c0_6, !c1_7) [False]
  !s19 = StreamZip(!s17, !s18) [34, TakeMinLength] {
  (%elt11, %elt12) =>
    !46 = Cast(%elt12) [Int64]
    InsertFields %elt11 (__col_uid: !46)
  }
  !47 = ToArray(!s19)
  InsertFields %g (cols: !47)
}
!ht3 = TableMapRows(!ht2) { (%g2, %row) =>
  %48 = GetField(%row) [entries]
  !49 = IsNA(%48)
  If !49 then {
    !50 = Str ["missing en..."]
    Die(!50) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, -1]
  } else {
    !51 = GetField(%g2) [cols]
    %52 = ArrayLen(!51)
    %53 = ArrayLen(%48)
    !54 = ApplyComparisonOp(%53, %52) [NEQWithNA]
    If !54 then {
      !55 = Str ["length mis..."] 
      !56 = Apply(%53) [-1, str, (), String]
      !57 = Apply(!55, !56) [-1, concat, (), String] 
      !58 = Str [" entries, "]
      !59 = Apply(!57, !58) [-1, concat, (), String] 
      !60 = Apply(%52) [-1, str, (), String]
      !61 = Apply(!59, !60) [-1, concat, (), String] 
      !62 = Str [" cols, at "]
      !63 = Apply(!61, !62) [-1, concat, (), String] 
      !64 = SelectFields(%row) [(locus alleles)]
      !65 = Apply(!64) [-1, str, (), String]
      !66 = Apply(!63, !65) [-1, concat, (), String]
      Die(!66) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, -1]
    } else { %row }
  }
}
!ht4 = TableRename(!ht3) [("entries"), 
(
  "the entries! [877f12a8827e18f61222c6c8c5fb04a8]"), 
("cols"), ("__cols")]
!ht5 = TableMapRows(!ht4) { (%g3, %row2) =>
  !67 = SelectFields(%row2) [(locus alleles)] 
  !68 = GetField(%row2) [`the entries! [877f12a8827e18f61222c6c8c5fb04a8]`]
  !s20 = ToStream(!68) [False] 
  !69 = GetField(%g3) [__cols]
  !s21 = ToStream(!69) [False]
  !s22 = StreamZip(!s20, !s21) [-1, AssumeSameLength] {
  (%elt13, %elt14) =>
    %70 = GetField(%row2) [__row_uid]
    !71 = GetField(%row2) [af] 
    !72 = GetField(%elt14) [pop]
    %73 = ApplyIR(!71, !72) [10, indexArray, 
    (), Float64]
    !74 = F64 [1.0]
    %75 = ApplyBinaryPrimOp(!74, %73) [Subtract]
    !76 = F64 [2.0]
    !77 = Apply(%75, !76) [13, pow, (), Float64] 
    !78 = F64 [2.0]
    !79 = ApplyBinaryPrimOp(!78, %73) [Multiply]
    !80 = ApplyBinaryPrimOp(!79, %75) [Multiply] 
    !81 = F64 [2.0]
    !82 = Apply(%73, !81) [16, pow, (), Float64]
    !83 = MakeArray(!77, !80, !82) [Array[Float64]] 
    !84 = RNGStateLiteral 
    !85 = GetTupleElement(%70) [0] 
    !86 = GetTupleElement(%70) [1] 
    !87 = GetField(%elt14) [__col_uid]
    !88 = MakeTuple(!85, !86, !87) [(0 1 2)]
    !89 = RNGSplit(!84, !88)
    !90 = ApplySeeded(!83, !89) [rand_cat, 2, Int32]
    !91 = Apply(!90) [17, UnphasedDiploidGtIndexCall, 
    (), Call]
    InsertFields %elt13 (GT: !91)
  }
  !92 = ToArray(!s22)
  InsertFields !67 (the entries! [877f12a8827e18f61222c6c8c5fb04a8]: !92)
}
!ht6 = TableMapGlobals(!ht5) { (%g4) =>
  SelectFields(%g4) [()]
}
!ht7 = TableRename(!ht6) [
(
  "the entries! [877f12a8827e18f61222c6c8c5fb04a8]"), 
("entries"), (), ()]
!ht8 = TableOrderBy(!ht7) [(Alocus Aalleles)]
!ht9 = TableMapRows(!ht8) { (%g5, %row3) =>
  %93 = GetField(%row3) [entries]
  !94 = SelectFields(%row3) [(locus alleles)] 
  !c0_7 = I32 [0]
  !95 = ArrayRef(%93, !c0_7) [24] 
  !c1_8 = I32 [1]
  !96 = ArrayRef(%93, !c1_8) [25] 
  !c2 = I32 [2]
  !97 = ArrayRef(%93, !c2) [26] 
  !c3 = I32 [3]
  !98 = ArrayRef(%93, !c3) [27]
  InsertFields !94 (0: !95, 1: !96, 2: !97, 3: !98)
}
!ht10 = TableOrderBy(!ht9) [()]
!ht11 = TableHead(!ht10) [11]
!ht12 = TableMapRows(!ht11) { (%g6, %row4) =>
  %99 = SelectFields(%row4) [(locus alleles)]
  !100 = SelectFields(%99) [()] 
  !101 = GetField(%99) [locus]
  !102 = ApplySpecial(!101) [28, showStr, 
  (), String] 
  !103 = GetField(%99) [alleles]
  !104 = ApplySpecial(!103) [29, showStr, 
  (), String] 
  !105 = GetField(%row4) [`0`]
  !106 = GetField(!105) [GT]
  !107 = ApplySpecial(!106) [30, showStr, 
  (), String] 
  !108 = GetField(%row4) [`1`]
  !109 = GetField(!108) [GT]
  !110 = ApplySpecial(!109) [31, showStr, 
  (), String] 
  !111 = GetField(%row4) [`2`]
  !112 = GetField(!111) [GT]
  !113 = ApplySpecial(!112) [32, showStr, 
  (), String] 
  !114 = GetField(%row4) [`3`]
  !115 = GetField(!114) [GT]
  !116 = ApplySpecial(!115) [33, showStr, 
  (), String]
  InsertFields !100 (locus: !102, alleles: !104, 0.GT: !107, 1.GT: !110, 2.GT: !113, 3.GT: !116)
}
TableCollect(!ht12)

2023-11-17 18:07:57.304 : INFO: after optimize: relationalLowerer, after LowerAndExecuteShuffles: IR size 281: 

!1 = EncodedLiteral [Array[Tuple[Int32,Int32]]]
!s = ToStream(!1) [False] 
!c0 = I32 [0] 
!c1 = I32 [1]
!s2 = StreamIota(!c0, !c1) [False]
!s3 = StreamZip(!s, !s2) [35, TakeMinLength] {
(%elt, %elt2) =>
  !2 = Cast(%elt2) [Int64]
  MakeTuple(!2, %elt) [(0 1)]
} 
%3 = RNGStateLiteral
!c0_2 = I32 [0] 
!c10 = I32 [10] 
!c1_2 = I32 [1]
!s4 = StreamRange(!c0_2, !c10, !c1_2) [1, False]
!s7 = StreamMap(!s4) { (%elt3) =>
  !4 = Cast(%elt3) [Int64]
  %5 = MakeTuple(!4, %elt3) [(0 1)]
  !6 = GetTupleElement(%5) [1] 
  !7 = EncodedLiteral [Array[Int32]]
  !s5 = ToStream(!7) [False]
  !s6 = StreamMap(!s5) { (%elt4) =>
    Cast(%elt4) [Float64]
  }
  !8 = ToArray(!s6) 
  !9 = GetTupleElement(%5) [0]
  !10 = RNGSplit(%3, !9)
  !11 = ApplySeeded(!8, !10) [rand_cat, 0, Int32]
  MakeStruct(sample_idx: !6, pop: !11)
}
!12 = ToArray(!s7)
!13 = MakeStruct(cols: !12) 
%14 = GetTupleElement(%undefined_ref) [0]
!c0_3 = I32 [0] 
!c1_3 = I32 [1]
!s8 = StreamIota(!c0_3, !c1_3) [False] 
!15 = RNGStateLiteral
%16 = RNGSplit(!15, %14)
%17 = GetTupleElement(%undefined_ref2) [1]
!18 = GetTupleElement(%17) [0] 
!19 = GetTupleElement(%17) [1] 
!c1_4 = I32 [1]
!s9 = StreamRange(!18, !19, !c1_4) [3, False]
!s15 = StreamMap(!s9) { (%elt5) =>
  !20 = Cast(%elt5) [Int64]
  %21 = MakeTuple(!20, %elt5) [(0 1)]
  !22 = GetTupleElement(%21) [0]
  %23 = RNGSplit(%16, !22)
  !24 = F64 [0.1] 
  !25 = F64 [0.9]
  %26 = ApplySeeded(!24, !25, %23) [rand_unif, -1, Float64]
  !27 = GetTupleElement(%21) [1]
  !28 = Cast(!27) [Int64]
  !29 = Apply(!28) [5, globalPosToLocus, 
  (), Locus(GRCh37)] 
  !30 = EncodedLiteral [Array[String]] 
  !31 = EncodedLiteral [Array[Float64]]
  !s10 = ToStream(!31) [False] 
  !c0_4 = I32 [0] 
  !c1_5 = I32 [1]
  !s11 = StreamIota(!c0_4, !c1_5) [False]
  !s12 = StreamZip(!s10, !s11) [7, TakeMinLength] {
  (%elt6, %elt7) =>
    !32 = Cast(%elt7) [Int64]
    %33 = MakeTuple(!32, %elt6) [(0 1)]
    %34 = GetTupleElement(%33) [1]
    !35 = ApplyBinaryPrimOp(%26, %34) [Multiply] 
    !36 = F64 [1.0]
    !37 = ApplyBinaryPrimOp(!36, %26) [Subtract]
    !38 = ApplyBinaryPrimOp(!37, %34) [Multiply] 
    !39 = GetTupleElement(%33) [0]
    !40 = RNGSplit(%23, !39)
    ApplySeeded(!35, !38, !40) [rand_beta, 1, Float64]
  }
  !41 = ToArray(!s12) 
  !c0_5 = I32 [0] 
  !c10_2 = I32 [10] 
  !c1_6 = I32 [1]
  !s13 = StreamRange(!c0_5, !c10_2, !c1_6) [8, False]
  !s14 = StreamMap(!s13) { (%elt8) =>
    Literal [Struct{}, <literal value>]
  }
  !42 = ToArray(!s14)
  MakeStruct(locus: !29, alleles: !30, af: !41, entries: !42)
}
!s16 = StreamZip(!s8, !s15) [36, TakeMinLength] {
(%elt9, %elt10) =>
  !43 = Cast(%elt9) [Int64]
  !44 = MakeTuple(%14, !43) [(0 1)]
  InsertFields %elt10 (__row_uid: !44)
}
!ht = TableGen(!s3, !13, !s16) [__uid_42, globals___uid_8, (Partitioner Struct{locus:Locus(GRCh37),alleles:Array[String]}"[{\"start\":{\"locus\":{\"contig\":\"1\",\"position\":1},\"alleles\":[\"A\",\"C\"]},\"end\":{\"locus\":{\"contig\":\"1\",\"position\":13},\"alleles\":[\"A\",\"C\"]},\"includeStart\":true,\"includeEnd\":false},{\"start\":{\"locus\":{\"contig\":\"1\",\"position\":13},\"alleles\":[\"A\",\"C\"]},\"end\":{\"locus\":{\"contig\":\"1\",\"position\":26},\"alleles\":[\"A\",\"C\"]},\"includeStart\":true,\"includeEnd\":false},{\"start\":{\"locus\":{\"contig\":\"1\",\"position\":26},\"alleles\":[\"A\",\"C\"]},\"end\":{\"locus\":{\"contig\":\"1\",\"position\":38},\"alleles\":[\"A\",\"C\"]},\"includeStart\":true,\"includeEnd\":false},{\"start\":{\"locus\":{\"contig\":\"1\",\"position\":38},\"alleles\":[\"A\",\"C\"]},\"end\":{\"locus\":{\"contig\":\"1\",\"position\":51},\"alleles\":[\"A\",\"C\"]},\"includeStart\":true,\"includeEnd\":false},{\"start\":{\"locus\":{\"contig\":\"1\",\"position\":51},\"alleles\":[\"A\",\"C\"]},\"end\":{\"locus\":{\"contig\":\"1\",\"position\":63},\"alleles\":[\"A\",\"C\"]},\"includeStart\":true,\"includeEnd\":false},{\"start\":{\"locus\":{\"contig\":\"1\",\"position\":63},\"alleles\":[\"A\",\"C\"]},\"end\":{\"locus\":{\"contig\":\"1\",\"position\":76},\"alleles\":[\"A\",\"C\"]},\"includeStart\":true,\"includeEnd\":false},{\"start\":{\"locus\":{\"contig\":\"1\",\"position\":76},\"alleles\":[\"A\",\"C\"]},\"end\":{\"locus\":{\"contig\":\"1\",\"position\":88},\"alleles\":[\"A\",\"C\"]},\"includeStart\":true,\"includeEnd\":false},{\"start\":{\"locus\":{\"contig\":\"1\",\"position\":88},\"alleles\":[\"A\",\"C\"]},\"end\":{\"locus\":{\"contig\":\"1\",\"position\":101},\"alleles\":[\"A\",\"C\"]},\"includeStart\":true,\"includeEnd\":false}]"), 9]
!ht2 = TableMapGlobals(!ht) { (%g) =>
  !45 = GetField(%g) [cols]
  !s17 = ToStream(!45) [False] 
  !c0_6 = I32 [0] 
  !c1_7 = I32 [1]
  !s18 = StreamIota(!c0_6, !c1_7) [False]
  !s19 = StreamZip(!s17, !s18) [34, TakeMinLength] {
  (%elt11, %elt12) =>
    !46 = Cast(%elt12) [Int64]
    InsertFields %elt11 (__col_uid: !46)
  }
  !47 = ToArray(!s19)
  InsertFields %g (cols: !47)
}
!ht3 = TableMapRows(!ht2) { (%g2, %row) =>
  %48 = GetField(%row) [entries]
  !49 = IsNA(%48)
  If !49 then {
    !50 = Str ["missing en..."]
    Die(!50) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, -1]
  } else {
    !51 = GetField(%g2) [cols]
    %52 = ArrayLen(!51)
    %53 = ArrayLen(%48)
    !54 = ApplyComparisonOp(%53, %52) [NEQWithNA]
    If !54 then {
      !55 = Str ["length mis..."] 
      !56 = Apply(%53) [-1, str, (), String]
      !57 = Apply(!55, !56) [-1, concat, (), String] 
      !58 = Str [" entries, "]
      !59 = Apply(!57, !58) [-1, concat, (), String] 
      !60 = Apply(%52) [-1, str, (), String]
      !61 = Apply(!59, !60) [-1, concat, (), String] 
      !62 = Str [" cols, at "]
      !63 = Apply(!61, !62) [-1, concat, (), String] 
      !64 = SelectFields(%row) [(locus alleles)]
      !65 = Apply(!64) [-1, str, (), String]
      !66 = Apply(!63, !65) [-1, concat, (), String]
      Die(!66) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, -1]
    } else { %row }
  }
}
!ht4 = TableRename(!ht3) [("entries"), 
(
  "the entries! [877f12a8827e18f61222c6c8c5fb04a8]"), 
("cols"), ("__cols")]
!ht5 = TableMapRows(!ht4) { (%g3, %row2) =>
  !67 = SelectFields(%row2) [(locus alleles)] 
  !68 = GetField(%row2) [`the entries! [877f12a8827e18f61222c6c8c5fb04a8]`]
  !s20 = ToStream(!68) [False] 
  !69 = GetField(%g3) [__cols]
  !s21 = ToStream(!69) [False]
  !s22 = StreamZip(!s20, !s21) [-1, AssumeSameLength] {
  (%elt13, %elt14) =>
    %70 = GetField(%row2) [__row_uid]
    !71 = GetField(%row2) [af] 
    !72 = GetField(%elt14) [pop]
    %73 = ApplyIR(!71, !72) [10, indexArray, 
    (), Float64]
    !74 = F64 [1.0]
    %75 = ApplyBinaryPrimOp(!74, %73) [Subtract]
    !76 = F64 [2.0]
    !77 = Apply(%75, !76) [13, pow, (), Float64] 
    !78 = F64 [2.0]
    !79 = ApplyBinaryPrimOp(!78, %73) [Multiply]
    !80 = ApplyBinaryPrimOp(!79, %75) [Multiply] 
    !81 = F64 [2.0]
    !82 = Apply(%73, !81) [16, pow, (), Float64]
    !83 = MakeArray(!77, !80, !82) [Array[Float64]] 
    !84 = RNGStateLiteral 
    !85 = GetTupleElement(%70) [0] 
    !86 = GetTupleElement(%70) [1] 
    !87 = GetField(%elt14) [__col_uid]
    !88 = MakeTuple(!85, !86, !87) [(0 1 2)]
    !89 = RNGSplit(!84, !88)
    !90 = ApplySeeded(!83, !89) [rand_cat, 2, Int32]
    !91 = Apply(!90) [17, UnphasedDiploidGtIndexCall, 
    (), Call]
    InsertFields %elt13 (GT: !91)
  }
  !92 = ToArray(!s22)
  InsertFields !67 (the entries! [877f12a8827e18f61222c6c8c5fb04a8]: !92)
}
!ht6 = TableMapGlobals(!ht5) { (%g4) =>
  SelectFields(%g4) [()]
}
!ht7 = TableRename(!ht6) [
(
  "the entries! [877f12a8827e18f61222c6c8c5fb04a8]"), 
("entries"), (), ()]
!ht8 = TableOrderBy(!ht7) [(Alocus Aalleles)]
!ht9 = TableMapRows(!ht8) { (%g5, %row3) =>
  %93 = GetField(%row3) [entries]
  !94 = SelectFields(%row3) [(locus alleles)] 
  !c0_7 = I32 [0]
  !95 = ArrayRef(%93, !c0_7) [24] 
  !c1_8 = I32 [1]
  !96 = ArrayRef(%93, !c1_8) [25] 
  !c2 = I32 [2]
  !97 = ArrayRef(%93, !c2) [26] 
  !c3 = I32 [3]
  !98 = ArrayRef(%93, !c3) [27]
  InsertFields !94 (0: !95, 1: !96, 2: !97, 3: !98)
}
!ht10 = TableOrderBy(!ht9) [()]
!ht11 = TableHead(!ht10) [11]
!ht12 = TableMapRows(!ht11) { (%g6, %row4) =>
  %99 = SelectFields(%row4) [(locus alleles)]
  !100 = SelectFields(%99) [()] 
  !101 = GetField(%99) [locus]
  !102 = ApplySpecial(!101) [28, showStr, 
  (), String] 
  !103 = GetField(%99) [alleles]
  !104 = ApplySpecial(!103) [29, showStr, 
  (), String] 
  !105 = GetField(%row4) [`0`]
  !106 = GetField(!105) [GT]
  !107 = ApplySpecial(!106) [30, showStr, 
  (), String] 
  !108 = GetField(%row4) [`1`]
  !109 = GetField(!108) [GT]
  !110 = ApplySpecial(!109) [31, showStr, 
  (), String] 
  !111 = GetField(%row4) [`2`]
  !112 = GetField(!111) [GT]
  !113 = ApplySpecial(!112) [32, showStr, 
  (), String] 
  !114 = GetField(%row4) [`3`]
  !115 = GetField(!114) [GT]
  !116 = ApplySpecial(!115) [33, showStr, 
  (), String]
  InsertFields !100 (locus: !102, alleles: !104, 0.GT: !107, 1.GT: !110, 2.GT: !113, 3.GT: !116)
}
TableCollect(!ht12)

2023-11-17 18:07:57.307 : INFO: LowerOrInterpretNonCompilable: whole stage code generation is a go!
2023-11-17 18:07:57.307 : INFO: lowering result: TableCollect
2023-11-17 18:07:57.349 : INFO: initial IR: IR size 580: 

%1 = RNGStateLiteral
!c0 = I32 [0] 
!c10 = I32 [10] 
!c1 = I32 [1]
!s = StreamRange(!c0, !c10, !c1) [1, False]
!s4 = StreamMap(!s) { (%elt) =>
  !2 = Cast(%elt) [Int64]
  %3 = MakeTuple(!2, %elt) [(0 1)]
  !4 = GetTupleElement(%3) [1] 
  !5 = EncodedLiteral [Array[Int32]]
  !s2 = ToStream(!5) [False]
  !s3 = StreamMap(!s2) { (%elt2) =>
    Cast(%elt2) [Float64]
  }
  !6 = ToArray(!s3) 
  !7 = GetTupleElement(%3) [0]
  !8 = RNGSplit(%1, !7)
  !9 = ApplySeeded(!6, !8) [rand_cat, 0, Int32]
  MakeStruct(sample_idx: !4, pop: !9)
}
!10 = ToArray(!s4)
%11 = MakeStruct(cols: !10)
%12 = Ref [__iruid_1048]
!13 = GetField(%12) [cols]
!s5 = ToStream(!13) [False] 
!c0_2 = I32 [0] 
!c1_2 = I32 [1]
!s6 = StreamIota(!c0_2, !c1_2) [False]
!s7 = StreamZip(!s5, !s6) [34, TakeMinLength] {
(%elt3, %elt4) =>
  !14 = Cast(%elt4) [Int64]
  InsertFields %elt3 (__col_uid: !14)
}
!15 = ToArray(!s7)
%16 = InsertFields %12 (cols: !15)
%17 = CastRename(%16) [Struct{__cols:Array[Struct{sample_idx:Int32,pop:Int32,__col_uid:Int64}]}]
%18 = Ref [__iruid_1054]
%19 = SelectFields(%18) [()]
%20 = CastRename(%19) [Struct{}]
!21 = EncodedLiteral [Array[Tuple[Int32,Int32]]]
!s8 = ToStream(!21) [False] 
!c0_3 = I32 [0] 
!c1_3 = I32 [1]
!s9 = StreamIota(!c0_3, !c1_3) [False]
!s10 = StreamZip(!s8, !s9) [35, TakeMinLength] {
(%elt5, %elt6) =>
  !22 = Cast(%elt6) [Int64]
  MakeTuple(!22, %elt5) [(0 1)]
}
%23 = ToArray(!s10)
%24 = ArrayLen(%23)
!c0_4 = I32 [0] 
!c8 = I32 [8] 
!c1_4 = I32 [1]
!s11 = StreamRange(!c0_4, !c8, !c1_4) [-1, False] 
!25 = Literal [Array[Interval[Struct{locus:Locus(GRCh37),alleles:Array[String]}]], <literal value>]
!s12 = ToStream(!25) [False] 
!c8_2 = I32 [8]
!26 = ApplyComparisonOp(%24, !c8_2) [EQWithNA]
!34 = If !26 then { %23 } else {
  !27 = Str ["TableGen: ..."] 
  !28 = Str [" got "]
  !29 = Apply(!27, !28) [-1, concat, (), String] 
  !30 = Apply(%24) [-1, str, (), String]
  !31 = Apply(!29, !30) [-1, concat, (), String] 
  !32 = Str [" contexts."]
  !33 = Apply(!31, !32) [-1, concat, (), String]
  Die(!33) [Array[Tuple[Int64,Tuple[Int32,Int32]]], 9]
}
!s13 = ToStream(!34) [False]
!s14 = StreamZip(!s11, !s12, !s13) [9, AssertSameLength] {
(%elt7, %elt8, %elt9) =>
  MakeTuple(%elt7, %elt8, %elt9) [(0 1 2)]
}
%35 = ToArray(!s14)
!c4 = I32 [4] 
!c0_5 = I32 [0]
%206 = TailLoop(!c4, !c0_5) {
(%loopvar, %loopvar2, %loop) =>
  %36 = RNGStateLiteral
  !c0_6 = I32 [0] 
  !c10_2 = I32 [10] 
  !c1_5 = I32 [1]
  !s15 = StreamRange(!c0_6, !c10_2, !c1_5) [1, False]
  !s18 = StreamMap(!s15) { (%elt10) =>
    !37 = Cast(%elt10) [Int64]
    %38 = MakeTuple(!37, %elt10) [(0 1)]
    !39 = GetTupleElement(%38) [1] 
    !40 = EncodedLiteral [Array[Int32]]
    !s16 = ToStream(!40) [False]
    !s17 = StreamMap(!s16) { (%elt11) =>
      Cast(%elt11) [Float64]
    }
    !41 = ToArray(!s17) 
    !42 = GetTupleElement(%38) [0]
    !43 = RNGSplit(%36, !42)
    !44 = ApplySeeded(!41, !43) [rand_cat, 0, Int32]
    MakeStruct(sample_idx: !39, pop: !44)
  }
  !45 = ToArray(!s18)
  %46 = MakeStruct(cols: !45)
  %47 = Ref [__iruid_1048]
  !48 = GetField(%47) [cols]
  !s19 = ToStream(!48) [False] 
  !c0_7 = I32 [0] 
  !c1_6 = I32 [1]
  !s20 = StreamIota(!c0_7, !c1_6) [False]
  !s21 = StreamZip(!s19, !s20) [34, TakeMinLength] {
  (%elt12, %elt13) =>
    !49 = Cast(%elt13) [Int64]
    InsertFields %elt12 (__col_uid: !49)
  }
  !50 = ToArray(!s21)
  %51 = InsertFields %47 (cols: !50)
  %52 = CastRename(%51) [Struct{__cols:Array[Struct{sample_idx:Int32,pop:Int32,__col_uid:Int64}]}]
  %53 = Ref [__iruid_1054]
  %54 = SelectFields(%53) [()]
  %55 = CastRename(%54) [Struct{}]
  !s22 = ToStream(%35) [False]
  !s23 = StreamTake(!s22, %loopvar) 
  !56 = MakeStruct(__iruid_1048: %46, __iruid_1052: %51, __iruid_1054: %52, __iruid_1058: %54, __iruid_1059: %55) 
  !57 = Str ["iteration="] 
  !58 = Apply(%loopvar2) [-1, str, (), String]
  !59 = Apply(!57, !58) [-1, concat, (), String] 
  !60 = Str [",nParts="]
  !61 = Apply(!59, !60) [-1, concat, (), String] 
  !62 = Apply(%loopvar) [-1, str, (), String]
  !63 = Apply(!61, !62) [-1, concat, (), String]
  %194 = CollectDistributedArray(!s23, !56, !63) {
  (%ctx, %g) =>
    %64 = GetField(%g) [__iruid_1059]
    %65 = GetField(%g) [__iruid_1058]
    %66 = GetField(%g) [__iruid_1054]
    %67 = GetField(%g) [__iruid_1052]
    %68 = GetField(%g) [__iruid_1048]
    %69 = Ref [__iruid_1067]
    %70 = Ref [__iruid_1068]
    %71 = Ref [__iruid_1059]
    %72 = Ref [__iruid_1060]
    %73 = Ref [__iruid_1054]
    %74 = Ref [__iruid_1055]
    %75 = Ref [__iruid_1052]
    %76 = GetTupleElement(%74) [1]
    %77 = GetTupleElement(%74) [2]
    %78 = RNGStateLiteral
    !c0_8 = I32 [0] 
    !c10_3 = I32 [10] 
    !c1_7 = I32 [1]
    !s24 = StreamRange(!c0_8, !c10_3, !c1_7) [1, False]
    !s27 = StreamMap(!s24) { (%elt14) =>
      !79 = Cast(%elt14) [Int64]
      %80 = MakeTuple(!79, %elt14) [(0 1)]
      !81 = GetTupleElement(%80) [1] 
      !82 = EncodedLiteral [Array[Int32]]
      !s25 = ToStream(!82) [False]
      !s26 = StreamMap(!s25) { (%elt15) =>
        Cast(%elt15) [Float64]
      }
      !83 = ToArray(!s26) 
      !84 = GetTupleElement(%80) [0]
      !85 = RNGSplit(%78, !84)
      !86 = ApplySeeded(!83, !85) [rand_cat, 0, Int32]
      MakeStruct(sample_idx: !81, pop: !86)
    }
    !87 = ToArray(!s27)
    %88 = MakeStruct(cols: !87)
    %89 = GetTupleElement(%77) [0]
    !c0_9 = I32 [0] 
    !c1_8 = I32 [1]
    !s28 = StreamIota(!c0_9, !c1_8) [False] 
    !90 = RNGStateLiteral
    %91 = RNGSplit(!90, %89)
    %92 = GetTupleElement(%77) [1]
    !93 = GetTupleElement(%92) [0] 
    !94 = GetTupleElement(%92) [1] 
    !c1_9 = I32 [1]
    !s29 = StreamRange(!93, !94, !c1_9) [3, False]
    !s35 = StreamMap(!s29) { (%elt16) =>
      !95 = Cast(%elt16) [Int64]
      %96 = MakeTuple(!95, %elt16) [(0 1)]
      !97 = GetTupleElement(%96) [0]
      %98 = RNGSplit(%91, !97)
      !99 = F64 [0.1] 
      !100 = F64 [0.9]
      %101 = ApplySeeded(!99, !100, %98) [rand_unif, -1, Float64]
      !102 = GetTupleElement(%96) [1]
      !103 = Cast(!102) [Int64]
      !104 = Apply(!103) [5, globalPosToLocus, 
      (), Locus(GRCh37)] 
      !105 = EncodedLiteral [Array[String]] 
      !106 = EncodedLiteral [Array[Float64]]
      !s30 = ToStream(!106) [False] 
      !c0_10 = I32 [0] 
      !c1_10 = I32 [1]
      !s31 = StreamIota(!c0_10, !c1_10) [False]
      !s32 = StreamZip(!s30, !s31) [7, TakeMinLength] {
      (%elt17, %elt18) =>
        !107 = Cast(%elt18) [Int64]
        %108 = MakeTuple(!107, %elt17) [(0 1)]
        %109 = GetTupleElement(%108) [1]
        !110 = ApplyBinaryPrimOp(%101, %109) [Multiply] 
        !111 = F64 [1.0]
        !112 = ApplyBinaryPrimOp(!111, %101) [Subtract]
        !113 = ApplyBinaryPrimOp(!112, %109) [Multiply] 
        !114 = GetTupleElement(%108) [0]
        !115 = RNGSplit(%98, !114)
        ApplySeeded(!110, !113, !115) [rand_beta, 1, Float64]
      }
      !116 = ToArray(!s32) 
      !c0_11 = I32 [0] 
      !c10_4 = I32 [10] 
      !c1_11 = I32 [1]
      !s33 = StreamRange(!c0_11, !c10_4, !c1_11) [8, False]
      !s34 = StreamMap(!s33) { (%elt19) =>
        Literal [Struct{}, <literal value>]
      }
      !117 = ToArray(!s34)
      MakeStruct(locus: !104, alleles: !105, af: !116, entries: !117)
    }
    !s36 = StreamZip(!s28, !s35) [36, TakeMinLength] {
    (%elt20, %elt21) =>
      !118 = Cast(%elt20) [Int64]
      !119 = MakeTuple(%89, !118) [(0 1)]
      InsertFields %elt21 (__row_uid: !119)
    }
    !s37 = StreamMap(!s36) { (%elt22) =>
      !120 = SelectFields(%elt22) [(locus alleles)]
      !121 = ApplySpecial(%76, !120) [-1, contains, 
      (), Boolean]
      If !121 then { %elt22 } else {
        !122 = Str ["TableGen: ..."] 
        !123 = GetTupleElement(%74) [0]
        !124 = Apply(!123) [-1, str, (), String]
        !125 = Apply(!122, !124) [-1, concat, (), String] 
        !126 = Str ["\n\tRange bo..."]
        !127 = Apply(!125, !126) [-1, concat, (), String] 
        !128 = GetTupleElement(%74) [0]
        !129 = Apply(!128) [-1, str, (), String]
        !130 = Apply(!127, !129) [-1, concat, (), String] 
        !131 = Str [": "]
        !132 = Apply(!130, !131) [-1, concat, (), String] 
        !133 = Apply(%76) [-1, str, (), String]
        !134 = Apply(!132, !133) [-1, concat, (), String] 
        !135 = Str ["\n\tInvalid ..."]
        !136 = Apply(!134, !135) [-1, concat, (), String] 
        !137 = SelectFields(%elt22) [(locus alleles)]
        !138 = Apply(!137) [-1, str, (), String]
        !139 = Apply(!136, !138) [-1, concat, (), String]
        Die(!139) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, 9]
      }
    }
    !s38 = StreamMap(!s37) { (%elt23) =>
      %140 = Ref [__iruid_1053]
      %141 = GetField(%140) [entries]
      !142 = IsNA(%141)
      If !142 then {
        !143 = Str ["missing en..."]
        Die(!143) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, -1]
      } else {
        !144 = GetField(%75) [cols]
        %145 = ArrayLen(!144)
        %146 = ArrayLen(%141)
        !147 = ApplyComparisonOp(%146, %145) [NEQWithNA]
        If !147 then {
          !148 = Str ["length mis..."] 
          !149 = Apply(%146) [-1, str, (), String]
          !150 = Apply(!148, !149) [-1, concat, (), String] 
          !151 = Str [" entries, "]
          !152 = Apply(!150, !151) [-1, concat, (), String] 
          !153 = Apply(%145) [-1, str, (), String]
          !154 = Apply(!152, !153) [-1, concat, (), String] 
          !155 = Str [" cols, at "]
          !156 = Apply(!154, !155) [-1, concat, (), String] 
          !157 = SelectFields(%140) [(locus alleles)]
          !158 = Apply(!157) [-1, str, (), String]
          !159 = Apply(!156, !158) [-1, concat, (), String]
          Die(!159) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, -1]
        } else { %140 }
      }
    }
    !s39 = StreamMap(!s38) { (%elt24) =>
      CastRename(%elt24) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],`the entries! [877f12a8827e18f61222c6c8c5fb04a8]`:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}]
    }
    !s43 = StreamMap(!s39) { (%elt25) =>
      %160 = Ref [__iruid_1057]
      !161 = SelectFields(%160) [(locus alleles)] 
      !162 = GetField(%160) [`the entries! [877f12a8827e18f61222c6c8c5fb04a8]`]
      !s40 = ToStream(!162) [False] 
      !163 = GetField(%73) [__cols]
      !s41 = ToStream(!163) [False]
      !s42 = StreamZip(!s40, !s41) [-1, AssumeSameLength] {
      (%elt26, %elt27) =>
        %164 = GetField(%160) [__row_uid]
        !165 = GetField(%160) [af] 
        !166 = GetField(%elt27) [pop]
        %167 = ApplyIR(!165, !166) [10, indexArray, 
        (), Float64]
        !168 = F64 [1.0]
        %169 = ApplyBinaryPrimOp(!168, %167) [Subtract]
        !170 = F64 [2.0]
        !171 = Apply(%169, !170) [13, pow, (), Float64] 
        !172 = F64 [2.0]
        !173 = ApplyBinaryPrimOp(!172, %167) [Multiply]
        !174 = ApplyBinaryPrimOp(!173, %169) [Multiply] 
        !175 = F64 [2.0]
        !176 = Apply(%167, !175) [16, pow, (), Float64]
        !177 = MakeArray(!171, !174, !176) [Array[Float64]] 
        !178 = RNGStateLiteral 
        !179 = GetTupleElement(%164) [0] 
        !180 = GetTupleElement(%164) [1] 
        !181 = GetField(%elt27) [__col_uid]
        !182 = MakeTuple(!179, !180, !181) [(0 1 2)]
        !183 = RNGSplit(!178, !182)
        !184 = ApplySeeded(!177, !183) [rand_cat, 2, Int32]
        !185 = Apply(!184) [17, UnphasedDiploidGtIndexCall, 
        (), Call]
        InsertFields %elt26 (GT: !185)
      }
      !186 = ToArray(!s42)
      InsertFields !161 (the entries! [877f12a8827e18f61222c6c8c5fb04a8]: !186)
    }
    !s44 = StreamMap(!s43) { (%elt28) =>
      CastRename(%elt28) [Struct{locus:Locus(GRCh37),alleles:Array[String],entries:Array[Struct{GT:Call}]}]
    }
    !s45 = StreamMap(!s44) { (%elt29) =>
      %187 = Ref [__iruid_1062]
      %188 = GetField(%187) [entries]
      !189 = SelectFields(%187) [(locus alleles)] 
      !c0_12 = I32 [0]
      !190 = ArrayRef(%188, !c0_12) [24] 
      !c1_12 = I32 [1]
      !191 = ArrayRef(%188, !c1_12) [25] 
      !c2 = I32 [2]
      !192 = ArrayRef(%188, !c2) [26] 
      !c3 = I32 [3]
      !193 = ArrayRef(%188, !c3) [27]
      InsertFields !189 (0: !190, 1: !191, 2: !192, 3: !193)
    } 
    !c11 = I32 [11]
    !s46 = StreamTake(!s45, !c11)
    StreamLen(!s46)
  }
  %195 = Ref [__iruid_1070]
  !s47 = ToStream(%195) [False] 
  !c0_13 = I32 [0]
  !196 = StreamFold(!s47, !c0_13) {
  (%accum, %elt30) =>
    ApplyBinaryPrimOp(%accum, %elt30) [Add]
  }
  !197 = Cast(!196) [Int64] 
  !198 = I64 [11]
  !199 = ApplyComparisonOp(!197, !198) [GTEQ] 
  !200 = ArrayLen(%35) 
  !201 = ArrayLen(%195)
  !202 = ApplyComparisonOp(!200, !201) [LTEQ]
  !203 = ApplySpecial(!199, !202) [-1, lor, 
  (), Boolean]
  If !203 then { %195 } else {
    !c4_2 = I32 [4]
    !204 = ApplyBinaryPrimOp(%loopvar, !c4_2) [Multiply] 
    !c1_13 = I32 [1]
    !205 = ApplyBinaryPrimOp(%loopvar2, !c1_13) [Add]
    Recur(!204, !205) [Array[Int32]]
  }
}
%207 = ArrayLen(%206)
!c0_14 = I32 [0]
!208 = ApplyComparisonOp(%207, !c0_14) [EQWithNA]
%224 = If !208 then {
  !c0_15 = I32 [0] 
  !209 = I64 [0]
  MakeTuple(!c0_15, !209) [(0 1)]
} else {
  !c0_16 = I32 [0] 
  !210 = I64 [11]
  TailLoop(!c0_16, !210) {
  (%loopvar3, %loopvar4, %loop2) =>
    !c1_14 = I32 [1]
    !211 = ApplyBinaryPrimOp(%207, !c1_14) [Subtract]
    !212 = ApplyComparisonOp(%loopvar3, !211) [EQWithNA] 
    !213 = ArrayRef(%206, %loopvar3) [-1]
    !214 = Cast(!213) [Int64]
    !215 = ApplyBinaryPrimOp(%loopvar4, !214) [Subtract] 
    !216 = I64 [0]
    !217 = ApplyComparisonOp(!215, !216) [LTEQ]
    !218 = ApplySpecial(!212, !217) [-1, lor, 
    (), Boolean]
    If !218 then {
      !c1_15 = I32 [1]
      !219 = ApplyBinaryPrimOp(%loopvar3, !c1_15) [Add]
      MakeTuple(!219, %loopvar4) [(0 1)]
    } else {
      !c1_16 = I32 [1]
      !220 = ApplyBinaryPrimOp(%loopvar3, !c1_16) [Add] 
      !221 = ArrayRef(%206, %loopvar3) [-1]
      !222 = Cast(!221) [Int64]
      !223 = ApplyBinaryPrimOp(%loopvar4, !222) [Subtract]
      Recur(!220, !223) [Tuple[Int32,Int64]]
    }
  }
}
!s48 = ToStream(%35) [False] 
!225 = GetTupleElement(%224) [0]
!s49 = StreamTake(!s48, !225) 
!c0_17 = I32 [0] 
!226 = GetTupleElement(%224) [0] 
!c1_17 = I32 [1]
!s50 = StreamRange(!c0_17, !226, !c1_17) [-1, False]
!s51 = StreamMap(!s50) { (%elt31) =>
  !227 = GetTupleElement(%224) [0] 
  !c1_18 = I32 [1]
  !228 = ApplyBinaryPrimOp(!227, !c1_18) [Subtract]
  !229 = ApplyComparisonOp(%elt31, !228) [EQWithNA]
  If !229 then {
    !230 = GetTupleElement(%224) [1]
    Cast(!230) [Int32]
  } else {
    ArrayRef(%206, %elt31) [-1]
  }
}
!s52 = StreamZip(!s49, !s51) [-1, AssumeSameLength] {
(%elt32, %elt33) =>
  MakeStruct(numberToTake: %elt33, old: %elt32)
}
ToArray(!s52)

2023-11-17 18:07:57.354 : INFO: initial IR: IR size 6: 

!1 = In [SingleCodeEmitParamType(true, PTypeReferenceSingleCodeType(+PCTuple[0:PCString,1:PCString])), 0]
!2 = GetTupleElement(!1) [0] 
!3 = In [SingleCodeEmitParamType(true, PTypeReferenceSingleCodeType(+PCTuple[0:PCString,1:PCString])), 0]
!4 = GetTupleElement(!3) [1]
!5 = Apply(!2, !4) [-1, concat, (), String]
MakeTuple(!5) [(0)]

2023-11-17 18:07:57.354 : INFO: after InlineApplyIR: IR size 6: 

!1 = In [SingleCodeEmitParamType(true, PTypeReferenceSingleCodeType(+PCTuple[0:PCString,1:PCString])), 0]
!2 = GetTupleElement(!1) [0] 
!3 = In [SingleCodeEmitParamType(true, PTypeReferenceSingleCodeType(+PCTuple[0:PCString,1:PCString])), 0]
!4 = GetTupleElement(!3) [1]
!5 = Apply(!2, !4) [-1, concat, (), String]
MakeTuple(!5) [(0)]

2023-11-17 18:07:57.356 : INFO: after LowerArrayAggsToRunAggs: IR size 6: 

!1 = In [SingleCodeEmitParamType(true, PTypeReferenceSingleCodeType(+PCTuple[0:PCString,1:PCString])), 0]
!2 = GetTupleElement(!1) [0] 
!3 = In [SingleCodeEmitParamType(true, PTypeReferenceSingleCodeType(+PCTuple[0:PCString,1:PCString])), 0]
!4 = GetTupleElement(!3) [1]
!5 = Apply(!2, !4) [-1, concat, (), String]
MakeTuple(!5) [(0)]

2023-11-17 18:07:57.376 : INFO: instruction count: 3: __C222HailClassLoaderContainer.<init>
2023-11-17 18:07:57.376 : INFO: instruction count: 3: __C222HailClassLoaderContainer.<clinit>
2023-11-17 18:07:57.376 : INFO: instruction count: 3: __C224FSContainer.<init>
2023-11-17 18:07:57.376 : INFO: instruction count: 3: __C224FSContainer.<clinit>
2023-11-17 18:07:57.378 : INFO: instruction count: 3: __C226Compiled.<init>
2023-11-17 18:07:57.378 : INFO: instruction count: 125: __C226Compiled.apply
2023-11-17 18:07:57.379 : INFO: instruction count: 49: __C226Compiled.__m230concat
2023-11-17 18:07:57.379 : INFO: instruction count: 9: __C226Compiled.setPartitionIndex
2023-11-17 18:07:57.379 : INFO: instruction count: 4: __C226Compiled.addPartitionRegion
2023-11-17 18:07:57.379 : INFO: instruction count: 4: __C226Compiled.setPool
2023-11-17 18:07:57.379 : INFO: instruction count: 3: __C226Compiled.addHailClassLoader
2023-11-17 18:07:57.379 : INFO: instruction count: 3: __C226Compiled.addFS
2023-11-17 18:07:57.379 : INFO: instruction count: 4: __C226Compiled.addTaskContext
2023-11-17 18:07:57.445 : INFO: Prune: MakeStruct: eliminating field 'cols'
2023-11-17 18:07:57.448 : INFO: Prune: MakeStruct: eliminating field '__iruid_1048'
2023-11-17 18:07:57.448 : INFO: Prune: MakeStruct: eliminating field '__iruid_1058'
2023-11-17 18:07:57.448 : INFO: Prune: MakeStruct: eliminating field '__iruid_1059'
2023-11-17 18:07:57.588 : INFO: after optimize: relationalLowerer, initial IR: IR size 470: 

!1 = EncodedLiteral [Array[Tuple[Int32,Int32]]]
!s = ToStream(!1) [False] 
!c0 = I32 [0] 
!c1 = I32 [1]
!s2 = StreamIota(!c0, !c1) [False]
!s3 = StreamZip(!s, !s2) [35, TakeMinLength] {
(%elt, %elt2) =>
  !2 = Cast(%elt2) [Int64]
  MakeTuple(!2, %elt) [(0 1)]
}
%3 = ToArray(!s3)
%4 = ArrayLen(%3)
!c0_2 = I32 [0] 
!c8 = I32 [8] 
!c1_2 = I32 [1]
!s4 = StreamRange(!c0_2, !c8, !c1_2) [-1, False] 
!5 = Literal [Array[Interval[Struct{locus:Locus(GRCh37),alleles:Array[String]}]], <literal value>]
!s5 = ToStream(!5) [False] 
!c8_2 = I32 [8]
!6 = ApplyComparisonOp(%4, !c8_2) [EQWithNA]
!12 = If !6 then { %3 } else {
  !7 = Str ["TableGen: ..."] 
  !8 = Apply(%4) [-1, str, (), String]
  !9 = Apply(!7, !8) [-1, concat, (), String] 
  !10 = Str [" contexts."]
  !11 = Apply(!9, !10) [-1, concat, (), String]
  Die(!11) [Array[Tuple[Int64,Tuple[Int32,Int32]]], 9]
}
!s6 = ToStream(!12) [False]
!s7 = StreamZip(!s4, !s5, !s6) [9, AssertSameLength] {
(%elt3, %elt4, %elt5) =>
  MakeTuple(%elt3, %elt4, %elt5) [(0 1 2)]
}
%13 = ToArray(!s7)
!c4 = I32 [4] 
!c0_3 = I32 [0]
%166 = TailLoop(!c4, !c0_3) {
(%loopvar, %loopvar2, %loop) =>
  %14 = RNGStateLiteral
  !c0_4 = I32 [0] 
  !c10 = I32 [10] 
  !c1_3 = I32 [1]
  !s8 = StreamRange(!c0_4, !c10, !c1_3) [1, False]
  !s11 = StreamMap(!s8) { (%elt6) =>
    !15 = Cast(%elt6) [Int64]
    %16 = MakeTuple(!15, %elt6) [(0 1)]
    !17 = GetTupleElement(%16) [1] 
    !18 = EncodedLiteral [Array[Int32]]
    !s9 = ToStream(!18) [False]
    !s10 = StreamMap(!s9) { (%elt7) =>
      Cast(%elt7) [Float64]
    }
    !19 = ToArray(!s10) 
    !20 = GetTupleElement(%16) [0]
    !21 = RNGSplit(%14, !20)
    !22 = ApplySeeded(!19, !21) [rand_cat, 0, Int32]
    MakeStruct(sample_idx: !17, pop: !22)
  }
  !23 = ToArray(!s11)
  %24 = MakeStruct(cols: !23)
  !25 = GetField(%24) [cols]
  !s12 = ToStream(!25) [False] 
  !c0_5 = I32 [0] 
  !c1_4 = I32 [1]
  !s13 = StreamIota(!c0_5, !c1_4) [False]
  !s14 = StreamZip(!s12, !s13) [34, TakeMinLength] {
  (%elt8, %elt9) =>
    !26 = Cast(%elt9) [Int64]
    InsertFields %elt8 (__col_uid: !26)
  }
  !27 = ToArray(!s14)
  %28 = InsertFields %24 (cols: !27)
  !s15 = ToStream(%13) [False]
  !s16 = StreamTake(!s15, %loopvar) 
  !29 = CastRename(%28) [Struct{__cols:Array[Struct{sample_idx:Int32,pop:Int32,__col_uid:Int64}]}]
  %30 = MakeStruct(__iruid_1052: %28, __iruid_1054: !29)
  !31 = IsNA(%30)
  !39 = If !31 then {
    NA [Struct{__iruid_1052:Struct{cols:Array[Struct{}]},__iruid_1054:Struct{__cols:Array[Struct{sample_idx:Int32,pop:Int32,__col_uid:Int64}]}}]
  } else {
    %32 = GetField(%30) [__iruid_1052]
    !33 = IsNA(%32)
    !37 = If !33 then {
      NA [Struct{cols:Array[Struct{}]}]
    } else {
      !34 = GetField(%32) [cols]
      !s17 = ToStream(!34) [False]
      !s18 = StreamMap(!s17) { (%elt10) =>
        !35 = IsNA(%elt10)
        If !35 then {
          NA [Struct{}]
        } else {
          Literal [Struct{}, <literal value>]
        }
      }
      !36 = ToArray(!s18)
      MakeStruct(cols: !36)
    } 
    !38 = GetField(%30) [__iruid_1054]
    MakeStruct(__iruid_1052: !37, __iruid_1054: !38)
  } 
  !40 = Str ["iteration="] 
  !41 = Apply(%loopvar2) [-1, str, (), String]
  !42 = Apply(!40, !41) [-1, concat, (), String] 
  !43 = Str [",nParts="]
  !44 = Apply(!42, !43) [-1, concat, (), String] 
  !45 = Apply(%loopvar) [-1, str, (), String]
  !46 = Apply(!44, !45) [-1, concat, (), String]
  %155 = CollectDistributedArray(!s16, !39, !46) {
  (%ctx, %g) =>
    %47 = GetField(%g) [__iruid_1054]
    %48 = GetField(%g) [__iruid_1052]
    %49 = GetTupleElement(%ctx) [1]
    %50 = GetTupleElement(%ctx) [2]
    %51 = GetTupleElement(%50) [0]
    !c0_6 = I32 [0] 
    !c1_5 = I32 [1]
    !s19 = StreamIota(!c0_6, !c1_5) [False] 
    !52 = RNGStateLiteral
    %53 = RNGSplit(!52, %51)
    %54 = GetTupleElement(%50) [1]
    !55 = GetTupleElement(%54) [0] 
    !56 = GetTupleElement(%54) [1] 
    !c1_6 = I32 [1]
    !s20 = StreamRange(!55, !56, !c1_6) [3, False]
    !s26 = StreamMap(!s20) { (%elt11) =>
      !57 = Cast(%elt11) [Int64]
      %58 = MakeTuple(!57, %elt11) [(0 1)]
      !59 = GetTupleElement(%58) [0]
      %60 = RNGSplit(%53, !59)
      !61 = F64 [0.1] 
      !62 = F64 [0.9]
      %63 = ApplySeeded(!61, !62, %60) [rand_unif, -1, Float64]
      !64 = GetTupleElement(%58) [1]
      !65 = Cast(!64) [Int64]
      !66 = Apply(!65) [5, globalPosToLocus, 
      (), Locus(GRCh37)] 
      !67 = EncodedLiteral [Array[String]] 
      !68 = EncodedLiteral [Array[Float64]]
      !s21 = ToStream(!68) [False] 
      !c0_7 = I32 [0] 
      !c1_7 = I32 [1]
      !s22 = StreamIota(!c0_7, !c1_7) [False]
      !s23 = StreamZip(!s21, !s22) [7, TakeMinLength] {
      (%elt12, %elt13) =>
        !69 = Cast(%elt13) [Int64]
        %70 = MakeTuple(!69, %elt12) [(0 1)]
        %71 = GetTupleElement(%70) [1]
        !72 = ApplyBinaryPrimOp(%63, %71) [Multiply] 
        !73 = F64 [1.0]
        !74 = ApplyBinaryPrimOp(!73, %63) [Subtract]
        !75 = ApplyBinaryPrimOp(!74, %71) [Multiply] 
        !76 = GetTupleElement(%70) [0]
        !77 = RNGSplit(%60, !76)
        ApplySeeded(!72, !75, !77) [rand_beta, 1, Float64]
      }
      !78 = ToArray(!s23) 
      !c0_8 = I32 [0] 
      !c10_2 = I32 [10] 
      !c1_8 = I32 [1]
      !s24 = StreamRange(!c0_8, !c10_2, !c1_8) [8, False]
      !s25 = StreamMap(!s24) { (%elt14) =>
        Literal [Struct{}, <literal value>]
      }
      !79 = ToArray(!s25)
      MakeStruct(locus: !66, alleles: !67, af: !78, entries: !79)
    }
    !s27 = StreamZip(!s19, !s26) [36, TakeMinLength] {
    (%elt15, %elt16) =>
      !80 = Cast(%elt15) [Int64]
      !81 = MakeTuple(%51, !80) [(0 1)]
      InsertFields %elt16 (__row_uid: !81)
    }
    !s28 = StreamMap(!s27) { (%elt17) =>
      !82 = SelectFields(%elt17) [(locus alleles)]
      !83 = ApplySpecial(%49, !82) [-1, contains, 
      (), Boolean]
      If !83 then { %elt17 } else {
        !84 = Str ["TableGen: ..."] 
        !85 = GetTupleElement(%ctx) [0]
        !86 = Apply(!85) [-1, str, (), String]
        !87 = Apply(!84, !86) [-1, concat, (), String] 
        !88 = Str ["\n\tRange bo..."]
        !89 = Apply(!87, !88) [-1, concat, (), String] 
        !90 = GetTupleElement(%ctx) [0]
        !91 = Apply(!90) [-1, str, (), String]
        !92 = Apply(!89, !91) [-1, concat, (), String] 
        !93 = Str [": "]
        !94 = Apply(!92, !93) [-1, concat, (), String] 
        !95 = Apply(%49) [-1, str, (), String]
        !96 = Apply(!94, !95) [-1, concat, (), String] 
        !97 = Str ["\n\tInvalid ..."]
        !98 = Apply(!96, !97) [-1, concat, (), String] 
        !99 = SelectFields(%elt17) [(locus alleles)]
        !100 = Apply(!99) [-1, str, (), String]
        !101 = Apply(!98, !100) [-1, concat, (), String]
        Die(!101) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, 9]
      }
    }
    !s29 = StreamMap(!s28) { (%elt18) =>
      %102 = GetField(%elt18) [entries]
      !103 = IsNA(%102)
      If !103 then {
        !104 = Str ["missing en..."]
        Die(!104) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, -1]
      } else {
        !105 = GetField(%48) [cols]
        %106 = ArrayLen(!105)
        %107 = ArrayLen(%102)
        !108 = ApplyComparisonOp(%107, %106) [NEQWithNA]
        If !108 then {
          !109 = Str ["length mis..."] 
          !110 = Apply(%107) [-1, str, (), String]
          !111 = Apply(!109, !110) [-1, concat, (), String] 
          !112 = Str [" entries, "]
          !113 = Apply(!111, !112) [-1, concat, (), String] 
          !114 = Apply(%106) [-1, str, (), String]
          !115 = Apply(!113, !114) [-1, concat, (), String] 
          !116 = Str [" cols, at "]
          !117 = Apply(!115, !116) [-1, concat, (), String] 
          !118 = SelectFields(%elt18) [(locus alleles)]
          !119 = Apply(!118) [-1, str, (), String]
          !120 = Apply(!117, !119) [-1, concat, (), String]
          Die(!120) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, -1]
        } else { %elt18 }
      }
    }
    !s33 = StreamMap(!s29) { (%elt19) =>
      %121 = CastRename(%elt19) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],`the entries! [877f12a8827e18f61222c6c8c5fb04a8]`:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}]
      !122 = SelectFields(%121) [(locus alleles)] 
      !123 = GetField(%121) [`the entries! [877f12a8827e18f61222c6c8c5fb04a8]`]
      !s30 = ToStream(!123) [False] 
      !124 = GetField(%47) [__cols]
      !s31 = ToStream(!124) [False]
      !s32 = StreamZip(!s30, !s31) [-1, AssumeSameLength] {
      (%elt20, %elt21) =>
        %125 = GetField(%121) [__row_uid]
        !126 = GetField(%121) [af] 
        !127 = GetField(%elt21) [pop]
        %128 = ApplyIR(!126, !127) [10, indexArray, 
        (), Float64]
        !129 = F64 [1.0]
        %130 = ApplyBinaryPrimOp(!129, %128) [Subtract]
        !131 = F64 [2.0]
        !132 = Apply(%130, !131) [13, pow, (), Float64] 
        !133 = F64 [2.0]
        !134 = ApplyBinaryPrimOp(!133, %128) [Multiply]
        !135 = ApplyBinaryPrimOp(!134, %130) [Multiply] 
        !136 = F64 [2.0]
        !137 = Apply(%128, !136) [16, pow, (), Float64]
        !138 = MakeArray(!132, !135, !137) [Array[Float64]] 
        !139 = RNGStateLiteral 
        !140 = GetTupleElement(%125) [0] 
        !141 = GetTupleElement(%125) [1] 
        !142 = GetField(%elt21) [__col_uid]
        !143 = MakeTuple(!140, !141, !142) [(0 1 2)]
        !144 = RNGSplit(!139, !143)
        !145 = ApplySeeded(!138, !144) [rand_cat, 2, Int32]
        !146 = Apply(!145) [17, UnphasedDiploidGtIndexCall, 
        (), Call]
        InsertFields %elt20 (GT: !146)
      }
      !147 = ToArray(!s32)
      InsertFields !122 (the entries! [877f12a8827e18f61222c6c8c5fb04a8]: !147)
    }
    !s34 = StreamMap(!s33) { (%elt22) =>
      %148 = CastRename(%elt22) [Struct{locus:Locus(GRCh37),alleles:Array[String],entries:Array[Struct{GT:Call}]}]
      %149 = GetField(%148) [entries]
      !150 = SelectFields(%148) [(locus alleles)] 
      !c0_9 = I32 [0]
      !151 = ArrayRef(%149, !c0_9) [24] 
      !c1_9 = I32 [1]
      !152 = ArrayRef(%149, !c1_9) [25] 
      !c2 = I32 [2]
      !153 = ArrayRef(%149, !c2) [26] 
      !c3 = I32 [3]
      !154 = ArrayRef(%149, !c3) [27]
      InsertFields !150 (0: !151, 1: !152, 2: !153, 3: !154)
    } 
    !c11 = I32 [11]
    !s35 = StreamTake(!s34, !c11)
    StreamLen(!s35)
  }
  !s36 = ToStream(%155) [False] 
  !c0_10 = I32 [0]
  !156 = StreamFold(!s36, !c0_10) {
  (%accum, %elt23) =>
    ApplyBinaryPrimOp(%accum, %elt23) [Add]
  }
  !157 = Cast(!156) [Int64] 
  !158 = I64 [11]
  !159 = ApplyComparisonOp(!157, !158) [GTEQ] 
  !160 = ArrayLen(%13) 
  !161 = ArrayLen(%155)
  !162 = ApplyComparisonOp(!160, !161) [LTEQ]
  !163 = ApplySpecial(!159, !162) [-1, lor, 
  (), Boolean]
  If !163 then { %155 } else {
    !c4_2 = I32 [4]
    !164 = ApplyBinaryPrimOp(%loopvar, !c4_2) [Multiply] 
    !c1_10 = I32 [1]
    !165 = ApplyBinaryPrimOp(%loopvar2, !c1_10) [Add]
    Recur(!164, !165) [Array[Int32]]
  }
}
%167 = ArrayLen(%166)
!c0_11 = I32 [0]
!168 = ApplyComparisonOp(%167, !c0_11) [EQWithNA]
%183 = If !168 then {
  Literal [Tuple[Int32,Int64], <literal value>]
} else {
  !c0_12 = I32 [0] 
  !169 = I64 [11]
  TailLoop(!c0_12, !169) {
  (%loopvar3, %loopvar4, %loop2) =>
    !c1_11 = I32 [1]
    !170 = ApplyBinaryPrimOp(%167, !c1_11) [Subtract]
    !171 = ApplyComparisonOp(%loopvar3, !170) [EQWithNA] 
    !172 = ArrayRef(%166, %loopvar3) [-1]
    !173 = Cast(!172) [Int64]
    !174 = ApplyBinaryPrimOp(%loopvar4, !173) [Subtract] 
    !175 = I64 [0]
    !176 = ApplyComparisonOp(!174, !175) [LTEQ]
    !177 = ApplySpecial(!171, !176) [-1, lor, 
    (), Boolean]
    If !177 then {
      !c1_12 = I32 [1]
      !178 = ApplyBinaryPrimOp(%loopvar3, !c1_12) [Add]
      MakeTuple(!178, %loopvar4) [(0 1)]
    } else {
      !c1_13 = I32 [1]
      !179 = ApplyBinaryPrimOp(%loopvar3, !c1_13) [Add] 
      !180 = ArrayRef(%166, %loopvar3) [-1]
      !181 = Cast(!180) [Int64]
      !182 = ApplyBinaryPrimOp(%loopvar4, !181) [Subtract]
      Recur(!179, !182) [Tuple[Int32,Int64]]
    }
  }
}
!s37 = ToStream(%13) [False] 
!184 = GetTupleElement(%183) [0]
!s38 = StreamTake(!s37, !184) 
!c0_13 = I32 [0] 
!185 = GetTupleElement(%183) [0] 
!c1_14 = I32 [1]
!s39 = StreamRange(!c0_13, !185, !c1_14) [-1, False]
!s40 = StreamMap(!s39) { (%elt24) =>
  !186 = GetTupleElement(%183) [0] 
  !c1_15 = I32 [1]
  !187 = ApplyBinaryPrimOp(!186, !c1_15) [Subtract]
  !188 = ApplyComparisonOp(%elt24, !187) [EQWithNA]
  If !188 then {
    !189 = GetTupleElement(%183) [1]
    Cast(!189) [Int32]
  } else {
    ArrayRef(%166, %elt24) [-1]
  }
}
!s41 = StreamZip(!s38, !s40) [-1, AssumeSameLength] {
(%elt25, %elt26) =>
  MakeStruct(numberToTake: %elt26, old: %elt25)
}
ToArray(!s41)

2023-11-17 18:07:57.600 : INFO: after LowerMatrixToTable: IR size 470: 

!1 = EncodedLiteral [Array[Tuple[Int32,Int32]]]
!s = ToStream(!1) [False] 
!c0 = I32 [0] 
!c1 = I32 [1]
!s2 = StreamIota(!c0, !c1) [False]
!s3 = StreamZip(!s, !s2) [35, TakeMinLength] {
(%elt, %elt2) =>
  !2 = Cast(%elt2) [Int64]
  MakeTuple(!2, %elt) [(0 1)]
}
%3 = ToArray(!s3)
%4 = ArrayLen(%3)
!c0_2 = I32 [0] 
!c8 = I32 [8] 
!c1_2 = I32 [1]
!s4 = StreamRange(!c0_2, !c8, !c1_2) [-1, False] 
!5 = Literal [Array[Interval[Struct{locus:Locus(GRCh37),alleles:Array[String]}]], <literal value>]
!s5 = ToStream(!5) [False] 
!c8_2 = I32 [8]
!6 = ApplyComparisonOp(%4, !c8_2) [EQWithNA]
!12 = If !6 then { %3 } else {
  !7 = Str ["TableGen: ..."] 
  !8 = Apply(%4) [-1, str, (), String]
  !9 = Apply(!7, !8) [-1, concat, (), String] 
  !10 = Str [" contexts."]
  !11 = Apply(!9, !10) [-1, concat, (), String]
  Die(!11) [Array[Tuple[Int64,Tuple[Int32,Int32]]], 9]
}
!s6 = ToStream(!12) [False]
!s7 = StreamZip(!s4, !s5, !s6) [9, AssertSameLength] {
(%elt3, %elt4, %elt5) =>
  MakeTuple(%elt3, %elt4, %elt5) [(0 1 2)]
}
%13 = ToArray(!s7)
!c4 = I32 [4] 
!c0_3 = I32 [0]
%166 = TailLoop(!c4, !c0_3) {
(%loopvar, %loopvar2, %loop) =>
  %14 = RNGStateLiteral
  !c0_4 = I32 [0] 
  !c10 = I32 [10] 
  !c1_3 = I32 [1]
  !s8 = StreamRange(!c0_4, !c10, !c1_3) [1, False]
  !s11 = StreamMap(!s8) { (%elt6) =>
    !15 = Cast(%elt6) [Int64]
    %16 = MakeTuple(!15, %elt6) [(0 1)]
    !17 = GetTupleElement(%16) [1] 
    !18 = EncodedLiteral [Array[Int32]]
    !s9 = ToStream(!18) [False]
    !s10 = StreamMap(!s9) { (%elt7) =>
      Cast(%elt7) [Float64]
    }
    !19 = ToArray(!s10) 
    !20 = GetTupleElement(%16) [0]
    !21 = RNGSplit(%14, !20)
    !22 = ApplySeeded(!19, !21) [rand_cat, 0, Int32]
    MakeStruct(sample_idx: !17, pop: !22)
  }
  !23 = ToArray(!s11)
  %24 = MakeStruct(cols: !23)
  !25 = GetField(%24) [cols]
  !s12 = ToStream(!25) [False] 
  !c0_5 = I32 [0] 
  !c1_4 = I32 [1]
  !s13 = StreamIota(!c0_5, !c1_4) [False]
  !s14 = StreamZip(!s12, !s13) [34, TakeMinLength] {
  (%elt8, %elt9) =>
    !26 = Cast(%elt9) [Int64]
    InsertFields %elt8 (__col_uid: !26)
  }
  !27 = ToArray(!s14)
  %28 = InsertFields %24 (cols: !27)
  !s15 = ToStream(%13) [False]
  !s16 = StreamTake(!s15, %loopvar) 
  !29 = CastRename(%28) [Struct{__cols:Array[Struct{sample_idx:Int32,pop:Int32,__col_uid:Int64}]}]
  %30 = MakeStruct(__iruid_1052: %28, __iruid_1054: !29)
  !31 = IsNA(%30)
  !39 = If !31 then {
    NA [Struct{__iruid_1052:Struct{cols:Array[Struct{}]},__iruid_1054:Struct{__cols:Array[Struct{sample_idx:Int32,pop:Int32,__col_uid:Int64}]}}]
  } else {
    %32 = GetField(%30) [__iruid_1052]
    !33 = IsNA(%32)
    !37 = If !33 then {
      NA [Struct{cols:Array[Struct{}]}]
    } else {
      !34 = GetField(%32) [cols]
      !s17 = ToStream(!34) [False]
      !s18 = StreamMap(!s17) { (%elt10) =>
        !35 = IsNA(%elt10)
        If !35 then {
          NA [Struct{}]
        } else {
          Literal [Struct{}, <literal value>]
        }
      }
      !36 = ToArray(!s18)
      MakeStruct(cols: !36)
    } 
    !38 = GetField(%30) [__iruid_1054]
    MakeStruct(__iruid_1052: !37, __iruid_1054: !38)
  } 
  !40 = Str ["iteration="] 
  !41 = Apply(%loopvar2) [-1, str, (), String]
  !42 = Apply(!40, !41) [-1, concat, (), String] 
  !43 = Str [",nParts="]
  !44 = Apply(!42, !43) [-1, concat, (), String] 
  !45 = Apply(%loopvar) [-1, str, (), String]
  !46 = Apply(!44, !45) [-1, concat, (), String]
  %155 = CollectDistributedArray(!s16, !39, !46) {
  (%ctx, %g) =>
    %47 = GetField(%g) [__iruid_1054]
    %48 = GetField(%g) [__iruid_1052]
    %49 = GetTupleElement(%ctx) [1]
    %50 = GetTupleElement(%ctx) [2]
    %51 = GetTupleElement(%50) [0]
    !c0_6 = I32 [0] 
    !c1_5 = I32 [1]
    !s19 = StreamIota(!c0_6, !c1_5) [False] 
    !52 = RNGStateLiteral
    %53 = RNGSplit(!52, %51)
    %54 = GetTupleElement(%50) [1]
    !55 = GetTupleElement(%54) [0] 
    !56 = GetTupleElement(%54) [1] 
    !c1_6 = I32 [1]
    !s20 = StreamRange(!55, !56, !c1_6) [3, False]
    !s26 = StreamMap(!s20) { (%elt11) =>
      !57 = Cast(%elt11) [Int64]
      %58 = MakeTuple(!57, %elt11) [(0 1)]
      !59 = GetTupleElement(%58) [0]
      %60 = RNGSplit(%53, !59)
      !61 = F64 [0.1] 
      !62 = F64 [0.9]
      %63 = ApplySeeded(!61, !62, %60) [rand_unif, -1, Float64]
      !64 = GetTupleElement(%58) [1]
      !65 = Cast(!64) [Int64]
      !66 = Apply(!65) [5, globalPosToLocus, 
      (), Locus(GRCh37)] 
      !67 = EncodedLiteral [Array[String]] 
      !68 = EncodedLiteral [Array[Float64]]
      !s21 = ToStream(!68) [False] 
      !c0_7 = I32 [0] 
      !c1_7 = I32 [1]
      !s22 = StreamIota(!c0_7, !c1_7) [False]
      !s23 = StreamZip(!s21, !s22) [7, TakeMinLength] {
      (%elt12, %elt13) =>
        !69 = Cast(%elt13) [Int64]
        %70 = MakeTuple(!69, %elt12) [(0 1)]
        %71 = GetTupleElement(%70) [1]
        !72 = ApplyBinaryPrimOp(%63, %71) [Multiply] 
        !73 = F64 [1.0]
        !74 = ApplyBinaryPrimOp(!73, %63) [Subtract]
        !75 = ApplyBinaryPrimOp(!74, %71) [Multiply] 
        !76 = GetTupleElement(%70) [0]
        !77 = RNGSplit(%60, !76)
        ApplySeeded(!72, !75, !77) [rand_beta, 1, Float64]
      }
      !78 = ToArray(!s23) 
      !c0_8 = I32 [0] 
      !c10_2 = I32 [10] 
      !c1_8 = I32 [1]
      !s24 = StreamRange(!c0_8, !c10_2, !c1_8) [8, False]
      !s25 = StreamMap(!s24) { (%elt14) =>
        Literal [Struct{}, <literal value>]
      }
      !79 = ToArray(!s25)
      MakeStruct(locus: !66, alleles: !67, af: !78, entries: !79)
    }
    !s27 = StreamZip(!s19, !s26) [36, TakeMinLength] {
    (%elt15, %elt16) =>
      !80 = Cast(%elt15) [Int64]
      !81 = MakeTuple(%51, !80) [(0 1)]
      InsertFields %elt16 (__row_uid: !81)
    }
    !s28 = StreamMap(!s27) { (%elt17) =>
      !82 = SelectFields(%elt17) [(locus alleles)]
      !83 = ApplySpecial(%49, !82) [-1, contains, 
      (), Boolean]
      If !83 then { %elt17 } else {
        !84 = Str ["TableGen: ..."] 
        !85 = GetTupleElement(%ctx) [0]
        !86 = Apply(!85) [-1, str, (), String]
        !87 = Apply(!84, !86) [-1, concat, (), String] 
        !88 = Str ["\n\tRange bo..."]
        !89 = Apply(!87, !88) [-1, concat, (), String] 
        !90 = GetTupleElement(%ctx) [0]
        !91 = Apply(!90) [-1, str, (), String]
        !92 = Apply(!89, !91) [-1, concat, (), String] 
        !93 = Str [": "]
        !94 = Apply(!92, !93) [-1, concat, (), String] 
        !95 = Apply(%49) [-1, str, (), String]
        !96 = Apply(!94, !95) [-1, concat, (), String] 
        !97 = Str ["\n\tInvalid ..."]
        !98 = Apply(!96, !97) [-1, concat, (), String] 
        !99 = SelectFields(%elt17) [(locus alleles)]
        !100 = Apply(!99) [-1, str, (), String]
        !101 = Apply(!98, !100) [-1, concat, (), String]
        Die(!101) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, 9]
      }
    }
    !s29 = StreamMap(!s28) { (%elt18) =>
      %102 = GetField(%elt18) [entries]
      !103 = IsNA(%102)
      If !103 then {
        !104 = Str ["missing en..."]
        Die(!104) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, -1]
      } else {
        !105 = GetField(%48) [cols]
        %106 = ArrayLen(!105)
        %107 = ArrayLen(%102)
        !108 = ApplyComparisonOp(%107, %106) [NEQWithNA]
        If !108 then {
          !109 = Str ["length mis..."] 
          !110 = Apply(%107) [-1, str, (), String]
          !111 = Apply(!109, !110) [-1, concat, (), String] 
          !112 = Str [" entries, "]
          !113 = Apply(!111, !112) [-1, concat, (), String] 
          !114 = Apply(%106) [-1, str, (), String]
          !115 = Apply(!113, !114) [-1, concat, (), String] 
          !116 = Str [" cols, at "]
          !117 = Apply(!115, !116) [-1, concat, (), String] 
          !118 = SelectFields(%elt18) [(locus alleles)]
          !119 = Apply(!118) [-1, str, (), String]
          !120 = Apply(!117, !119) [-1, concat, (), String]
          Die(!120) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, -1]
        } else { %elt18 }
      }
    }
    !s33 = StreamMap(!s29) { (%elt19) =>
      %121 = CastRename(%elt19) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],`the entries! [877f12a8827e18f61222c6c8c5fb04a8]`:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}]
      !122 = SelectFields(%121) [(locus alleles)] 
      !123 = GetField(%121) [`the entries! [877f12a8827e18f61222c6c8c5fb04a8]`]
      !s30 = ToStream(!123) [False] 
      !124 = GetField(%47) [__cols]
      !s31 = ToStream(!124) [False]
      !s32 = StreamZip(!s30, !s31) [-1, AssumeSameLength] {
      (%elt20, %elt21) =>
        %125 = GetField(%121) [__row_uid]
        !126 = GetField(%121) [af] 
        !127 = GetField(%elt21) [pop]
        %128 = ApplyIR(!126, !127) [10, indexArray, 
        (), Float64]
        !129 = F64 [1.0]
        %130 = ApplyBinaryPrimOp(!129, %128) [Subtract]
        !131 = F64 [2.0]
        !132 = Apply(%130, !131) [13, pow, (), Float64] 
        !133 = F64 [2.0]
        !134 = ApplyBinaryPrimOp(!133, %128) [Multiply]
        !135 = ApplyBinaryPrimOp(!134, %130) [Multiply] 
        !136 = F64 [2.0]
        !137 = Apply(%128, !136) [16, pow, (), Float64]
        !138 = MakeArray(!132, !135, !137) [Array[Float64]] 
        !139 = RNGStateLiteral 
        !140 = GetTupleElement(%125) [0] 
        !141 = GetTupleElement(%125) [1] 
        !142 = GetField(%elt21) [__col_uid]
        !143 = MakeTuple(!140, !141, !142) [(0 1 2)]
        !144 = RNGSplit(!139, !143)
        !145 = ApplySeeded(!138, !144) [rand_cat, 2, Int32]
        !146 = Apply(!145) [17, UnphasedDiploidGtIndexCall, 
        (), Call]
        InsertFields %elt20 (GT: !146)
      }
      !147 = ToArray(!s32)
      InsertFields !122 (the entries! [877f12a8827e18f61222c6c8c5fb04a8]: !147)
    }
    !s34 = StreamMap(!s33) { (%elt22) =>
      %148 = CastRename(%elt22) [Struct{locus:Locus(GRCh37),alleles:Array[String],entries:Array[Struct{GT:Call}]}]
      %149 = GetField(%148) [entries]
      !150 = SelectFields(%148) [(locus alleles)] 
      !c0_9 = I32 [0]
      !151 = ArrayRef(%149, !c0_9) [24] 
      !c1_9 = I32 [1]
      !152 = ArrayRef(%149, !c1_9) [25] 
      !c2 = I32 [2]
      !153 = ArrayRef(%149, !c2) [26] 
      !c3 = I32 [3]
      !154 = ArrayRef(%149, !c3) [27]
      InsertFields !150 (0: !151, 1: !152, 2: !153, 3: !154)
    } 
    !c11 = I32 [11]
    !s35 = StreamTake(!s34, !c11)
    StreamLen(!s35)
  }
  !s36 = ToStream(%155) [False] 
  !c0_10 = I32 [0]
  !156 = StreamFold(!s36, !c0_10) {
  (%accum, %elt23) =>
    ApplyBinaryPrimOp(%accum, %elt23) [Add]
  }
  !157 = Cast(!156) [Int64] 
  !158 = I64 [11]
  !159 = ApplyComparisonOp(!157, !158) [GTEQ] 
  !160 = ArrayLen(%13) 
  !161 = ArrayLen(%155)
  !162 = ApplyComparisonOp(!160, !161) [LTEQ]
  !163 = ApplySpecial(!159, !162) [-1, lor, 
  (), Boolean]
  If !163 then { %155 } else {
    !c4_2 = I32 [4]
    !164 = ApplyBinaryPrimOp(%loopvar, !c4_2) [Multiply] 
    !c1_10 = I32 [1]
    !165 = ApplyBinaryPrimOp(%loopvar2, !c1_10) [Add]
    Recur(!164, !165) [Array[Int32]]
  }
}
%167 = ArrayLen(%166)
!c0_11 = I32 [0]
!168 = ApplyComparisonOp(%167, !c0_11) [EQWithNA]
%183 = If !168 then {
  Literal [Tuple[Int32,Int64], <literal value>]
} else {
  !c0_12 = I32 [0] 
  !169 = I64 [11]
  TailLoop(!c0_12, !169) {
  (%loopvar3, %loopvar4, %loop2) =>
    !c1_11 = I32 [1]
    !170 = ApplyBinaryPrimOp(%167, !c1_11) [Subtract]
    !171 = ApplyComparisonOp(%loopvar3, !170) [EQWithNA] 
    !172 = ArrayRef(%166, %loopvar3) [-1]
    !173 = Cast(!172) [Int64]
    !174 = ApplyBinaryPrimOp(%loopvar4, !173) [Subtract] 
    !175 = I64 [0]
    !176 = ApplyComparisonOp(!174, !175) [LTEQ]
    !177 = ApplySpecial(!171, !176) [-1, lor, 
    (), Boolean]
    If !177 then {
      !c1_12 = I32 [1]
      !178 = ApplyBinaryPrimOp(%loopvar3, !c1_12) [Add]
      MakeTuple(!178, %loopvar4) [(0 1)]
    } else {
      !c1_13 = I32 [1]
      !179 = ApplyBinaryPrimOp(%loopvar3, !c1_13) [Add] 
      !180 = ArrayRef(%166, %loopvar3) [-1]
      !181 = Cast(!180) [Int64]
      !182 = ApplyBinaryPrimOp(%loopvar4, !181) [Subtract]
      Recur(!179, !182) [Tuple[Int32,Int64]]
    }
  }
}
!s37 = ToStream(%13) [False] 
!184 = GetTupleElement(%183) [0]
!s38 = StreamTake(!s37, !184) 
!c0_13 = I32 [0] 
!185 = GetTupleElement(%183) [0] 
!c1_14 = I32 [1]
!s39 = StreamRange(!c0_13, !185, !c1_14) [-1, False]
!s40 = StreamMap(!s39) { (%elt24) =>
  !186 = GetTupleElement(%183) [0] 
  !c1_15 = I32 [1]
  !187 = ApplyBinaryPrimOp(!186, !c1_15) [Subtract]
  !188 = ApplyComparisonOp(%elt24, !187) [EQWithNA]
  If !188 then {
    !189 = GetTupleElement(%183) [1]
    Cast(!189) [Int32]
  } else {
    ArrayRef(%166, %elt24) [-1]
  }
}
!s41 = StreamZip(!s38, !s40) [-1, AssumeSameLength] {
(%elt25, %elt26) =>
  MakeStruct(numberToTake: %elt26, old: %elt25)
}
ToArray(!s41)

2023-11-17 18:07:57.667 : INFO: after optimize: relationalLowerer, after LowerMatrixToTable: IR size 470: 

!1 = EncodedLiteral [Array[Tuple[Int32,Int32]]]
!s = ToStream(!1) [False] 
!c0 = I32 [0] 
!c1 = I32 [1]
!s2 = StreamIota(!c0, !c1) [False]
!s3 = StreamZip(!s, !s2) [35, TakeMinLength] {
(%elt, %elt2) =>
  !2 = Cast(%elt2) [Int64]
  MakeTuple(!2, %elt) [(0 1)]
}
%3 = ToArray(!s3)
%4 = ArrayLen(%3)
!c0_2 = I32 [0] 
!c8 = I32 [8] 
!c1_2 = I32 [1]
!s4 = StreamRange(!c0_2, !c8, !c1_2) [-1, False] 
!5 = Literal [Array[Interval[Struct{locus:Locus(GRCh37),alleles:Array[String]}]], <literal value>]
!s5 = ToStream(!5) [False] 
!c8_2 = I32 [8]
!6 = ApplyComparisonOp(%4, !c8_2) [EQWithNA]
!12 = If !6 then { %3 } else {
  !7 = Str ["TableGen: ..."] 
  !8 = Apply(%4) [-1, str, (), String]
  !9 = Apply(!7, !8) [-1, concat, (), String] 
  !10 = Str [" contexts."]
  !11 = Apply(!9, !10) [-1, concat, (), String]
  Die(!11) [Array[Tuple[Int64,Tuple[Int32,Int32]]], 9]
}
!s6 = ToStream(!12) [False]
!s7 = StreamZip(!s4, !s5, !s6) [9, AssertSameLength] {
(%elt3, %elt4, %elt5) =>
  MakeTuple(%elt3, %elt4, %elt5) [(0 1 2)]
}
%13 = ToArray(!s7)
!c4 = I32 [4] 
!c0_3 = I32 [0]
%166 = TailLoop(!c4, !c0_3) {
(%loopvar, %loopvar2, %loop) =>
  %14 = RNGStateLiteral
  !c0_4 = I32 [0] 
  !c10 = I32 [10] 
  !c1_3 = I32 [1]
  !s8 = StreamRange(!c0_4, !c10, !c1_3) [1, False]
  !s11 = StreamMap(!s8) { (%elt6) =>
    !15 = Cast(%elt6) [Int64]
    %16 = MakeTuple(!15, %elt6) [(0 1)]
    !17 = GetTupleElement(%16) [1] 
    !18 = EncodedLiteral [Array[Int32]]
    !s9 = ToStream(!18) [False]
    !s10 = StreamMap(!s9) { (%elt7) =>
      Cast(%elt7) [Float64]
    }
    !19 = ToArray(!s10) 
    !20 = GetTupleElement(%16) [0]
    !21 = RNGSplit(%14, !20)
    !22 = ApplySeeded(!19, !21) [rand_cat, 0, Int32]
    MakeStruct(sample_idx: !17, pop: !22)
  }
  !23 = ToArray(!s11)
  %24 = MakeStruct(cols: !23)
  !25 = GetField(%24) [cols]
  !s12 = ToStream(!25) [False] 
  !c0_5 = I32 [0] 
  !c1_4 = I32 [1]
  !s13 = StreamIota(!c0_5, !c1_4) [False]
  !s14 = StreamZip(!s12, !s13) [34, TakeMinLength] {
  (%elt8, %elt9) =>
    !26 = Cast(%elt9) [Int64]
    InsertFields %elt8 (__col_uid: !26)
  }
  !27 = ToArray(!s14)
  %28 = InsertFields %24 (cols: !27)
  !s15 = ToStream(%13) [False]
  !s16 = StreamTake(!s15, %loopvar) 
  !29 = CastRename(%28) [Struct{__cols:Array[Struct{sample_idx:Int32,pop:Int32,__col_uid:Int64}]}]
  %30 = MakeStruct(__iruid_1052: %28, __iruid_1054: !29)
  !31 = IsNA(%30)
  !39 = If !31 then {
    NA [Struct{__iruid_1052:Struct{cols:Array[Struct{}]},__iruid_1054:Struct{__cols:Array[Struct{sample_idx:Int32,pop:Int32,__col_uid:Int64}]}}]
  } else {
    %32 = GetField(%30) [__iruid_1052]
    !33 = IsNA(%32)
    !37 = If !33 then {
      NA [Struct{cols:Array[Struct{}]}]
    } else {
      !34 = GetField(%32) [cols]
      !s17 = ToStream(!34) [False]
      !s18 = StreamMap(!s17) { (%elt10) =>
        !35 = IsNA(%elt10)
        If !35 then {
          NA [Struct{}]
        } else {
          Literal [Struct{}, <literal value>]
        }
      }
      !36 = ToArray(!s18)
      MakeStruct(cols: !36)
    } 
    !38 = GetField(%30) [__iruid_1054]
    MakeStruct(__iruid_1052: !37, __iruid_1054: !38)
  } 
  !40 = Str ["iteration="] 
  !41 = Apply(%loopvar2) [-1, str, (), String]
  !42 = Apply(!40, !41) [-1, concat, (), String] 
  !43 = Str [",nParts="]
  !44 = Apply(!42, !43) [-1, concat, (), String] 
  !45 = Apply(%loopvar) [-1, str, (), String]
  !46 = Apply(!44, !45) [-1, concat, (), String]
  %155 = CollectDistributedArray(!s16, !39, !46) {
  (%ctx, %g) =>
    %47 = GetField(%g) [__iruid_1054]
    %48 = GetField(%g) [__iruid_1052]
    %49 = GetTupleElement(%ctx) [1]
    %50 = GetTupleElement(%ctx) [2]
    %51 = GetTupleElement(%50) [0]
    !c0_6 = I32 [0] 
    !c1_5 = I32 [1]
    !s19 = StreamIota(!c0_6, !c1_5) [False] 
    !52 = RNGStateLiteral
    %53 = RNGSplit(!52, %51)
    %54 = GetTupleElement(%50) [1]
    !55 = GetTupleElement(%54) [0] 
    !56 = GetTupleElement(%54) [1] 
    !c1_6 = I32 [1]
    !s20 = StreamRange(!55, !56, !c1_6) [3, False]
    !s26 = StreamMap(!s20) { (%elt11) =>
      !57 = Cast(%elt11) [Int64]
      %58 = MakeTuple(!57, %elt11) [(0 1)]
      !59 = GetTupleElement(%58) [0]
      %60 = RNGSplit(%53, !59)
      !61 = F64 [0.1] 
      !62 = F64 [0.9]
      %63 = ApplySeeded(!61, !62, %60) [rand_unif, -1, Float64]
      !64 = GetTupleElement(%58) [1]
      !65 = Cast(!64) [Int64]
      !66 = Apply(!65) [5, globalPosToLocus, 
      (), Locus(GRCh37)] 
      !67 = EncodedLiteral [Array[String]] 
      !68 = EncodedLiteral [Array[Float64]]
      !s21 = ToStream(!68) [False] 
      !c0_7 = I32 [0] 
      !c1_7 = I32 [1]
      !s22 = StreamIota(!c0_7, !c1_7) [False]
      !s23 = StreamZip(!s21, !s22) [7, TakeMinLength] {
      (%elt12, %elt13) =>
        !69 = Cast(%elt13) [Int64]
        %70 = MakeTuple(!69, %elt12) [(0 1)]
        %71 = GetTupleElement(%70) [1]
        !72 = ApplyBinaryPrimOp(%63, %71) [Multiply] 
        !73 = F64 [1.0]
        !74 = ApplyBinaryPrimOp(!73, %63) [Subtract]
        !75 = ApplyBinaryPrimOp(!74, %71) [Multiply] 
        !76 = GetTupleElement(%70) [0]
        !77 = RNGSplit(%60, !76)
        ApplySeeded(!72, !75, !77) [rand_beta, 1, Float64]
      }
      !78 = ToArray(!s23) 
      !c0_8 = I32 [0] 
      !c10_2 = I32 [10] 
      !c1_8 = I32 [1]
      !s24 = StreamRange(!c0_8, !c10_2, !c1_8) [8, False]
      !s25 = StreamMap(!s24) { (%elt14) =>
        Literal [Struct{}, <literal value>]
      }
      !79 = ToArray(!s25)
      MakeStruct(locus: !66, alleles: !67, af: !78, entries: !79)
    }
    !s27 = StreamZip(!s19, !s26) [36, TakeMinLength] {
    (%elt15, %elt16) =>
      !80 = Cast(%elt15) [Int64]
      !81 = MakeTuple(%51, !80) [(0 1)]
      InsertFields %elt16 (__row_uid: !81)
    }
    !s28 = StreamMap(!s27) { (%elt17) =>
      !82 = SelectFields(%elt17) [(locus alleles)]
      !83 = ApplySpecial(%49, !82) [-1, contains, 
      (), Boolean]
      If !83 then { %elt17 } else {
        !84 = Str ["TableGen: ..."] 
        !85 = GetTupleElement(%ctx) [0]
        !86 = Apply(!85) [-1, str, (), String]
        !87 = Apply(!84, !86) [-1, concat, (), String] 
        !88 = Str ["\n\tRange bo..."]
        !89 = Apply(!87, !88) [-1, concat, (), String] 
        !90 = GetTupleElement(%ctx) [0]
        !91 = Apply(!90) [-1, str, (), String]
        !92 = Apply(!89, !91) [-1, concat, (), String] 
        !93 = Str [": "]
        !94 = Apply(!92, !93) [-1, concat, (), String] 
        !95 = Apply(%49) [-1, str, (), String]
        !96 = Apply(!94, !95) [-1, concat, (), String] 
        !97 = Str ["\n\tInvalid ..."]
        !98 = Apply(!96, !97) [-1, concat, (), String] 
        !99 = SelectFields(%elt17) [(locus alleles)]
        !100 = Apply(!99) [-1, str, (), String]
        !101 = Apply(!98, !100) [-1, concat, (), String]
        Die(!101) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, 9]
      }
    }
    !s29 = StreamMap(!s28) { (%elt18) =>
      %102 = GetField(%elt18) [entries]
      !103 = IsNA(%102)
      If !103 then {
        !104 = Str ["missing en..."]
        Die(!104) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, -1]
      } else {
        !105 = GetField(%48) [cols]
        %106 = ArrayLen(!105)
        %107 = ArrayLen(%102)
        !108 = ApplyComparisonOp(%107, %106) [NEQWithNA]
        If !108 then {
          !109 = Str ["length mis..."] 
          !110 = Apply(%107) [-1, str, (), String]
          !111 = Apply(!109, !110) [-1, concat, (), String] 
          !112 = Str [" entries, "]
          !113 = Apply(!111, !112) [-1, concat, (), String] 
          !114 = Apply(%106) [-1, str, (), String]
          !115 = Apply(!113, !114) [-1, concat, (), String] 
          !116 = Str [" cols, at "]
          !117 = Apply(!115, !116) [-1, concat, (), String] 
          !118 = SelectFields(%elt18) [(locus alleles)]
          !119 = Apply(!118) [-1, str, (), String]
          !120 = Apply(!117, !119) [-1, concat, (), String]
          Die(!120) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, -1]
        } else { %elt18 }
      }
    }
    !s33 = StreamMap(!s29) { (%elt19) =>
      %121 = CastRename(%elt19) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],`the entries! [877f12a8827e18f61222c6c8c5fb04a8]`:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}]
      !122 = SelectFields(%121) [(locus alleles)] 
      !123 = GetField(%121) [`the entries! [877f12a8827e18f61222c6c8c5fb04a8]`]
      !s30 = ToStream(!123) [False] 
      !124 = GetField(%47) [__cols]
      !s31 = ToStream(!124) [False]
      !s32 = StreamZip(!s30, !s31) [-1, AssumeSameLength] {
      (%elt20, %elt21) =>
        %125 = GetField(%121) [__row_uid]
        !126 = GetField(%121) [af] 
        !127 = GetField(%elt21) [pop]
        %128 = ApplyIR(!126, !127) [10, indexArray, 
        (), Float64]
        !129 = F64 [1.0]
        %130 = ApplyBinaryPrimOp(!129, %128) [Subtract]
        !131 = F64 [2.0]
        !132 = Apply(%130, !131) [13, pow, (), Float64] 
        !133 = F64 [2.0]
        !134 = ApplyBinaryPrimOp(!133, %128) [Multiply]
        !135 = ApplyBinaryPrimOp(!134, %130) [Multiply] 
        !136 = F64 [2.0]
        !137 = Apply(%128, !136) [16, pow, (), Float64]
        !138 = MakeArray(!132, !135, !137) [Array[Float64]] 
        !139 = RNGStateLiteral 
        !140 = GetTupleElement(%125) [0] 
        !141 = GetTupleElement(%125) [1] 
        !142 = GetField(%elt21) [__col_uid]
        !143 = MakeTuple(!140, !141, !142) [(0 1 2)]
        !144 = RNGSplit(!139, !143)
        !145 = ApplySeeded(!138, !144) [rand_cat, 2, Int32]
        !146 = Apply(!145) [17, UnphasedDiploidGtIndexCall, 
        (), Call]
        InsertFields %elt20 (GT: !146)
      }
      !147 = ToArray(!s32)
      InsertFields !122 (the entries! [877f12a8827e18f61222c6c8c5fb04a8]: !147)
    }
    !s34 = StreamMap(!s33) { (%elt22) =>
      %148 = CastRename(%elt22) [Struct{locus:Locus(GRCh37),alleles:Array[String],entries:Array[Struct{GT:Call}]}]
      %149 = GetField(%148) [entries]
      !150 = SelectFields(%148) [(locus alleles)] 
      !c0_9 = I32 [0]
      !151 = ArrayRef(%149, !c0_9) [24] 
      !c1_9 = I32 [1]
      !152 = ArrayRef(%149, !c1_9) [25] 
      !c2 = I32 [2]
      !153 = ArrayRef(%149, !c2) [26] 
      !c3 = I32 [3]
      !154 = ArrayRef(%149, !c3) [27]
      InsertFields !150 (0: !151, 1: !152, 2: !153, 3: !154)
    } 
    !c11 = I32 [11]
    !s35 = StreamTake(!s34, !c11)
    StreamLen(!s35)
  }
  !s36 = ToStream(%155) [False] 
  !c0_10 = I32 [0]
  !156 = StreamFold(!s36, !c0_10) {
  (%accum, %elt23) =>
    ApplyBinaryPrimOp(%accum, %elt23) [Add]
  }
  !157 = Cast(!156) [Int64] 
  !158 = I64 [11]
  !159 = ApplyComparisonOp(!157, !158) [GTEQ] 
  !160 = ArrayLen(%13) 
  !161 = ArrayLen(%155)
  !162 = ApplyComparisonOp(!160, !161) [LTEQ]
  !163 = ApplySpecial(!159, !162) [-1, lor, 
  (), Boolean]
  If !163 then { %155 } else {
    !c4_2 = I32 [4]
    !164 = ApplyBinaryPrimOp(%loopvar, !c4_2) [Multiply] 
    !c1_10 = I32 [1]
    !165 = ApplyBinaryPrimOp(%loopvar2, !c1_10) [Add]
    Recur(!164, !165) [Array[Int32]]
  }
}
%167 = ArrayLen(%166)
!c0_11 = I32 [0]
!168 = ApplyComparisonOp(%167, !c0_11) [EQWithNA]
%183 = If !168 then {
  Literal [Tuple[Int32,Int64], <literal value>]
} else {
  !c0_12 = I32 [0] 
  !169 = I64 [11]
  TailLoop(!c0_12, !169) {
  (%loopvar3, %loopvar4, %loop2) =>
    !c1_11 = I32 [1]
    !170 = ApplyBinaryPrimOp(%167, !c1_11) [Subtract]
    !171 = ApplyComparisonOp(%loopvar3, !170) [EQWithNA] 
    !172 = ArrayRef(%166, %loopvar3) [-1]
    !173 = Cast(!172) [Int64]
    !174 = ApplyBinaryPrimOp(%loopvar4, !173) [Subtract] 
    !175 = I64 [0]
    !176 = ApplyComparisonOp(!174, !175) [LTEQ]
    !177 = ApplySpecial(!171, !176) [-1, lor, 
    (), Boolean]
    If !177 then {
      !c1_12 = I32 [1]
      !178 = ApplyBinaryPrimOp(%loopvar3, !c1_12) [Add]
      MakeTuple(!178, %loopvar4) [(0 1)]
    } else {
      !c1_13 = I32 [1]
      !179 = ApplyBinaryPrimOp(%loopvar3, !c1_13) [Add] 
      !180 = ArrayRef(%166, %loopvar3) [-1]
      !181 = Cast(!180) [Int64]
      !182 = ApplyBinaryPrimOp(%loopvar4, !181) [Subtract]
      Recur(!179, !182) [Tuple[Int32,Int64]]
    }
  }
}
!s37 = ToStream(%13) [False] 
!184 = GetTupleElement(%183) [0]
!s38 = StreamTake(!s37, !184) 
!c0_13 = I32 [0] 
!185 = GetTupleElement(%183) [0] 
!c1_14 = I32 [1]
!s39 = StreamRange(!c0_13, !185, !c1_14) [-1, False]
!s40 = StreamMap(!s39) { (%elt24) =>
  !186 = GetTupleElement(%183) [0] 
  !c1_15 = I32 [1]
  !187 = ApplyBinaryPrimOp(!186, !c1_15) [Subtract]
  !188 = ApplyComparisonOp(%elt24, !187) [EQWithNA]
  If !188 then {
    !189 = GetTupleElement(%183) [1]
    Cast(!189) [Int32]
  } else {
    ArrayRef(%166, %elt24) [-1]
  }
}
!s41 = StreamZip(!s38, !s40) [-1, AssumeSameLength] {
(%elt25, %elt26) =>
  MakeStruct(numberToTake: %elt26, old: %elt25)
}
ToArray(!s41)

2023-11-17 18:07:57.678 : INFO: after LiftRelationalValuesToRelationalLets: IR size 470: 

!1 = EncodedLiteral [Array[Tuple[Int32,Int32]]]
!s = ToStream(!1) [False] 
!c0 = I32 [0] 
!c1 = I32 [1]
!s2 = StreamIota(!c0, !c1) [False]
!s3 = StreamZip(!s, !s2) [35, TakeMinLength] {
(%elt, %elt2) =>
  !2 = Cast(%elt2) [Int64]
  MakeTuple(!2, %elt) [(0 1)]
}
%3 = ToArray(!s3)
%4 = ArrayLen(%3)
!c0_2 = I32 [0] 
!c8 = I32 [8] 
!c1_2 = I32 [1]
!s4 = StreamRange(!c0_2, !c8, !c1_2) [-1, False] 
!5 = Literal [Array[Interval[Struct{locus:Locus(GRCh37),alleles:Array[String]}]], <literal value>]
!s5 = ToStream(!5) [False] 
!c8_2 = I32 [8]
!6 = ApplyComparisonOp(%4, !c8_2) [EQWithNA]
!12 = If !6 then { %3 } else {
  !7 = Str ["TableGen: ..."] 
  !8 = Apply(%4) [-1, str, (), String]
  !9 = Apply(!7, !8) [-1, concat, (), String] 
  !10 = Str [" contexts."]
  !11 = Apply(!9, !10) [-1, concat, (), String]
  Die(!11) [Array[Tuple[Int64,Tuple[Int32,Int32]]], 9]
}
!s6 = ToStream(!12) [False]
!s7 = StreamZip(!s4, !s5, !s6) [9, AssertSameLength] {
(%elt3, %elt4, %elt5) =>
  MakeTuple(%elt3, %elt4, %elt5) [(0 1 2)]
}
%13 = ToArray(!s7)
!c4 = I32 [4] 
!c0_3 = I32 [0]
%166 = TailLoop(!c4, !c0_3) {
(%loopvar, %loopvar2, %loop) =>
  %14 = RNGStateLiteral
  !c0_4 = I32 [0] 
  !c10 = I32 [10] 
  !c1_3 = I32 [1]
  !s8 = StreamRange(!c0_4, !c10, !c1_3) [1, False]
  !s11 = StreamMap(!s8) { (%elt6) =>
    !15 = Cast(%elt6) [Int64]
    %16 = MakeTuple(!15, %elt6) [(0 1)]
    !17 = GetTupleElement(%16) [1] 
    !18 = EncodedLiteral [Array[Int32]]
    !s9 = ToStream(!18) [False]
    !s10 = StreamMap(!s9) { (%elt7) =>
      Cast(%elt7) [Float64]
    }
    !19 = ToArray(!s10) 
    !20 = GetTupleElement(%16) [0]
    !21 = RNGSplit(%14, !20)
    !22 = ApplySeeded(!19, !21) [rand_cat, 0, Int32]
    MakeStruct(sample_idx: !17, pop: !22)
  }
  !23 = ToArray(!s11)
  %24 = MakeStruct(cols: !23)
  !25 = GetField(%24) [cols]
  !s12 = ToStream(!25) [False] 
  !c0_5 = I32 [0] 
  !c1_4 = I32 [1]
  !s13 = StreamIota(!c0_5, !c1_4) [False]
  !s14 = StreamZip(!s12, !s13) [34, TakeMinLength] {
  (%elt8, %elt9) =>
    !26 = Cast(%elt9) [Int64]
    InsertFields %elt8 (__col_uid: !26)
  }
  !27 = ToArray(!s14)
  %28 = InsertFields %24 (cols: !27)
  !s15 = ToStream(%13) [False]
  !s16 = StreamTake(!s15, %loopvar) 
  !29 = CastRename(%28) [Struct{__cols:Array[Struct{sample_idx:Int32,pop:Int32,__col_uid:Int64}]}]
  %30 = MakeStruct(__iruid_1052: %28, __iruid_1054: !29)
  !31 = IsNA(%30)
  !39 = If !31 then {
    NA [Struct{__iruid_1052:Struct{cols:Array[Struct{}]},__iruid_1054:Struct{__cols:Array[Struct{sample_idx:Int32,pop:Int32,__col_uid:Int64}]}}]
  } else {
    %32 = GetField(%30) [__iruid_1052]
    !33 = IsNA(%32)
    !37 = If !33 then {
      NA [Struct{cols:Array[Struct{}]}]
    } else {
      !34 = GetField(%32) [cols]
      !s17 = ToStream(!34) [False]
      !s18 = StreamMap(!s17) { (%elt10) =>
        !35 = IsNA(%elt10)
        If !35 then {
          NA [Struct{}]
        } else {
          Literal [Struct{}, <literal value>]
        }
      }
      !36 = ToArray(!s18)
      MakeStruct(cols: !36)
    } 
    !38 = GetField(%30) [__iruid_1054]
    MakeStruct(__iruid_1052: !37, __iruid_1054: !38)
  } 
  !40 = Str ["iteration="] 
  !41 = Apply(%loopvar2) [-1, str, (), String]
  !42 = Apply(!40, !41) [-1, concat, (), String] 
  !43 = Str [",nParts="]
  !44 = Apply(!42, !43) [-1, concat, (), String] 
  !45 = Apply(%loopvar) [-1, str, (), String]
  !46 = Apply(!44, !45) [-1, concat, (), String]
  %155 = CollectDistributedArray(!s16, !39, !46) {
  (%ctx, %g) =>
    %47 = GetField(%g) [__iruid_1054]
    %48 = GetField(%g) [__iruid_1052]
    %49 = GetTupleElement(%ctx) [1]
    %50 = GetTupleElement(%ctx) [2]
    %51 = GetTupleElement(%50) [0]
    !c0_6 = I32 [0] 
    !c1_5 = I32 [1]
    !s19 = StreamIota(!c0_6, !c1_5) [False] 
    !52 = RNGStateLiteral
    %53 = RNGSplit(!52, %51)
    %54 = GetTupleElement(%50) [1]
    !55 = GetTupleElement(%54) [0] 
    !56 = GetTupleElement(%54) [1] 
    !c1_6 = I32 [1]
    !s20 = StreamRange(!55, !56, !c1_6) [3, False]
    !s26 = StreamMap(!s20) { (%elt11) =>
      !57 = Cast(%elt11) [Int64]
      %58 = MakeTuple(!57, %elt11) [(0 1)]
      !59 = GetTupleElement(%58) [0]
      %60 = RNGSplit(%53, !59)
      !61 = F64 [0.1] 
      !62 = F64 [0.9]
      %63 = ApplySeeded(!61, !62, %60) [rand_unif, -1, Float64]
      !64 = GetTupleElement(%58) [1]
      !65 = Cast(!64) [Int64]
      !66 = Apply(!65) [5, globalPosToLocus, 
      (), Locus(GRCh37)] 
      !67 = EncodedLiteral [Array[String]] 
      !68 = EncodedLiteral [Array[Float64]]
      !s21 = ToStream(!68) [False] 
      !c0_7 = I32 [0] 
      !c1_7 = I32 [1]
      !s22 = StreamIota(!c0_7, !c1_7) [False]
      !s23 = StreamZip(!s21, !s22) [7, TakeMinLength] {
      (%elt12, %elt13) =>
        !69 = Cast(%elt13) [Int64]
        %70 = MakeTuple(!69, %elt12) [(0 1)]
        %71 = GetTupleElement(%70) [1]
        !72 = ApplyBinaryPrimOp(%63, %71) [Multiply] 
        !73 = F64 [1.0]
        !74 = ApplyBinaryPrimOp(!73, %63) [Subtract]
        !75 = ApplyBinaryPrimOp(!74, %71) [Multiply] 
        !76 = GetTupleElement(%70) [0]
        !77 = RNGSplit(%60, !76)
        ApplySeeded(!72, !75, !77) [rand_beta, 1, Float64]
      }
      !78 = ToArray(!s23) 
      !c0_8 = I32 [0] 
      !c10_2 = I32 [10] 
      !c1_8 = I32 [1]
      !s24 = StreamRange(!c0_8, !c10_2, !c1_8) [8, False]
      !s25 = StreamMap(!s24) { (%elt14) =>
        Literal [Struct{}, <literal value>]
      }
      !79 = ToArray(!s25)
      MakeStruct(locus: !66, alleles: !67, af: !78, entries: !79)
    }
    !s27 = StreamZip(!s19, !s26) [36, TakeMinLength] {
    (%elt15, %elt16) =>
      !80 = Cast(%elt15) [Int64]
      !81 = MakeTuple(%51, !80) [(0 1)]
      InsertFields %elt16 (__row_uid: !81)
    }
    !s28 = StreamMap(!s27) { (%elt17) =>
      !82 = SelectFields(%elt17) [(locus alleles)]
      !83 = ApplySpecial(%49, !82) [-1, contains, 
      (), Boolean]
      If !83 then { %elt17 } else {
        !84 = Str ["TableGen: ..."] 
        !85 = GetTupleElement(%ctx) [0]
        !86 = Apply(!85) [-1, str, (), String]
        !87 = Apply(!84, !86) [-1, concat, (), String] 
        !88 = Str ["\n\tRange bo..."]
        !89 = Apply(!87, !88) [-1, concat, (), String] 
        !90 = GetTupleElement(%ctx) [0]
        !91 = Apply(!90) [-1, str, (), String]
        !92 = Apply(!89, !91) [-1, concat, (), String] 
        !93 = Str [": "]
        !94 = Apply(!92, !93) [-1, concat, (), String] 
        !95 = Apply(%49) [-1, str, (), String]
        !96 = Apply(!94, !95) [-1, concat, (), String] 
        !97 = Str ["\n\tInvalid ..."]
        !98 = Apply(!96, !97) [-1, concat, (), String] 
        !99 = SelectFields(%elt17) [(locus alleles)]
        !100 = Apply(!99) [-1, str, (), String]
        !101 = Apply(!98, !100) [-1, concat, (), String]
        Die(!101) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, 9]
      }
    }
    !s29 = StreamMap(!s28) { (%elt18) =>
      %102 = GetField(%elt18) [entries]
      !103 = IsNA(%102)
      If !103 then {
        !104 = Str ["missing en..."]
        Die(!104) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, -1]
      } else {
        !105 = GetField(%48) [cols]
        %106 = ArrayLen(!105)
        %107 = ArrayLen(%102)
        !108 = ApplyComparisonOp(%107, %106) [NEQWithNA]
        If !108 then {
          !109 = Str ["length mis..."] 
          !110 = Apply(%107) [-1, str, (), String]
          !111 = Apply(!109, !110) [-1, concat, (), String] 
          !112 = Str [" entries, "]
          !113 = Apply(!111, !112) [-1, concat, (), String] 
          !114 = Apply(%106) [-1, str, (), String]
          !115 = Apply(!113, !114) [-1, concat, (), String] 
          !116 = Str [" cols, at "]
          !117 = Apply(!115, !116) [-1, concat, (), String] 
          !118 = SelectFields(%elt18) [(locus alleles)]
          !119 = Apply(!118) [-1, str, (), String]
          !120 = Apply(!117, !119) [-1, concat, (), String]
          Die(!120) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, -1]
        } else { %elt18 }
      }
    }
    !s33 = StreamMap(!s29) { (%elt19) =>
      %121 = CastRename(%elt19) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],`the entries! [877f12a8827e18f61222c6c8c5fb04a8]`:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}]
      !122 = SelectFields(%121) [(locus alleles)] 
      !123 = GetField(%121) [`the entries! [877f12a8827e18f61222c6c8c5fb04a8]`]
      !s30 = ToStream(!123) [False] 
      !124 = GetField(%47) [__cols]
      !s31 = ToStream(!124) [False]
      !s32 = StreamZip(!s30, !s31) [-1, AssumeSameLength] {
      (%elt20, %elt21) =>
        %125 = GetField(%121) [__row_uid]
        !126 = GetField(%121) [af] 
        !127 = GetField(%elt21) [pop]
        %128 = ApplyIR(!126, !127) [10, indexArray, 
        (), Float64]
        !129 = F64 [1.0]
        %130 = ApplyBinaryPrimOp(!129, %128) [Subtract]
        !131 = F64 [2.0]
        !132 = Apply(%130, !131) [13, pow, (), Float64] 
        !133 = F64 [2.0]
        !134 = ApplyBinaryPrimOp(!133, %128) [Multiply]
        !135 = ApplyBinaryPrimOp(!134, %130) [Multiply] 
        !136 = F64 [2.0]
        !137 = Apply(%128, !136) [16, pow, (), Float64]
        !138 = MakeArray(!132, !135, !137) [Array[Float64]] 
        !139 = RNGStateLiteral 
        !140 = GetTupleElement(%125) [0] 
        !141 = GetTupleElement(%125) [1] 
        !142 = GetField(%elt21) [__col_uid]
        !143 = MakeTuple(!140, !141, !142) [(0 1 2)]
        !144 = RNGSplit(!139, !143)
        !145 = ApplySeeded(!138, !144) [rand_cat, 2, Int32]
        !146 = Apply(!145) [17, UnphasedDiploidGtIndexCall, 
        (), Call]
        InsertFields %elt20 (GT: !146)
      }
      !147 = ToArray(!s32)
      InsertFields !122 (the entries! [877f12a8827e18f61222c6c8c5fb04a8]: !147)
    }
    !s34 = StreamMap(!s33) { (%elt22) =>
      %148 = CastRename(%elt22) [Struct{locus:Locus(GRCh37),alleles:Array[String],entries:Array[Struct{GT:Call}]}]
      %149 = GetField(%148) [entries]
      !150 = SelectFields(%148) [(locus alleles)] 
      !c0_9 = I32 [0]
      !151 = ArrayRef(%149, !c0_9) [24] 
      !c1_9 = I32 [1]
      !152 = ArrayRef(%149, !c1_9) [25] 
      !c2 = I32 [2]
      !153 = ArrayRef(%149, !c2) [26] 
      !c3 = I32 [3]
      !154 = ArrayRef(%149, !c3) [27]
      InsertFields !150 (0: !151, 1: !152, 2: !153, 3: !154)
    } 
    !c11 = I32 [11]
    !s35 = StreamTake(!s34, !c11)
    StreamLen(!s35)
  }
  !s36 = ToStream(%155) [False] 
  !c0_10 = I32 [0]
  !156 = StreamFold(!s36, !c0_10) {
  (%accum, %elt23) =>
    ApplyBinaryPrimOp(%accum, %elt23) [Add]
  }
  !157 = Cast(!156) [Int64] 
  !158 = I64 [11]
  !159 = ApplyComparisonOp(!157, !158) [GTEQ] 
  !160 = ArrayLen(%13) 
  !161 = ArrayLen(%155)
  !162 = ApplyComparisonOp(!160, !161) [LTEQ]
  !163 = ApplySpecial(!159, !162) [-1, lor, 
  (), Boolean]
  If !163 then { %155 } else {
    !c4_2 = I32 [4]
    !164 = ApplyBinaryPrimOp(%loopvar, !c4_2) [Multiply] 
    !c1_10 = I32 [1]
    !165 = ApplyBinaryPrimOp(%loopvar2, !c1_10) [Add]
    Recur(!164, !165) [Array[Int32]]
  }
}
%167 = ArrayLen(%166)
!c0_11 = I32 [0]
!168 = ApplyComparisonOp(%167, !c0_11) [EQWithNA]
%183 = If !168 then {
  Literal [Tuple[Int32,Int64], <literal value>]
} else {
  !c0_12 = I32 [0] 
  !169 = I64 [11]
  TailLoop(!c0_12, !169) {
  (%loopvar3, %loopvar4, %loop2) =>
    !c1_11 = I32 [1]
    !170 = ApplyBinaryPrimOp(%167, !c1_11) [Subtract]
    !171 = ApplyComparisonOp(%loopvar3, !170) [EQWithNA] 
    !172 = ArrayRef(%166, %loopvar3) [-1]
    !173 = Cast(!172) [Int64]
    !174 = ApplyBinaryPrimOp(%loopvar4, !173) [Subtract] 
    !175 = I64 [0]
    !176 = ApplyComparisonOp(!174, !175) [LTEQ]
    !177 = ApplySpecial(!171, !176) [-1, lor, 
    (), Boolean]
    If !177 then {
      !c1_12 = I32 [1]
      !178 = ApplyBinaryPrimOp(%loopvar3, !c1_12) [Add]
      MakeTuple(!178, %loopvar4) [(0 1)]
    } else {
      !c1_13 = I32 [1]
      !179 = ApplyBinaryPrimOp(%loopvar3, !c1_13) [Add] 
      !180 = ArrayRef(%166, %loopvar3) [-1]
      !181 = Cast(!180) [Int64]
      !182 = ApplyBinaryPrimOp(%loopvar4, !181) [Subtract]
      Recur(!179, !182) [Tuple[Int32,Int64]]
    }
  }
}
!s37 = ToStream(%13) [False] 
!184 = GetTupleElement(%183) [0]
!s38 = StreamTake(!s37, !184) 
!c0_13 = I32 [0] 
!185 = GetTupleElement(%183) [0] 
!c1_14 = I32 [1]
!s39 = StreamRange(!c0_13, !185, !c1_14) [-1, False]
!s40 = StreamMap(!s39) { (%elt24) =>
  !186 = GetTupleElement(%183) [0] 
  !c1_15 = I32 [1]
  !187 = ApplyBinaryPrimOp(!186, !c1_15) [Subtract]
  !188 = ApplyComparisonOp(%elt24, !187) [EQWithNA]
  If !188 then {
    !189 = GetTupleElement(%183) [1]
    Cast(!189) [Int32]
  } else {
    ArrayRef(%166, %elt24) [-1]
  }
}
!s41 = StreamZip(!s38, !s40) [-1, AssumeSameLength] {
(%elt25, %elt26) =>
  MakeStruct(numberToTake: %elt26, old: %elt25)
}
ToArray(!s41)

2023-11-17 18:07:57.687 : INFO: after EvalRelationalLets: IR size 470: 

!1 = EncodedLiteral [Array[Tuple[Int32,Int32]]]
!s = ToStream(!1) [False] 
!c0 = I32 [0] 
!c1 = I32 [1]
!s2 = StreamIota(!c0, !c1) [False]
!s3 = StreamZip(!s, !s2) [35, TakeMinLength] {
(%elt, %elt2) =>
  !2 = Cast(%elt2) [Int64]
  MakeTuple(!2, %elt) [(0 1)]
}
%3 = ToArray(!s3)
%4 = ArrayLen(%3)
!c0_2 = I32 [0] 
!c8 = I32 [8] 
!c1_2 = I32 [1]
!s4 = StreamRange(!c0_2, !c8, !c1_2) [-1, False] 
!5 = Literal [Array[Interval[Struct{locus:Locus(GRCh37),alleles:Array[String]}]], <literal value>]
!s5 = ToStream(!5) [False] 
!c8_2 = I32 [8]
!6 = ApplyComparisonOp(%4, !c8_2) [EQWithNA]
!12 = If !6 then { %3 } else {
  !7 = Str ["TableGen: ..."] 
  !8 = Apply(%4) [-1, str, (), String]
  !9 = Apply(!7, !8) [-1, concat, (), String] 
  !10 = Str [" contexts."]
  !11 = Apply(!9, !10) [-1, concat, (), String]
  Die(!11) [Array[Tuple[Int64,Tuple[Int32,Int32]]], 9]
}
!s6 = ToStream(!12) [False]
!s7 = StreamZip(!s4, !s5, !s6) [9, AssertSameLength] {
(%elt3, %elt4, %elt5) =>
  MakeTuple(%elt3, %elt4, %elt5) [(0 1 2)]
}
%13 = ToArray(!s7)
!c4 = I32 [4] 
!c0_3 = I32 [0]
%166 = TailLoop(!c4, !c0_3) {
(%loopvar, %loopvar2, %loop) =>
  %14 = RNGStateLiteral
  !c0_4 = I32 [0] 
  !c10 = I32 [10] 
  !c1_3 = I32 [1]
  !s8 = StreamRange(!c0_4, !c10, !c1_3) [1, False]
  !s11 = StreamMap(!s8) { (%elt6) =>
    !15 = Cast(%elt6) [Int64]
    %16 = MakeTuple(!15, %elt6) [(0 1)]
    !17 = GetTupleElement(%16) [1] 
    !18 = EncodedLiteral [Array[Int32]]
    !s9 = ToStream(!18) [False]
    !s10 = StreamMap(!s9) { (%elt7) =>
      Cast(%elt7) [Float64]
    }
    !19 = ToArray(!s10) 
    !20 = GetTupleElement(%16) [0]
    !21 = RNGSplit(%14, !20)
    !22 = ApplySeeded(!19, !21) [rand_cat, 0, Int32]
    MakeStruct(sample_idx: !17, pop: !22)
  }
  !23 = ToArray(!s11)
  %24 = MakeStruct(cols: !23)
  !25 = GetField(%24) [cols]
  !s12 = ToStream(!25) [False] 
  !c0_5 = I32 [0] 
  !c1_4 = I32 [1]
  !s13 = StreamIota(!c0_5, !c1_4) [False]
  !s14 = StreamZip(!s12, !s13) [34, TakeMinLength] {
  (%elt8, %elt9) =>
    !26 = Cast(%elt9) [Int64]
    InsertFields %elt8 (__col_uid: !26)
  }
  !27 = ToArray(!s14)
  %28 = InsertFields %24 (cols: !27)
  !s15 = ToStream(%13) [False]
  !s16 = StreamTake(!s15, %loopvar) 
  !29 = CastRename(%28) [Struct{__cols:Array[Struct{sample_idx:Int32,pop:Int32,__col_uid:Int64}]}]
  %30 = MakeStruct(__iruid_1052: %28, __iruid_1054: !29)
  !31 = IsNA(%30)
  !39 = If !31 then {
    NA [Struct{__iruid_1052:Struct{cols:Array[Struct{}]},__iruid_1054:Struct{__cols:Array[Struct{sample_idx:Int32,pop:Int32,__col_uid:Int64}]}}]
  } else {
    %32 = GetField(%30) [__iruid_1052]
    !33 = IsNA(%32)
    !37 = If !33 then {
      NA [Struct{cols:Array[Struct{}]}]
    } else {
      !34 = GetField(%32) [cols]
      !s17 = ToStream(!34) [False]
      !s18 = StreamMap(!s17) { (%elt10) =>
        !35 = IsNA(%elt10)
        If !35 then {
          NA [Struct{}]
        } else {
          Literal [Struct{}, <literal value>]
        }
      }
      !36 = ToArray(!s18)
      MakeStruct(cols: !36)
    } 
    !38 = GetField(%30) [__iruid_1054]
    MakeStruct(__iruid_1052: !37, __iruid_1054: !38)
  } 
  !40 = Str ["iteration="] 
  !41 = Apply(%loopvar2) [-1, str, (), String]
  !42 = Apply(!40, !41) [-1, concat, (), String] 
  !43 = Str [",nParts="]
  !44 = Apply(!42, !43) [-1, concat, (), String] 
  !45 = Apply(%loopvar) [-1, str, (), String]
  !46 = Apply(!44, !45) [-1, concat, (), String]
  %155 = CollectDistributedArray(!s16, !39, !46) {
  (%ctx, %g) =>
    %47 = GetField(%g) [__iruid_1054]
    %48 = GetField(%g) [__iruid_1052]
    %49 = GetTupleElement(%ctx) [1]
    %50 = GetTupleElement(%ctx) [2]
    %51 = GetTupleElement(%50) [0]
    !c0_6 = I32 [0] 
    !c1_5 = I32 [1]
    !s19 = StreamIota(!c0_6, !c1_5) [False] 
    !52 = RNGStateLiteral
    %53 = RNGSplit(!52, %51)
    %54 = GetTupleElement(%50) [1]
    !55 = GetTupleElement(%54) [0] 
    !56 = GetTupleElement(%54) [1] 
    !c1_6 = I32 [1]
    !s20 = StreamRange(!55, !56, !c1_6) [3, False]
    !s26 = StreamMap(!s20) { (%elt11) =>
      !57 = Cast(%elt11) [Int64]
      %58 = MakeTuple(!57, %elt11) [(0 1)]
      !59 = GetTupleElement(%58) [0]
      %60 = RNGSplit(%53, !59)
      !61 = F64 [0.1] 
      !62 = F64 [0.9]
      %63 = ApplySeeded(!61, !62, %60) [rand_unif, -1, Float64]
      !64 = GetTupleElement(%58) [1]
      !65 = Cast(!64) [Int64]
      !66 = Apply(!65) [5, globalPosToLocus, 
      (), Locus(GRCh37)] 
      !67 = EncodedLiteral [Array[String]] 
      !68 = EncodedLiteral [Array[Float64]]
      !s21 = ToStream(!68) [False] 
      !c0_7 = I32 [0] 
      !c1_7 = I32 [1]
      !s22 = StreamIota(!c0_7, !c1_7) [False]
      !s23 = StreamZip(!s21, !s22) [7, TakeMinLength] {
      (%elt12, %elt13) =>
        !69 = Cast(%elt13) [Int64]
        %70 = MakeTuple(!69, %elt12) [(0 1)]
        %71 = GetTupleElement(%70) [1]
        !72 = ApplyBinaryPrimOp(%63, %71) [Multiply] 
        !73 = F64 [1.0]
        !74 = ApplyBinaryPrimOp(!73, %63) [Subtract]
        !75 = ApplyBinaryPrimOp(!74, %71) [Multiply] 
        !76 = GetTupleElement(%70) [0]
        !77 = RNGSplit(%60, !76)
        ApplySeeded(!72, !75, !77) [rand_beta, 1, Float64]
      }
      !78 = ToArray(!s23) 
      !c0_8 = I32 [0] 
      !c10_2 = I32 [10] 
      !c1_8 = I32 [1]
      !s24 = StreamRange(!c0_8, !c10_2, !c1_8) [8, False]
      !s25 = StreamMap(!s24) { (%elt14) =>
        Literal [Struct{}, <literal value>]
      }
      !79 = ToArray(!s25)
      MakeStruct(locus: !66, alleles: !67, af: !78, entries: !79)
    }
    !s27 = StreamZip(!s19, !s26) [36, TakeMinLength] {
    (%elt15, %elt16) =>
      !80 = Cast(%elt15) [Int64]
      !81 = MakeTuple(%51, !80) [(0 1)]
      InsertFields %elt16 (__row_uid: !81)
    }
    !s28 = StreamMap(!s27) { (%elt17) =>
      !82 = SelectFields(%elt17) [(locus alleles)]
      !83 = ApplySpecial(%49, !82) [-1, contains, 
      (), Boolean]
      If !83 then { %elt17 } else {
        !84 = Str ["TableGen: ..."] 
        !85 = GetTupleElement(%ctx) [0]
        !86 = Apply(!85) [-1, str, (), String]
        !87 = Apply(!84, !86) [-1, concat, (), String] 
        !88 = Str ["\n\tRange bo..."]
        !89 = Apply(!87, !88) [-1, concat, (), String] 
        !90 = GetTupleElement(%ctx) [0]
        !91 = Apply(!90) [-1, str, (), String]
        !92 = Apply(!89, !91) [-1, concat, (), String] 
        !93 = Str [": "]
        !94 = Apply(!92, !93) [-1, concat, (), String] 
        !95 = Apply(%49) [-1, str, (), String]
        !96 = Apply(!94, !95) [-1, concat, (), String] 
        !97 = Str ["\n\tInvalid ..."]
        !98 = Apply(!96, !97) [-1, concat, (), String] 
        !99 = SelectFields(%elt17) [(locus alleles)]
        !100 = Apply(!99) [-1, str, (), String]
        !101 = Apply(!98, !100) [-1, concat, (), String]
        Die(!101) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, 9]
      }
    }
    !s29 = StreamMap(!s28) { (%elt18) =>
      %102 = GetField(%elt18) [entries]
      !103 = IsNA(%102)
      If !103 then {
        !104 = Str ["missing en..."]
        Die(!104) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, -1]
      } else {
        !105 = GetField(%48) [cols]
        %106 = ArrayLen(!105)
        %107 = ArrayLen(%102)
        !108 = ApplyComparisonOp(%107, %106) [NEQWithNA]
        If !108 then {
          !109 = Str ["length mis..."] 
          !110 = Apply(%107) [-1, str, (), String]
          !111 = Apply(!109, !110) [-1, concat, (), String] 
          !112 = Str [" entries, "]
          !113 = Apply(!111, !112) [-1, concat, (), String] 
          !114 = Apply(%106) [-1, str, (), String]
          !115 = Apply(!113, !114) [-1, concat, (), String] 
          !116 = Str [" cols, at "]
          !117 = Apply(!115, !116) [-1, concat, (), String] 
          !118 = SelectFields(%elt18) [(locus alleles)]
          !119 = Apply(!118) [-1, str, (), String]
          !120 = Apply(!117, !119) [-1, concat, (), String]
          Die(!120) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, -1]
        } else { %elt18 }
      }
    }
    !s33 = StreamMap(!s29) { (%elt19) =>
      %121 = CastRename(%elt19) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],`the entries! [877f12a8827e18f61222c6c8c5fb04a8]`:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}]
      !122 = SelectFields(%121) [(locus alleles)] 
      !123 = GetField(%121) [`the entries! [877f12a8827e18f61222c6c8c5fb04a8]`]
      !s30 = ToStream(!123) [False] 
      !124 = GetField(%47) [__cols]
      !s31 = ToStream(!124) [False]
      !s32 = StreamZip(!s30, !s31) [-1, AssumeSameLength] {
      (%elt20, %elt21) =>
        %125 = GetField(%121) [__row_uid]
        !126 = GetField(%121) [af] 
        !127 = GetField(%elt21) [pop]
        %128 = ApplyIR(!126, !127) [10, indexArray, 
        (), Float64]
        !129 = F64 [1.0]
        %130 = ApplyBinaryPrimOp(!129, %128) [Subtract]
        !131 = F64 [2.0]
        !132 = Apply(%130, !131) [13, pow, (), Float64] 
        !133 = F64 [2.0]
        !134 = ApplyBinaryPrimOp(!133, %128) [Multiply]
        !135 = ApplyBinaryPrimOp(!134, %130) [Multiply] 
        !136 = F64 [2.0]
        !137 = Apply(%128, !136) [16, pow, (), Float64]
        !138 = MakeArray(!132, !135, !137) [Array[Float64]] 
        !139 = RNGStateLiteral 
        !140 = GetTupleElement(%125) [0] 
        !141 = GetTupleElement(%125) [1] 
        !142 = GetField(%elt21) [__col_uid]
        !143 = MakeTuple(!140, !141, !142) [(0 1 2)]
        !144 = RNGSplit(!139, !143)
        !145 = ApplySeeded(!138, !144) [rand_cat, 2, Int32]
        !146 = Apply(!145) [17, UnphasedDiploidGtIndexCall, 
        (), Call]
        InsertFields %elt20 (GT: !146)
      }
      !147 = ToArray(!s32)
      InsertFields !122 (the entries! [877f12a8827e18f61222c6c8c5fb04a8]: !147)
    }
    !s34 = StreamMap(!s33) { (%elt22) =>
      %148 = CastRename(%elt22) [Struct{locus:Locus(GRCh37),alleles:Array[String],entries:Array[Struct{GT:Call}]}]
      %149 = GetField(%148) [entries]
      !150 = SelectFields(%148) [(locus alleles)] 
      !c0_9 = I32 [0]
      !151 = ArrayRef(%149, !c0_9) [24] 
      !c1_9 = I32 [1]
      !152 = ArrayRef(%149, !c1_9) [25] 
      !c2 = I32 [2]
      !153 = ArrayRef(%149, !c2) [26] 
      !c3 = I32 [3]
      !154 = ArrayRef(%149, !c3) [27]
      InsertFields !150 (0: !151, 1: !152, 2: !153, 3: !154)
    } 
    !c11 = I32 [11]
    !s35 = StreamTake(!s34, !c11)
    StreamLen(!s35)
  }
  !s36 = ToStream(%155) [False] 
  !c0_10 = I32 [0]
  !156 = StreamFold(!s36, !c0_10) {
  (%accum, %elt23) =>
    ApplyBinaryPrimOp(%accum, %elt23) [Add]
  }
  !157 = Cast(!156) [Int64] 
  !158 = I64 [11]
  !159 = ApplyComparisonOp(!157, !158) [GTEQ] 
  !160 = ArrayLen(%13) 
  !161 = ArrayLen(%155)
  !162 = ApplyComparisonOp(!160, !161) [LTEQ]
  !163 = ApplySpecial(!159, !162) [-1, lor, 
  (), Boolean]
  If !163 then { %155 } else {
    !c4_2 = I32 [4]
    !164 = ApplyBinaryPrimOp(%loopvar, !c4_2) [Multiply] 
    !c1_10 = I32 [1]
    !165 = ApplyBinaryPrimOp(%loopvar2, !c1_10) [Add]
    Recur(!164, !165) [Array[Int32]]
  }
}
%167 = ArrayLen(%166)
!c0_11 = I32 [0]
!168 = ApplyComparisonOp(%167, !c0_11) [EQWithNA]
%183 = If !168 then {
  Literal [Tuple[Int32,Int64], <literal value>]
} else {
  !c0_12 = I32 [0] 
  !169 = I64 [11]
  TailLoop(!c0_12, !169) {
  (%loopvar3, %loopvar4, %loop2) =>
    !c1_11 = I32 [1]
    !170 = ApplyBinaryPrimOp(%167, !c1_11) [Subtract]
    !171 = ApplyComparisonOp(%loopvar3, !170) [EQWithNA] 
    !172 = ArrayRef(%166, %loopvar3) [-1]
    !173 = Cast(!172) [Int64]
    !174 = ApplyBinaryPrimOp(%loopvar4, !173) [Subtract] 
    !175 = I64 [0]
    !176 = ApplyComparisonOp(!174, !175) [LTEQ]
    !177 = ApplySpecial(!171, !176) [-1, lor, 
    (), Boolean]
    If !177 then {
      !c1_12 = I32 [1]
      !178 = ApplyBinaryPrimOp(%loopvar3, !c1_12) [Add]
      MakeTuple(!178, %loopvar4) [(0 1)]
    } else {
      !c1_13 = I32 [1]
      !179 = ApplyBinaryPrimOp(%loopvar3, !c1_13) [Add] 
      !180 = ArrayRef(%166, %loopvar3) [-1]
      !181 = Cast(!180) [Int64]
      !182 = ApplyBinaryPrimOp(%loopvar4, !181) [Subtract]
      Recur(!179, !182) [Tuple[Int32,Int64]]
    }
  }
}
!s37 = ToStream(%13) [False] 
!184 = GetTupleElement(%183) [0]
!s38 = StreamTake(!s37, !184) 
!c0_13 = I32 [0] 
!185 = GetTupleElement(%183) [0] 
!c1_14 = I32 [1]
!s39 = StreamRange(!c0_13, !185, !c1_14) [-1, False]
!s40 = StreamMap(!s39) { (%elt24) =>
  !186 = GetTupleElement(%183) [0] 
  !c1_15 = I32 [1]
  !187 = ApplyBinaryPrimOp(!186, !c1_15) [Subtract]
  !188 = ApplyComparisonOp(%elt24, !187) [EQWithNA]
  If !188 then {
    !189 = GetTupleElement(%183) [1]
    Cast(!189) [Int32]
  } else {
    ArrayRef(%166, %elt24) [-1]
  }
}
!s41 = StreamZip(!s38, !s40) [-1, AssumeSameLength] {
(%elt25, %elt26) =>
  MakeStruct(numberToTake: %elt26, old: %elt25)
}
ToArray(!s41)

2023-11-17 18:07:57.695 : INFO: after LowerAndExecuteShuffles: IR size 470: 

!1 = EncodedLiteral [Array[Tuple[Int32,Int32]]]
!s = ToStream(!1) [False] 
!c0 = I32 [0] 
!c1 = I32 [1]
!s2 = StreamIota(!c0, !c1) [False]
!s3 = StreamZip(!s, !s2) [35, TakeMinLength] {
(%elt, %elt2) =>
  !2 = Cast(%elt2) [Int64]
  MakeTuple(!2, %elt) [(0 1)]
}
%3 = ToArray(!s3)
%4 = ArrayLen(%3)
!c0_2 = I32 [0] 
!c8 = I32 [8] 
!c1_2 = I32 [1]
!s4 = StreamRange(!c0_2, !c8, !c1_2) [-1, False] 
!5 = Literal [Array[Interval[Struct{locus:Locus(GRCh37),alleles:Array[String]}]], <literal value>]
!s5 = ToStream(!5) [False] 
!c8_2 = I32 [8]
!6 = ApplyComparisonOp(%4, !c8_2) [EQWithNA]
!12 = If !6 then { %3 } else {
  !7 = Str ["TableGen: ..."] 
  !8 = Apply(%4) [-1, str, (), String]
  !9 = Apply(!7, !8) [-1, concat, (), String] 
  !10 = Str [" contexts."]
  !11 = Apply(!9, !10) [-1, concat, (), String]
  Die(!11) [Array[Tuple[Int64,Tuple[Int32,Int32]]], 9]
}
!s6 = ToStream(!12) [False]
!s7 = StreamZip(!s4, !s5, !s6) [9, AssertSameLength] {
(%elt3, %elt4, %elt5) =>
  MakeTuple(%elt3, %elt4, %elt5) [(0 1 2)]
}
%13 = ToArray(!s7)
!c4 = I32 [4] 
!c0_3 = I32 [0]
%166 = TailLoop(!c4, !c0_3) {
(%loopvar, %loopvar2, %loop) =>
  %14 = RNGStateLiteral
  !c0_4 = I32 [0] 
  !c10 = I32 [10] 
  !c1_3 = I32 [1]
  !s8 = StreamRange(!c0_4, !c10, !c1_3) [1, False]
  !s11 = StreamMap(!s8) { (%elt6) =>
    !15 = Cast(%elt6) [Int64]
    %16 = MakeTuple(!15, %elt6) [(0 1)]
    !17 = GetTupleElement(%16) [1] 
    !18 = EncodedLiteral [Array[Int32]]
    !s9 = ToStream(!18) [False]
    !s10 = StreamMap(!s9) { (%elt7) =>
      Cast(%elt7) [Float64]
    }
    !19 = ToArray(!s10) 
    !20 = GetTupleElement(%16) [0]
    !21 = RNGSplit(%14, !20)
    !22 = ApplySeeded(!19, !21) [rand_cat, 0, Int32]
    MakeStruct(sample_idx: !17, pop: !22)
  }
  !23 = ToArray(!s11)
  %24 = MakeStruct(cols: !23)
  !25 = GetField(%24) [cols]
  !s12 = ToStream(!25) [False] 
  !c0_5 = I32 [0] 
  !c1_4 = I32 [1]
  !s13 = StreamIota(!c0_5, !c1_4) [False]
  !s14 = StreamZip(!s12, !s13) [34, TakeMinLength] {
  (%elt8, %elt9) =>
    !26 = Cast(%elt9) [Int64]
    InsertFields %elt8 (__col_uid: !26)
  }
  !27 = ToArray(!s14)
  %28 = InsertFields %24 (cols: !27)
  !s15 = ToStream(%13) [False]
  !s16 = StreamTake(!s15, %loopvar) 
  !29 = CastRename(%28) [Struct{__cols:Array[Struct{sample_idx:Int32,pop:Int32,__col_uid:Int64}]}]
  %30 = MakeStruct(__iruid_1052: %28, __iruid_1054: !29)
  !31 = IsNA(%30)
  !39 = If !31 then {
    NA [Struct{__iruid_1052:Struct{cols:Array[Struct{}]},__iruid_1054:Struct{__cols:Array[Struct{sample_idx:Int32,pop:Int32,__col_uid:Int64}]}}]
  } else {
    %32 = GetField(%30) [__iruid_1052]
    !33 = IsNA(%32)
    !37 = If !33 then {
      NA [Struct{cols:Array[Struct{}]}]
    } else {
      !34 = GetField(%32) [cols]
      !s17 = ToStream(!34) [False]
      !s18 = StreamMap(!s17) { (%elt10) =>
        !35 = IsNA(%elt10)
        If !35 then {
          NA [Struct{}]
        } else {
          Literal [Struct{}, <literal value>]
        }
      }
      !36 = ToArray(!s18)
      MakeStruct(cols: !36)
    } 
    !38 = GetField(%30) [__iruid_1054]
    MakeStruct(__iruid_1052: !37, __iruid_1054: !38)
  } 
  !40 = Str ["iteration="] 
  !41 = Apply(%loopvar2) [-1, str, (), String]
  !42 = Apply(!40, !41) [-1, concat, (), String] 
  !43 = Str [",nParts="]
  !44 = Apply(!42, !43) [-1, concat, (), String] 
  !45 = Apply(%loopvar) [-1, str, (), String]
  !46 = Apply(!44, !45) [-1, concat, (), String]
  %155 = CollectDistributedArray(!s16, !39, !46) {
  (%ctx, %g) =>
    %47 = GetField(%g) [__iruid_1054]
    %48 = GetField(%g) [__iruid_1052]
    %49 = GetTupleElement(%ctx) [1]
    %50 = GetTupleElement(%ctx) [2]
    %51 = GetTupleElement(%50) [0]
    !c0_6 = I32 [0] 
    !c1_5 = I32 [1]
    !s19 = StreamIota(!c0_6, !c1_5) [False] 
    !52 = RNGStateLiteral
    %53 = RNGSplit(!52, %51)
    %54 = GetTupleElement(%50) [1]
    !55 = GetTupleElement(%54) [0] 
    !56 = GetTupleElement(%54) [1] 
    !c1_6 = I32 [1]
    !s20 = StreamRange(!55, !56, !c1_6) [3, False]
    !s26 = StreamMap(!s20) { (%elt11) =>
      !57 = Cast(%elt11) [Int64]
      %58 = MakeTuple(!57, %elt11) [(0 1)]
      !59 = GetTupleElement(%58) [0]
      %60 = RNGSplit(%53, !59)
      !61 = F64 [0.1] 
      !62 = F64 [0.9]
      %63 = ApplySeeded(!61, !62, %60) [rand_unif, -1, Float64]
      !64 = GetTupleElement(%58) [1]
      !65 = Cast(!64) [Int64]
      !66 = Apply(!65) [5, globalPosToLocus, 
      (), Locus(GRCh37)] 
      !67 = EncodedLiteral [Array[String]] 
      !68 = EncodedLiteral [Array[Float64]]
      !s21 = ToStream(!68) [False] 
      !c0_7 = I32 [0] 
      !c1_7 = I32 [1]
      !s22 = StreamIota(!c0_7, !c1_7) [False]
      !s23 = StreamZip(!s21, !s22) [7, TakeMinLength] {
      (%elt12, %elt13) =>
        !69 = Cast(%elt13) [Int64]
        %70 = MakeTuple(!69, %elt12) [(0 1)]
        %71 = GetTupleElement(%70) [1]
        !72 = ApplyBinaryPrimOp(%63, %71) [Multiply] 
        !73 = F64 [1.0]
        !74 = ApplyBinaryPrimOp(!73, %63) [Subtract]
        !75 = ApplyBinaryPrimOp(!74, %71) [Multiply] 
        !76 = GetTupleElement(%70) [0]
        !77 = RNGSplit(%60, !76)
        ApplySeeded(!72, !75, !77) [rand_beta, 1, Float64]
      }
      !78 = ToArray(!s23) 
      !c0_8 = I32 [0] 
      !c10_2 = I32 [10] 
      !c1_8 = I32 [1]
      !s24 = StreamRange(!c0_8, !c10_2, !c1_8) [8, False]
      !s25 = StreamMap(!s24) { (%elt14) =>
        Literal [Struct{}, <literal value>]
      }
      !79 = ToArray(!s25)
      MakeStruct(locus: !66, alleles: !67, af: !78, entries: !79)
    }
    !s27 = StreamZip(!s19, !s26) [36, TakeMinLength] {
    (%elt15, %elt16) =>
      !80 = Cast(%elt15) [Int64]
      !81 = MakeTuple(%51, !80) [(0 1)]
      InsertFields %elt16 (__row_uid: !81)
    }
    !s28 = StreamMap(!s27) { (%elt17) =>
      !82 = SelectFields(%elt17) [(locus alleles)]
      !83 = ApplySpecial(%49, !82) [-1, contains, 
      (), Boolean]
      If !83 then { %elt17 } else {
        !84 = Str ["TableGen: ..."] 
        !85 = GetTupleElement(%ctx) [0]
        !86 = Apply(!85) [-1, str, (), String]
        !87 = Apply(!84, !86) [-1, concat, (), String] 
        !88 = Str ["\n\tRange bo..."]
        !89 = Apply(!87, !88) [-1, concat, (), String] 
        !90 = GetTupleElement(%ctx) [0]
        !91 = Apply(!90) [-1, str, (), String]
        !92 = Apply(!89, !91) [-1, concat, (), String] 
        !93 = Str [": "]
        !94 = Apply(!92, !93) [-1, concat, (), String] 
        !95 = Apply(%49) [-1, str, (), String]
        !96 = Apply(!94, !95) [-1, concat, (), String] 
        !97 = Str ["\n\tInvalid ..."]
        !98 = Apply(!96, !97) [-1, concat, (), String] 
        !99 = SelectFields(%elt17) [(locus alleles)]
        !100 = Apply(!99) [-1, str, (), String]
        !101 = Apply(!98, !100) [-1, concat, (), String]
        Die(!101) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, 9]
      }
    }
    !s29 = StreamMap(!s28) { (%elt18) =>
      %102 = GetField(%elt18) [entries]
      !103 = IsNA(%102)
      If !103 then {
        !104 = Str ["missing en..."]
        Die(!104) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, -1]
      } else {
        !105 = GetField(%48) [cols]
        %106 = ArrayLen(!105)
        %107 = ArrayLen(%102)
        !108 = ApplyComparisonOp(%107, %106) [NEQWithNA]
        If !108 then {
          !109 = Str ["length mis..."] 
          !110 = Apply(%107) [-1, str, (), String]
          !111 = Apply(!109, !110) [-1, concat, (), String] 
          !112 = Str [" entries, "]
          !113 = Apply(!111, !112) [-1, concat, (), String] 
          !114 = Apply(%106) [-1, str, (), String]
          !115 = Apply(!113, !114) [-1, concat, (), String] 
          !116 = Str [" cols, at "]
          !117 = Apply(!115, !116) [-1, concat, (), String] 
          !118 = SelectFields(%elt18) [(locus alleles)]
          !119 = Apply(!118) [-1, str, (), String]
          !120 = Apply(!117, !119) [-1, concat, (), String]
          Die(!120) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, -1]
        } else { %elt18 }
      }
    }
    !s33 = StreamMap(!s29) { (%elt19) =>
      %121 = CastRename(%elt19) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],`the entries! [877f12a8827e18f61222c6c8c5fb04a8]`:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}]
      !122 = SelectFields(%121) [(locus alleles)] 
      !123 = GetField(%121) [`the entries! [877f12a8827e18f61222c6c8c5fb04a8]`]
      !s30 = ToStream(!123) [False] 
      !124 = GetField(%47) [__cols]
      !s31 = ToStream(!124) [False]
      !s32 = StreamZip(!s30, !s31) [-1, AssumeSameLength] {
      (%elt20, %elt21) =>
        %125 = GetField(%121) [__row_uid]
        !126 = GetField(%121) [af] 
        !127 = GetField(%elt21) [pop]
        %128 = ApplyIR(!126, !127) [10, indexArray, 
        (), Float64]
        !129 = F64 [1.0]
        %130 = ApplyBinaryPrimOp(!129, %128) [Subtract]
        !131 = F64 [2.0]
        !132 = Apply(%130, !131) [13, pow, (), Float64] 
        !133 = F64 [2.0]
        !134 = ApplyBinaryPrimOp(!133, %128) [Multiply]
        !135 = ApplyBinaryPrimOp(!134, %130) [Multiply] 
        !136 = F64 [2.0]
        !137 = Apply(%128, !136) [16, pow, (), Float64]
        !138 = MakeArray(!132, !135, !137) [Array[Float64]] 
        !139 = RNGStateLiteral 
        !140 = GetTupleElement(%125) [0] 
        !141 = GetTupleElement(%125) [1] 
        !142 = GetField(%elt21) [__col_uid]
        !143 = MakeTuple(!140, !141, !142) [(0 1 2)]
        !144 = RNGSplit(!139, !143)
        !145 = ApplySeeded(!138, !144) [rand_cat, 2, Int32]
        !146 = Apply(!145) [17, UnphasedDiploidGtIndexCall, 
        (), Call]
        InsertFields %elt20 (GT: !146)
      }
      !147 = ToArray(!s32)
      InsertFields !122 (the entries! [877f12a8827e18f61222c6c8c5fb04a8]: !147)
    }
    !s34 = StreamMap(!s33) { (%elt22) =>
      %148 = CastRename(%elt22) [Struct{locus:Locus(GRCh37),alleles:Array[String],entries:Array[Struct{GT:Call}]}]
      %149 = GetField(%148) [entries]
      !150 = SelectFields(%148) [(locus alleles)] 
      !c0_9 = I32 [0]
      !151 = ArrayRef(%149, !c0_9) [24] 
      !c1_9 = I32 [1]
      !152 = ArrayRef(%149, !c1_9) [25] 
      !c2 = I32 [2]
      !153 = ArrayRef(%149, !c2) [26] 
      !c3 = I32 [3]
      !154 = ArrayRef(%149, !c3) [27]
      InsertFields !150 (0: !151, 1: !152, 2: !153, 3: !154)
    } 
    !c11 = I32 [11]
    !s35 = StreamTake(!s34, !c11)
    StreamLen(!s35)
  }
  !s36 = ToStream(%155) [False] 
  !c0_10 = I32 [0]
  !156 = StreamFold(!s36, !c0_10) {
  (%accum, %elt23) =>
    ApplyBinaryPrimOp(%accum, %elt23) [Add]
  }
  !157 = Cast(!156) [Int64] 
  !158 = I64 [11]
  !159 = ApplyComparisonOp(!157, !158) [GTEQ] 
  !160 = ArrayLen(%13) 
  !161 = ArrayLen(%155)
  !162 = ApplyComparisonOp(!160, !161) [LTEQ]
  !163 = ApplySpecial(!159, !162) [-1, lor, 
  (), Boolean]
  If !163 then { %155 } else {
    !c4_2 = I32 [4]
    !164 = ApplyBinaryPrimOp(%loopvar, !c4_2) [Multiply] 
    !c1_10 = I32 [1]
    !165 = ApplyBinaryPrimOp(%loopvar2, !c1_10) [Add]
    Recur(!164, !165) [Array[Int32]]
  }
}
%167 = ArrayLen(%166)
!c0_11 = I32 [0]
!168 = ApplyComparisonOp(%167, !c0_11) [EQWithNA]
%183 = If !168 then {
  Literal [Tuple[Int32,Int64], <literal value>]
} else {
  !c0_12 = I32 [0] 
  !169 = I64 [11]
  TailLoop(!c0_12, !169) {
  (%loopvar3, %loopvar4, %loop2) =>
    !c1_11 = I32 [1]
    !170 = ApplyBinaryPrimOp(%167, !c1_11) [Subtract]
    !171 = ApplyComparisonOp(%loopvar3, !170) [EQWithNA] 
    !172 = ArrayRef(%166, %loopvar3) [-1]
    !173 = Cast(!172) [Int64]
    !174 = ApplyBinaryPrimOp(%loopvar4, !173) [Subtract] 
    !175 = I64 [0]
    !176 = ApplyComparisonOp(!174, !175) [LTEQ]
    !177 = ApplySpecial(!171, !176) [-1, lor, 
    (), Boolean]
    If !177 then {
      !c1_12 = I32 [1]
      !178 = ApplyBinaryPrimOp(%loopvar3, !c1_12) [Add]
      MakeTuple(!178, %loopvar4) [(0 1)]
    } else {
      !c1_13 = I32 [1]
      !179 = ApplyBinaryPrimOp(%loopvar3, !c1_13) [Add] 
      !180 = ArrayRef(%166, %loopvar3) [-1]
      !181 = Cast(!180) [Int64]
      !182 = ApplyBinaryPrimOp(%loopvar4, !181) [Subtract]
      Recur(!179, !182) [Tuple[Int32,Int64]]
    }
  }
}
!s37 = ToStream(%13) [False] 
!184 = GetTupleElement(%183) [0]
!s38 = StreamTake(!s37, !184) 
!c0_13 = I32 [0] 
!185 = GetTupleElement(%183) [0] 
!c1_14 = I32 [1]
!s39 = StreamRange(!c0_13, !185, !c1_14) [-1, False]
!s40 = StreamMap(!s39) { (%elt24) =>
  !186 = GetTupleElement(%183) [0] 
  !c1_15 = I32 [1]
  !187 = ApplyBinaryPrimOp(!186, !c1_15) [Subtract]
  !188 = ApplyComparisonOp(%elt24, !187) [EQWithNA]
  If !188 then {
    !189 = GetTupleElement(%183) [1]
    Cast(!189) [Int32]
  } else {
    ArrayRef(%166, %elt24) [-1]
  }
}
!s41 = StreamZip(!s38, !s40) [-1, AssumeSameLength] {
(%elt25, %elt26) =>
  MakeStruct(numberToTake: %elt26, old: %elt25)
}
ToArray(!s41)

2023-11-17 18:07:57.780 : INFO: after optimize: relationalLowerer, after LowerAndExecuteShuffles: IR size 470: 

!1 = EncodedLiteral [Array[Tuple[Int32,Int32]]]
!s = ToStream(!1) [False] 
!c0 = I32 [0] 
!c1 = I32 [1]
!s2 = StreamIota(!c0, !c1) [False]
!s3 = StreamZip(!s, !s2) [35, TakeMinLength] {
(%elt, %elt2) =>
  !2 = Cast(%elt2) [Int64]
  MakeTuple(!2, %elt) [(0 1)]
}
%3 = ToArray(!s3)
%4 = ArrayLen(%3)
!c0_2 = I32 [0] 
!c8 = I32 [8] 
!c1_2 = I32 [1]
!s4 = StreamRange(!c0_2, !c8, !c1_2) [-1, False] 
!5 = Literal [Array[Interval[Struct{locus:Locus(GRCh37),alleles:Array[String]}]], <literal value>]
!s5 = ToStream(!5) [False] 
!c8_2 = I32 [8]
!6 = ApplyComparisonOp(%4, !c8_2) [EQWithNA]
!12 = If !6 then { %3 } else {
  !7 = Str ["TableGen: ..."] 
  !8 = Apply(%4) [-1, str, (), String]
  !9 = Apply(!7, !8) [-1, concat, (), String] 
  !10 = Str [" contexts."]
  !11 = Apply(!9, !10) [-1, concat, (), String]
  Die(!11) [Array[Tuple[Int64,Tuple[Int32,Int32]]], 9]
}
!s6 = ToStream(!12) [False]
!s7 = StreamZip(!s4, !s5, !s6) [9, AssertSameLength] {
(%elt3, %elt4, %elt5) =>
  MakeTuple(%elt3, %elt4, %elt5) [(0 1 2)]
}
%13 = ToArray(!s7)
!c4 = I32 [4] 
!c0_3 = I32 [0]
%166 = TailLoop(!c4, !c0_3) {
(%loopvar, %loopvar2, %loop) =>
  %14 = RNGStateLiteral
  !c0_4 = I32 [0] 
  !c10 = I32 [10] 
  !c1_3 = I32 [1]
  !s8 = StreamRange(!c0_4, !c10, !c1_3) [1, False]
  !s11 = StreamMap(!s8) { (%elt6) =>
    !15 = Cast(%elt6) [Int64]
    %16 = MakeTuple(!15, %elt6) [(0 1)]
    !17 = GetTupleElement(%16) [1] 
    !18 = EncodedLiteral [Array[Int32]]
    !s9 = ToStream(!18) [False]
    !s10 = StreamMap(!s9) { (%elt7) =>
      Cast(%elt7) [Float64]
    }
    !19 = ToArray(!s10) 
    !20 = GetTupleElement(%16) [0]
    !21 = RNGSplit(%14, !20)
    !22 = ApplySeeded(!19, !21) [rand_cat, 0, Int32]
    MakeStruct(sample_idx: !17, pop: !22)
  }
  !23 = ToArray(!s11)
  %24 = MakeStruct(cols: !23)
  !25 = GetField(%24) [cols]
  !s12 = ToStream(!25) [False] 
  !c0_5 = I32 [0] 
  !c1_4 = I32 [1]
  !s13 = StreamIota(!c0_5, !c1_4) [False]
  !s14 = StreamZip(!s12, !s13) [34, TakeMinLength] {
  (%elt8, %elt9) =>
    !26 = Cast(%elt9) [Int64]
    InsertFields %elt8 (__col_uid: !26)
  }
  !27 = ToArray(!s14)
  %28 = InsertFields %24 (cols: !27)
  !s15 = ToStream(%13) [False]
  !s16 = StreamTake(!s15, %loopvar) 
  !29 = CastRename(%28) [Struct{__cols:Array[Struct{sample_idx:Int32,pop:Int32,__col_uid:Int64}]}]
  %30 = MakeStruct(__iruid_1052: %28, __iruid_1054: !29)
  !31 = IsNA(%30)
  !39 = If !31 then {
    NA [Struct{__iruid_1052:Struct{cols:Array[Struct{}]},__iruid_1054:Struct{__cols:Array[Struct{sample_idx:Int32,pop:Int32,__col_uid:Int64}]}}]
  } else {
    %32 = GetField(%30) [__iruid_1052]
    !33 = IsNA(%32)
    !37 = If !33 then {
      NA [Struct{cols:Array[Struct{}]}]
    } else {
      !34 = GetField(%32) [cols]
      !s17 = ToStream(!34) [False]
      !s18 = StreamMap(!s17) { (%elt10) =>
        !35 = IsNA(%elt10)
        If !35 then {
          NA [Struct{}]
        } else {
          Literal [Struct{}, <literal value>]
        }
      }
      !36 = ToArray(!s18)
      MakeStruct(cols: !36)
    } 
    !38 = GetField(%30) [__iruid_1054]
    MakeStruct(__iruid_1052: !37, __iruid_1054: !38)
  } 
  !40 = Str ["iteration="] 
  !41 = Apply(%loopvar2) [-1, str, (), String]
  !42 = Apply(!40, !41) [-1, concat, (), String] 
  !43 = Str [",nParts="]
  !44 = Apply(!42, !43) [-1, concat, (), String] 
  !45 = Apply(%loopvar) [-1, str, (), String]
  !46 = Apply(!44, !45) [-1, concat, (), String]
  %155 = CollectDistributedArray(!s16, !39, !46) {
  (%ctx, %g) =>
    %47 = GetField(%g) [__iruid_1054]
    %48 = GetField(%g) [__iruid_1052]
    %49 = GetTupleElement(%ctx) [1]
    %50 = GetTupleElement(%ctx) [2]
    %51 = GetTupleElement(%50) [0]
    !c0_6 = I32 [0] 
    !c1_5 = I32 [1]
    !s19 = StreamIota(!c0_6, !c1_5) [False] 
    !52 = RNGStateLiteral
    %53 = RNGSplit(!52, %51)
    %54 = GetTupleElement(%50) [1]
    !55 = GetTupleElement(%54) [0] 
    !56 = GetTupleElement(%54) [1] 
    !c1_6 = I32 [1]
    !s20 = StreamRange(!55, !56, !c1_6) [3, False]
    !s26 = StreamMap(!s20) { (%elt11) =>
      !57 = Cast(%elt11) [Int64]
      %58 = MakeTuple(!57, %elt11) [(0 1)]
      !59 = GetTupleElement(%58) [0]
      %60 = RNGSplit(%53, !59)
      !61 = F64 [0.1] 
      !62 = F64 [0.9]
      %63 = ApplySeeded(!61, !62, %60) [rand_unif, -1, Float64]
      !64 = GetTupleElement(%58) [1]
      !65 = Cast(!64) [Int64]
      !66 = Apply(!65) [5, globalPosToLocus, 
      (), Locus(GRCh37)] 
      !67 = EncodedLiteral [Array[String]] 
      !68 = EncodedLiteral [Array[Float64]]
      !s21 = ToStream(!68) [False] 
      !c0_7 = I32 [0] 
      !c1_7 = I32 [1]
      !s22 = StreamIota(!c0_7, !c1_7) [False]
      !s23 = StreamZip(!s21, !s22) [7, TakeMinLength] {
      (%elt12, %elt13) =>
        !69 = Cast(%elt13) [Int64]
        %70 = MakeTuple(!69, %elt12) [(0 1)]
        %71 = GetTupleElement(%70) [1]
        !72 = ApplyBinaryPrimOp(%63, %71) [Multiply] 
        !73 = F64 [1.0]
        !74 = ApplyBinaryPrimOp(!73, %63) [Subtract]
        !75 = ApplyBinaryPrimOp(!74, %71) [Multiply] 
        !76 = GetTupleElement(%70) [0]
        !77 = RNGSplit(%60, !76)
        ApplySeeded(!72, !75, !77) [rand_beta, 1, Float64]
      }
      !78 = ToArray(!s23) 
      !c0_8 = I32 [0] 
      !c10_2 = I32 [10] 
      !c1_8 = I32 [1]
      !s24 = StreamRange(!c0_8, !c10_2, !c1_8) [8, False]
      !s25 = StreamMap(!s24) { (%elt14) =>
        Literal [Struct{}, <literal value>]
      }
      !79 = ToArray(!s25)
      MakeStruct(locus: !66, alleles: !67, af: !78, entries: !79)
    }
    !s27 = StreamZip(!s19, !s26) [36, TakeMinLength] {
    (%elt15, %elt16) =>
      !80 = Cast(%elt15) [Int64]
      !81 = MakeTuple(%51, !80) [(0 1)]
      InsertFields %elt16 (__row_uid: !81)
    }
    !s28 = StreamMap(!s27) { (%elt17) =>
      !82 = SelectFields(%elt17) [(locus alleles)]
      !83 = ApplySpecial(%49, !82) [-1, contains, 
      (), Boolean]
      If !83 then { %elt17 } else {
        !84 = Str ["TableGen: ..."] 
        !85 = GetTupleElement(%ctx) [0]
        !86 = Apply(!85) [-1, str, (), String]
        !87 = Apply(!84, !86) [-1, concat, (), String] 
        !88 = Str ["\n\tRange bo..."]
        !89 = Apply(!87, !88) [-1, concat, (), String] 
        !90 = GetTupleElement(%ctx) [0]
        !91 = Apply(!90) [-1, str, (), String]
        !92 = Apply(!89, !91) [-1, concat, (), String] 
        !93 = Str [": "]
        !94 = Apply(!92, !93) [-1, concat, (), String] 
        !95 = Apply(%49) [-1, str, (), String]
        !96 = Apply(!94, !95) [-1, concat, (), String] 
        !97 = Str ["\n\tInvalid ..."]
        !98 = Apply(!96, !97) [-1, concat, (), String] 
        !99 = SelectFields(%elt17) [(locus alleles)]
        !100 = Apply(!99) [-1, str, (), String]
        !101 = Apply(!98, !100) [-1, concat, (), String]
        Die(!101) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, 9]
      }
    }
    !s29 = StreamMap(!s28) { (%elt18) =>
      %102 = GetField(%elt18) [entries]
      !103 = IsNA(%102)
      If !103 then {
        !104 = Str ["missing en..."]
        Die(!104) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, -1]
      } else {
        !105 = GetField(%48) [cols]
        %106 = ArrayLen(!105)
        %107 = ArrayLen(%102)
        !108 = ApplyComparisonOp(%107, %106) [NEQWithNA]
        If !108 then {
          !109 = Str ["length mis..."] 
          !110 = Apply(%107) [-1, str, (), String]
          !111 = Apply(!109, !110) [-1, concat, (), String] 
          !112 = Str [" entries, "]
          !113 = Apply(!111, !112) [-1, concat, (), String] 
          !114 = Apply(%106) [-1, str, (), String]
          !115 = Apply(!113, !114) [-1, concat, (), String] 
          !116 = Str [" cols, at "]
          !117 = Apply(!115, !116) [-1, concat, (), String] 
          !118 = SelectFields(%elt18) [(locus alleles)]
          !119 = Apply(!118) [-1, str, (), String]
          !120 = Apply(!117, !119) [-1, concat, (), String]
          Die(!120) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, -1]
        } else { %elt18 }
      }
    }
    !s33 = StreamMap(!s29) { (%elt19) =>
      %121 = CastRename(%elt19) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],`the entries! [877f12a8827e18f61222c6c8c5fb04a8]`:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}]
      !122 = SelectFields(%121) [(locus alleles)] 
      !123 = GetField(%121) [`the entries! [877f12a8827e18f61222c6c8c5fb04a8]`]
      !s30 = ToStream(!123) [False] 
      !124 = GetField(%47) [__cols]
      !s31 = ToStream(!124) [False]
      !s32 = StreamZip(!s30, !s31) [-1, AssumeSameLength] {
      (%elt20, %elt21) =>
        %125 = GetField(%121) [__row_uid]
        !126 = GetField(%121) [af] 
        !127 = GetField(%elt21) [pop]
        %128 = ApplyIR(!126, !127) [10, indexArray, 
        (), Float64]
        !129 = F64 [1.0]
        %130 = ApplyBinaryPrimOp(!129, %128) [Subtract]
        !131 = F64 [2.0]
        !132 = Apply(%130, !131) [13, pow, (), Float64] 
        !133 = F64 [2.0]
        !134 = ApplyBinaryPrimOp(!133, %128) [Multiply]
        !135 = ApplyBinaryPrimOp(!134, %130) [Multiply] 
        !136 = F64 [2.0]
        !137 = Apply(%128, !136) [16, pow, (), Float64]
        !138 = MakeArray(!132, !135, !137) [Array[Float64]] 
        !139 = RNGStateLiteral 
        !140 = GetTupleElement(%125) [0] 
        !141 = GetTupleElement(%125) [1] 
        !142 = GetField(%elt21) [__col_uid]
        !143 = MakeTuple(!140, !141, !142) [(0 1 2)]
        !144 = RNGSplit(!139, !143)
        !145 = ApplySeeded(!138, !144) [rand_cat, 2, Int32]
        !146 = Apply(!145) [17, UnphasedDiploidGtIndexCall, 
        (), Call]
        InsertFields %elt20 (GT: !146)
      }
      !147 = ToArray(!s32)
      InsertFields !122 (the entries! [877f12a8827e18f61222c6c8c5fb04a8]: !147)
    }
    !s34 = StreamMap(!s33) { (%elt22) =>
      %148 = CastRename(%elt22) [Struct{locus:Locus(GRCh37),alleles:Array[String],entries:Array[Struct{GT:Call}]}]
      %149 = GetField(%148) [entries]
      !150 = SelectFields(%148) [(locus alleles)] 
      !c0_9 = I32 [0]
      !151 = ArrayRef(%149, !c0_9) [24] 
      !c1_9 = I32 [1]
      !152 = ArrayRef(%149, !c1_9) [25] 
      !c2 = I32 [2]
      !153 = ArrayRef(%149, !c2) [26] 
      !c3 = I32 [3]
      !154 = ArrayRef(%149, !c3) [27]
      InsertFields !150 (0: !151, 1: !152, 2: !153, 3: !154)
    } 
    !c11 = I32 [11]
    !s35 = StreamTake(!s34, !c11)
    StreamLen(!s35)
  }
  !s36 = ToStream(%155) [False] 
  !c0_10 = I32 [0]
  !156 = StreamFold(!s36, !c0_10) {
  (%accum, %elt23) =>
    ApplyBinaryPrimOp(%accum, %elt23) [Add]
  }
  !157 = Cast(!156) [Int64] 
  !158 = I64 [11]
  !159 = ApplyComparisonOp(!157, !158) [GTEQ] 
  !160 = ArrayLen(%13) 
  !161 = ArrayLen(%155)
  !162 = ApplyComparisonOp(!160, !161) [LTEQ]
  !163 = ApplySpecial(!159, !162) [-1, lor, 
  (), Boolean]
  If !163 then { %155 } else {
    !c4_2 = I32 [4]
    !164 = ApplyBinaryPrimOp(%loopvar, !c4_2) [Multiply] 
    !c1_10 = I32 [1]
    !165 = ApplyBinaryPrimOp(%loopvar2, !c1_10) [Add]
    Recur(!164, !165) [Array[Int32]]
  }
}
%167 = ArrayLen(%166)
!c0_11 = I32 [0]
!168 = ApplyComparisonOp(%167, !c0_11) [EQWithNA]
%183 = If !168 then {
  Literal [Tuple[Int32,Int64], <literal value>]
} else {
  !c0_12 = I32 [0] 
  !169 = I64 [11]
  TailLoop(!c0_12, !169) {
  (%loopvar3, %loopvar4, %loop2) =>
    !c1_11 = I32 [1]
    !170 = ApplyBinaryPrimOp(%167, !c1_11) [Subtract]
    !171 = ApplyComparisonOp(%loopvar3, !170) [EQWithNA] 
    !172 = ArrayRef(%166, %loopvar3) [-1]
    !173 = Cast(!172) [Int64]
    !174 = ApplyBinaryPrimOp(%loopvar4, !173) [Subtract] 
    !175 = I64 [0]
    !176 = ApplyComparisonOp(!174, !175) [LTEQ]
    !177 = ApplySpecial(!171, !176) [-1, lor, 
    (), Boolean]
    If !177 then {
      !c1_12 = I32 [1]
      !178 = ApplyBinaryPrimOp(%loopvar3, !c1_12) [Add]
      MakeTuple(!178, %loopvar4) [(0 1)]
    } else {
      !c1_13 = I32 [1]
      !179 = ApplyBinaryPrimOp(%loopvar3, !c1_13) [Add] 
      !180 = ArrayRef(%166, %loopvar3) [-1]
      !181 = Cast(!180) [Int64]
      !182 = ApplyBinaryPrimOp(%loopvar4, !181) [Subtract]
      Recur(!179, !182) [Tuple[Int32,Int64]]
    }
  }
}
!s37 = ToStream(%13) [False] 
!184 = GetTupleElement(%183) [0]
!s38 = StreamTake(!s37, !184) 
!c0_13 = I32 [0] 
!185 = GetTupleElement(%183) [0] 
!c1_14 = I32 [1]
!s39 = StreamRange(!c0_13, !185, !c1_14) [-1, False]
!s40 = StreamMap(!s39) { (%elt24) =>
  !186 = GetTupleElement(%183) [0] 
  !c1_15 = I32 [1]
  !187 = ApplyBinaryPrimOp(!186, !c1_15) [Subtract]
  !188 = ApplyComparisonOp(%elt24, !187) [EQWithNA]
  If !188 then {
    !189 = GetTupleElement(%183) [1]
    Cast(!189) [Int32]
  } else {
    ArrayRef(%166, %elt24) [-1]
  }
}
!s41 = StreamZip(!s38, !s40) [-1, AssumeSameLength] {
(%elt25, %elt26) =>
  MakeStruct(numberToTake: %elt26, old: %elt25)
}
ToArray(!s41)

2023-11-17 18:07:57.791 : INFO: after LowerOrInterpretNonCompilable: IR size 470: 

!1 = EncodedLiteral [Array[Tuple[Int32,Int32]]]
!s = ToStream(!1) [False] 
!c0 = I32 [0] 
!c1 = I32 [1]
!s2 = StreamIota(!c0, !c1) [False]
!s3 = StreamZip(!s, !s2) [35, TakeMinLength] {
(%elt, %elt2) =>
  !2 = Cast(%elt2) [Int64]
  MakeTuple(!2, %elt) [(0 1)]
}
%3 = ToArray(!s3)
%4 = ArrayLen(%3)
!c0_2 = I32 [0] 
!c8 = I32 [8] 
!c1_2 = I32 [1]
!s4 = StreamRange(!c0_2, !c8, !c1_2) [-1, False] 
!5 = Literal [Array[Interval[Struct{locus:Locus(GRCh37),alleles:Array[String]}]], <literal value>]
!s5 = ToStream(!5) [False] 
!c8_2 = I32 [8]
!6 = ApplyComparisonOp(%4, !c8_2) [EQWithNA]
!12 = If !6 then { %3 } else {
  !7 = Str ["TableGen: ..."] 
  !8 = Apply(%4) [-1, str, (), String]
  !9 = Apply(!7, !8) [-1, concat, (), String] 
  !10 = Str [" contexts."]
  !11 = Apply(!9, !10) [-1, concat, (), String]
  Die(!11) [Array[Tuple[Int64,Tuple[Int32,Int32]]], 9]
}
!s6 = ToStream(!12) [False]
!s7 = StreamZip(!s4, !s5, !s6) [9, AssertSameLength] {
(%elt3, %elt4, %elt5) =>
  MakeTuple(%elt3, %elt4, %elt5) [(0 1 2)]
}
%13 = ToArray(!s7)
!c4 = I32 [4] 
!c0_3 = I32 [0]
%166 = TailLoop(!c4, !c0_3) {
(%loopvar, %loopvar2, %loop) =>
  %14 = RNGStateLiteral
  !c0_4 = I32 [0] 
  !c10 = I32 [10] 
  !c1_3 = I32 [1]
  !s8 = StreamRange(!c0_4, !c10, !c1_3) [1, False]
  !s11 = StreamMap(!s8) { (%elt6) =>
    !15 = Cast(%elt6) [Int64]
    %16 = MakeTuple(!15, %elt6) [(0 1)]
    !17 = GetTupleElement(%16) [1] 
    !18 = EncodedLiteral [Array[Int32]]
    !s9 = ToStream(!18) [False]
    !s10 = StreamMap(!s9) { (%elt7) =>
      Cast(%elt7) [Float64]
    }
    !19 = ToArray(!s10) 
    !20 = GetTupleElement(%16) [0]
    !21 = RNGSplit(%14, !20)
    !22 = ApplySeeded(!19, !21) [rand_cat, 0, Int32]
    MakeStruct(sample_idx: !17, pop: !22)
  }
  !23 = ToArray(!s11)
  %24 = MakeStruct(cols: !23)
  !25 = GetField(%24) [cols]
  !s12 = ToStream(!25) [False] 
  !c0_5 = I32 [0] 
  !c1_4 = I32 [1]
  !s13 = StreamIota(!c0_5, !c1_4) [False]
  !s14 = StreamZip(!s12, !s13) [34, TakeMinLength] {
  (%elt8, %elt9) =>
    !26 = Cast(%elt9) [Int64]
    InsertFields %elt8 (__col_uid: !26)
  }
  !27 = ToArray(!s14)
  %28 = InsertFields %24 (cols: !27)
  !s15 = ToStream(%13) [False]
  !s16 = StreamTake(!s15, %loopvar) 
  !29 = CastRename(%28) [Struct{__cols:Array[Struct{sample_idx:Int32,pop:Int32,__col_uid:Int64}]}]
  %30 = MakeStruct(__iruid_1052: %28, __iruid_1054: !29)
  !31 = IsNA(%30)
  !39 = If !31 then {
    NA [Struct{__iruid_1052:Struct{cols:Array[Struct{}]},__iruid_1054:Struct{__cols:Array[Struct{sample_idx:Int32,pop:Int32,__col_uid:Int64}]}}]
  } else {
    %32 = GetField(%30) [__iruid_1052]
    !33 = IsNA(%32)
    !37 = If !33 then {
      NA [Struct{cols:Array[Struct{}]}]
    } else {
      !34 = GetField(%32) [cols]
      !s17 = ToStream(!34) [False]
      !s18 = StreamMap(!s17) { (%elt10) =>
        !35 = IsNA(%elt10)
        If !35 then {
          NA [Struct{}]
        } else {
          Literal [Struct{}, <literal value>]
        }
      }
      !36 = ToArray(!s18)
      MakeStruct(cols: !36)
    } 
    !38 = GetField(%30) [__iruid_1054]
    MakeStruct(__iruid_1052: !37, __iruid_1054: !38)
  } 
  !40 = Str ["iteration="] 
  !41 = Apply(%loopvar2) [-1, str, (), String]
  !42 = Apply(!40, !41) [-1, concat, (), String] 
  !43 = Str [",nParts="]
  !44 = Apply(!42, !43) [-1, concat, (), String] 
  !45 = Apply(%loopvar) [-1, str, (), String]
  !46 = Apply(!44, !45) [-1, concat, (), String]
  %155 = CollectDistributedArray(!s16, !39, !46) {
  (%ctx, %g) =>
    %47 = GetField(%g) [__iruid_1054]
    %48 = GetField(%g) [__iruid_1052]
    %49 = GetTupleElement(%ctx) [1]
    %50 = GetTupleElement(%ctx) [2]
    %51 = GetTupleElement(%50) [0]
    !c0_6 = I32 [0] 
    !c1_5 = I32 [1]
    !s19 = StreamIota(!c0_6, !c1_5) [False] 
    !52 = RNGStateLiteral
    %53 = RNGSplit(!52, %51)
    %54 = GetTupleElement(%50) [1]
    !55 = GetTupleElement(%54) [0] 
    !56 = GetTupleElement(%54) [1] 
    !c1_6 = I32 [1]
    !s20 = StreamRange(!55, !56, !c1_6) [3, False]
    !s26 = StreamMap(!s20) { (%elt11) =>
      !57 = Cast(%elt11) [Int64]
      %58 = MakeTuple(!57, %elt11) [(0 1)]
      !59 = GetTupleElement(%58) [0]
      %60 = RNGSplit(%53, !59)
      !61 = F64 [0.1] 
      !62 = F64 [0.9]
      %63 = ApplySeeded(!61, !62, %60) [rand_unif, -1, Float64]
      !64 = GetTupleElement(%58) [1]
      !65 = Cast(!64) [Int64]
      !66 = Apply(!65) [5, globalPosToLocus, 
      (), Locus(GRCh37)] 
      !67 = EncodedLiteral [Array[String]] 
      !68 = EncodedLiteral [Array[Float64]]
      !s21 = ToStream(!68) [False] 
      !c0_7 = I32 [0] 
      !c1_7 = I32 [1]
      !s22 = StreamIota(!c0_7, !c1_7) [False]
      !s23 = StreamZip(!s21, !s22) [7, TakeMinLength] {
      (%elt12, %elt13) =>
        !69 = Cast(%elt13) [Int64]
        %70 = MakeTuple(!69, %elt12) [(0 1)]
        %71 = GetTupleElement(%70) [1]
        !72 = ApplyBinaryPrimOp(%63, %71) [Multiply] 
        !73 = F64 [1.0]
        !74 = ApplyBinaryPrimOp(!73, %63) [Subtract]
        !75 = ApplyBinaryPrimOp(!74, %71) [Multiply] 
        !76 = GetTupleElement(%70) [0]
        !77 = RNGSplit(%60, !76)
        ApplySeeded(!72, !75, !77) [rand_beta, 1, Float64]
      }
      !78 = ToArray(!s23) 
      !c0_8 = I32 [0] 
      !c10_2 = I32 [10] 
      !c1_8 = I32 [1]
      !s24 = StreamRange(!c0_8, !c10_2, !c1_8) [8, False]
      !s25 = StreamMap(!s24) { (%elt14) =>
        Literal [Struct{}, <literal value>]
      }
      !79 = ToArray(!s25)
      MakeStruct(locus: !66, alleles: !67, af: !78, entries: !79)
    }
    !s27 = StreamZip(!s19, !s26) [36, TakeMinLength] {
    (%elt15, %elt16) =>
      !80 = Cast(%elt15) [Int64]
      !81 = MakeTuple(%51, !80) [(0 1)]
      InsertFields %elt16 (__row_uid: !81)
    }
    !s28 = StreamMap(!s27) { (%elt17) =>
      !82 = SelectFields(%elt17) [(locus alleles)]
      !83 = ApplySpecial(%49, !82) [-1, contains, 
      (), Boolean]
      If !83 then { %elt17 } else {
        !84 = Str ["TableGen: ..."] 
        !85 = GetTupleElement(%ctx) [0]
        !86 = Apply(!85) [-1, str, (), String]
        !87 = Apply(!84, !86) [-1, concat, (), String] 
        !88 = Str ["\n\tRange bo..."]
        !89 = Apply(!87, !88) [-1, concat, (), String] 
        !90 = GetTupleElement(%ctx) [0]
        !91 = Apply(!90) [-1, str, (), String]
        !92 = Apply(!89, !91) [-1, concat, (), String] 
        !93 = Str [": "]
        !94 = Apply(!92, !93) [-1, concat, (), String] 
        !95 = Apply(%49) [-1, str, (), String]
        !96 = Apply(!94, !95) [-1, concat, (), String] 
        !97 = Str ["\n\tInvalid ..."]
        !98 = Apply(!96, !97) [-1, concat, (), String] 
        !99 = SelectFields(%elt17) [(locus alleles)]
        !100 = Apply(!99) [-1, str, (), String]
        !101 = Apply(!98, !100) [-1, concat, (), String]
        Die(!101) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, 9]
      }
    }
    !s29 = StreamMap(!s28) { (%elt18) =>
      %102 = GetField(%elt18) [entries]
      !103 = IsNA(%102)
      If !103 then {
        !104 = Str ["missing en..."]
        Die(!104) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, -1]
      } else {
        !105 = GetField(%48) [cols]
        %106 = ArrayLen(!105)
        %107 = ArrayLen(%102)
        !108 = ApplyComparisonOp(%107, %106) [NEQWithNA]
        If !108 then {
          !109 = Str ["length mis..."] 
          !110 = Apply(%107) [-1, str, (), String]
          !111 = Apply(!109, !110) [-1, concat, (), String] 
          !112 = Str [" entries, "]
          !113 = Apply(!111, !112) [-1, concat, (), String] 
          !114 = Apply(%106) [-1, str, (), String]
          !115 = Apply(!113, !114) [-1, concat, (), String] 
          !116 = Str [" cols, at "]
          !117 = Apply(!115, !116) [-1, concat, (), String] 
          !118 = SelectFields(%elt18) [(locus alleles)]
          !119 = Apply(!118) [-1, str, (), String]
          !120 = Apply(!117, !119) [-1, concat, (), String]
          Die(!120) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, -1]
        } else { %elt18 }
      }
    }
    !s33 = StreamMap(!s29) { (%elt19) =>
      %121 = CastRename(%elt19) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],`the entries! [877f12a8827e18f61222c6c8c5fb04a8]`:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}]
      !122 = SelectFields(%121) [(locus alleles)] 
      !123 = GetField(%121) [`the entries! [877f12a8827e18f61222c6c8c5fb04a8]`]
      !s30 = ToStream(!123) [False] 
      !124 = GetField(%47) [__cols]
      !s31 = ToStream(!124) [False]
      !s32 = StreamZip(!s30, !s31) [-1, AssumeSameLength] {
      (%elt20, %elt21) =>
        %125 = GetField(%121) [__row_uid]
        !126 = GetField(%121) [af] 
        !127 = GetField(%elt21) [pop]
        %128 = ApplyIR(!126, !127) [10, indexArray, 
        (), Float64]
        !129 = F64 [1.0]
        %130 = ApplyBinaryPrimOp(!129, %128) [Subtract]
        !131 = F64 [2.0]
        !132 = Apply(%130, !131) [13, pow, (), Float64] 
        !133 = F64 [2.0]
        !134 = ApplyBinaryPrimOp(!133, %128) [Multiply]
        !135 = ApplyBinaryPrimOp(!134, %130) [Multiply] 
        !136 = F64 [2.0]
        !137 = Apply(%128, !136) [16, pow, (), Float64]
        !138 = MakeArray(!132, !135, !137) [Array[Float64]] 
        !139 = RNGStateLiteral 
        !140 = GetTupleElement(%125) [0] 
        !141 = GetTupleElement(%125) [1] 
        !142 = GetField(%elt21) [__col_uid]
        !143 = MakeTuple(!140, !141, !142) [(0 1 2)]
        !144 = RNGSplit(!139, !143)
        !145 = ApplySeeded(!138, !144) [rand_cat, 2, Int32]
        !146 = Apply(!145) [17, UnphasedDiploidGtIndexCall, 
        (), Call]
        InsertFields %elt20 (GT: !146)
      }
      !147 = ToArray(!s32)
      InsertFields !122 (the entries! [877f12a8827e18f61222c6c8c5fb04a8]: !147)
    }
    !s34 = StreamMap(!s33) { (%elt22) =>
      %148 = CastRename(%elt22) [Struct{locus:Locus(GRCh37),alleles:Array[String],entries:Array[Struct{GT:Call}]}]
      %149 = GetField(%148) [entries]
      !150 = SelectFields(%148) [(locus alleles)] 
      !c0_9 = I32 [0]
      !151 = ArrayRef(%149, !c0_9) [24] 
      !c1_9 = I32 [1]
      !152 = ArrayRef(%149, !c1_9) [25] 
      !c2 = I32 [2]
      !153 = ArrayRef(%149, !c2) [26] 
      !c3 = I32 [3]
      !154 = ArrayRef(%149, !c3) [27]
      InsertFields !150 (0: !151, 1: !152, 2: !153, 3: !154)
    } 
    !c11 = I32 [11]
    !s35 = StreamTake(!s34, !c11)
    StreamLen(!s35)
  }
  !s36 = ToStream(%155) [False] 
  !c0_10 = I32 [0]
  !156 = StreamFold(!s36, !c0_10) {
  (%accum, %elt23) =>
    ApplyBinaryPrimOp(%accum, %elt23) [Add]
  }
  !157 = Cast(!156) [Int64] 
  !158 = I64 [11]
  !159 = ApplyComparisonOp(!157, !158) [GTEQ] 
  !160 = ArrayLen(%13) 
  !161 = ArrayLen(%155)
  !162 = ApplyComparisonOp(!160, !161) [LTEQ]
  !163 = ApplySpecial(!159, !162) [-1, lor, 
  (), Boolean]
  If !163 then { %155 } else {
    !c4_2 = I32 [4]
    !164 = ApplyBinaryPrimOp(%loopvar, !c4_2) [Multiply] 
    !c1_10 = I32 [1]
    !165 = ApplyBinaryPrimOp(%loopvar2, !c1_10) [Add]
    Recur(!164, !165) [Array[Int32]]
  }
}
%167 = ArrayLen(%166)
!c0_11 = I32 [0]
!168 = ApplyComparisonOp(%167, !c0_11) [EQWithNA]
%183 = If !168 then {
  Literal [Tuple[Int32,Int64], <literal value>]
} else {
  !c0_12 = I32 [0] 
  !169 = I64 [11]
  TailLoop(!c0_12, !169) {
  (%loopvar3, %loopvar4, %loop2) =>
    !c1_11 = I32 [1]
    !170 = ApplyBinaryPrimOp(%167, !c1_11) [Subtract]
    !171 = ApplyComparisonOp(%loopvar3, !170) [EQWithNA] 
    !172 = ArrayRef(%166, %loopvar3) [-1]
    !173 = Cast(!172) [Int64]
    !174 = ApplyBinaryPrimOp(%loopvar4, !173) [Subtract] 
    !175 = I64 [0]
    !176 = ApplyComparisonOp(!174, !175) [LTEQ]
    !177 = ApplySpecial(!171, !176) [-1, lor, 
    (), Boolean]
    If !177 then {
      !c1_12 = I32 [1]
      !178 = ApplyBinaryPrimOp(%loopvar3, !c1_12) [Add]
      MakeTuple(!178, %loopvar4) [(0 1)]
    } else {
      !c1_13 = I32 [1]
      !179 = ApplyBinaryPrimOp(%loopvar3, !c1_13) [Add] 
      !180 = ArrayRef(%166, %loopvar3) [-1]
      !181 = Cast(!180) [Int64]
      !182 = ApplyBinaryPrimOp(%loopvar4, !181) [Subtract]
      Recur(!179, !182) [Tuple[Int32,Int64]]
    }
  }
}
!s37 = ToStream(%13) [False] 
!184 = GetTupleElement(%183) [0]
!s38 = StreamTake(!s37, !184) 
!c0_13 = I32 [0] 
!185 = GetTupleElement(%183) [0] 
!c1_14 = I32 [1]
!s39 = StreamRange(!c0_13, !185, !c1_14) [-1, False]
!s40 = StreamMap(!s39) { (%elt24) =>
  !186 = GetTupleElement(%183) [0] 
  !c1_15 = I32 [1]
  !187 = ApplyBinaryPrimOp(!186, !c1_15) [Subtract]
  !188 = ApplyComparisonOp(%elt24, !187) [EQWithNA]
  If !188 then {
    !189 = GetTupleElement(%183) [1]
    Cast(!189) [Int32]
  } else {
    ArrayRef(%166, %elt24) [-1]
  }
}
!s41 = StreamZip(!s38, !s40) [-1, AssumeSameLength] {
(%elt25, %elt26) =>
  MakeStruct(numberToTake: %elt26, old: %elt25)
}
ToArray(!s41)

2023-11-17 18:07:57.863 : INFO: after optimize: relationalLowerer, after LowerOrInterpretNonCompilable: IR size 470: 

!1 = EncodedLiteral [Array[Tuple[Int32,Int32]]]
!s = ToStream(!1) [False] 
!c0 = I32 [0] 
!c1 = I32 [1]
!s2 = StreamIota(!c0, !c1) [False]
!s3 = StreamZip(!s, !s2) [35, TakeMinLength] {
(%elt, %elt2) =>
  !2 = Cast(%elt2) [Int64]
  MakeTuple(!2, %elt) [(0 1)]
}
%3 = ToArray(!s3)
%4 = ArrayLen(%3)
!c0_2 = I32 [0] 
!c8 = I32 [8] 
!c1_2 = I32 [1]
!s4 = StreamRange(!c0_2, !c8, !c1_2) [-1, False] 
!5 = Literal [Array[Interval[Struct{locus:Locus(GRCh37),alleles:Array[String]}]], <literal value>]
!s5 = ToStream(!5) [False] 
!c8_2 = I32 [8]
!6 = ApplyComparisonOp(%4, !c8_2) [EQWithNA]
!12 = If !6 then { %3 } else {
  !7 = Str ["TableGen: ..."] 
  !8 = Apply(%4) [-1, str, (), String]
  !9 = Apply(!7, !8) [-1, concat, (), String] 
  !10 = Str [" contexts."]
  !11 = Apply(!9, !10) [-1, concat, (), String]
  Die(!11) [Array[Tuple[Int64,Tuple[Int32,Int32]]], 9]
}
!s6 = ToStream(!12) [False]
!s7 = StreamZip(!s4, !s5, !s6) [9, AssertSameLength] {
(%elt3, %elt4, %elt5) =>
  MakeTuple(%elt3, %elt4, %elt5) [(0 1 2)]
}
%13 = ToArray(!s7)
!c4 = I32 [4] 
!c0_3 = I32 [0]
%166 = TailLoop(!c4, !c0_3) {
(%loopvar, %loopvar2, %loop) =>
  %14 = RNGStateLiteral
  !c0_4 = I32 [0] 
  !c10 = I32 [10] 
  !c1_3 = I32 [1]
  !s8 = StreamRange(!c0_4, !c10, !c1_3) [1, False]
  !s11 = StreamMap(!s8) { (%elt6) =>
    !15 = Cast(%elt6) [Int64]
    %16 = MakeTuple(!15, %elt6) [(0 1)]
    !17 = GetTupleElement(%16) [1] 
    !18 = EncodedLiteral [Array[Int32]]
    !s9 = ToStream(!18) [False]
    !s10 = StreamMap(!s9) { (%elt7) =>
      Cast(%elt7) [Float64]
    }
    !19 = ToArray(!s10) 
    !20 = GetTupleElement(%16) [0]
    !21 = RNGSplit(%14, !20)
    !22 = ApplySeeded(!19, !21) [rand_cat, 0, Int32]
    MakeStruct(sample_idx: !17, pop: !22)
  }
  !23 = ToArray(!s11)
  %24 = MakeStruct(cols: !23)
  !25 = GetField(%24) [cols]
  !s12 = ToStream(!25) [False] 
  !c0_5 = I32 [0] 
  !c1_4 = I32 [1]
  !s13 = StreamIota(!c0_5, !c1_4) [False]
  !s14 = StreamZip(!s12, !s13) [34, TakeMinLength] {
  (%elt8, %elt9) =>
    !26 = Cast(%elt9) [Int64]
    InsertFields %elt8 (__col_uid: !26)
  }
  !27 = ToArray(!s14)
  %28 = InsertFields %24 (cols: !27)
  !s15 = ToStream(%13) [False]
  !s16 = StreamTake(!s15, %loopvar) 
  !29 = CastRename(%28) [Struct{__cols:Array[Struct{sample_idx:Int32,pop:Int32,__col_uid:Int64}]}]
  %30 = MakeStruct(__iruid_1052: %28, __iruid_1054: !29)
  !31 = IsNA(%30)
  !39 = If !31 then {
    NA [Struct{__iruid_1052:Struct{cols:Array[Struct{}]},__iruid_1054:Struct{__cols:Array[Struct{sample_idx:Int32,pop:Int32,__col_uid:Int64}]}}]
  } else {
    %32 = GetField(%30) [__iruid_1052]
    !33 = IsNA(%32)
    !37 = If !33 then {
      NA [Struct{cols:Array[Struct{}]}]
    } else {
      !34 = GetField(%32) [cols]
      !s17 = ToStream(!34) [False]
      !s18 = StreamMap(!s17) { (%elt10) =>
        !35 = IsNA(%elt10)
        If !35 then {
          NA [Struct{}]
        } else {
          Literal [Struct{}, <literal value>]
        }
      }
      !36 = ToArray(!s18)
      MakeStruct(cols: !36)
    } 
    !38 = GetField(%30) [__iruid_1054]
    MakeStruct(__iruid_1052: !37, __iruid_1054: !38)
  } 
  !40 = Str ["iteration="] 
  !41 = Apply(%loopvar2) [-1, str, (), String]
  !42 = Apply(!40, !41) [-1, concat, (), String] 
  !43 = Str [",nParts="]
  !44 = Apply(!42, !43) [-1, concat, (), String] 
  !45 = Apply(%loopvar) [-1, str, (), String]
  !46 = Apply(!44, !45) [-1, concat, (), String]
  %155 = CollectDistributedArray(!s16, !39, !46) {
  (%ctx, %g) =>
    %47 = GetField(%g) [__iruid_1054]
    %48 = GetField(%g) [__iruid_1052]
    %49 = GetTupleElement(%ctx) [1]
    %50 = GetTupleElement(%ctx) [2]
    %51 = GetTupleElement(%50) [0]
    !c0_6 = I32 [0] 
    !c1_5 = I32 [1]
    !s19 = StreamIota(!c0_6, !c1_5) [False] 
    !52 = RNGStateLiteral
    %53 = RNGSplit(!52, %51)
    %54 = GetTupleElement(%50) [1]
    !55 = GetTupleElement(%54) [0] 
    !56 = GetTupleElement(%54) [1] 
    !c1_6 = I32 [1]
    !s20 = StreamRange(!55, !56, !c1_6) [3, False]
    !s26 = StreamMap(!s20) { (%elt11) =>
      !57 = Cast(%elt11) [Int64]
      %58 = MakeTuple(!57, %elt11) [(0 1)]
      !59 = GetTupleElement(%58) [0]
      %60 = RNGSplit(%53, !59)
      !61 = F64 [0.1] 
      !62 = F64 [0.9]
      %63 = ApplySeeded(!61, !62, %60) [rand_unif, -1, Float64]
      !64 = GetTupleElement(%58) [1]
      !65 = Cast(!64) [Int64]
      !66 = Apply(!65) [5, globalPosToLocus, 
      (), Locus(GRCh37)] 
      !67 = EncodedLiteral [Array[String]] 
      !68 = EncodedLiteral [Array[Float64]]
      !s21 = ToStream(!68) [False] 
      !c0_7 = I32 [0] 
      !c1_7 = I32 [1]
      !s22 = StreamIota(!c0_7, !c1_7) [False]
      !s23 = StreamZip(!s21, !s22) [7, TakeMinLength] {
      (%elt12, %elt13) =>
        !69 = Cast(%elt13) [Int64]
        %70 = MakeTuple(!69, %elt12) [(0 1)]
        %71 = GetTupleElement(%70) [1]
        !72 = ApplyBinaryPrimOp(%63, %71) [Multiply] 
        !73 = F64 [1.0]
        !74 = ApplyBinaryPrimOp(!73, %63) [Subtract]
        !75 = ApplyBinaryPrimOp(!74, %71) [Multiply] 
        !76 = GetTupleElement(%70) [0]
        !77 = RNGSplit(%60, !76)
        ApplySeeded(!72, !75, !77) [rand_beta, 1, Float64]
      }
      !78 = ToArray(!s23) 
      !c0_8 = I32 [0] 
      !c10_2 = I32 [10] 
      !c1_8 = I32 [1]
      !s24 = StreamRange(!c0_8, !c10_2, !c1_8) [8, False]
      !s25 = StreamMap(!s24) { (%elt14) =>
        Literal [Struct{}, <literal value>]
      }
      !79 = ToArray(!s25)
      MakeStruct(locus: !66, alleles: !67, af: !78, entries: !79)
    }
    !s27 = StreamZip(!s19, !s26) [36, TakeMinLength] {
    (%elt15, %elt16) =>
      !80 = Cast(%elt15) [Int64]
      !81 = MakeTuple(%51, !80) [(0 1)]
      InsertFields %elt16 (__row_uid: !81)
    }
    !s28 = StreamMap(!s27) { (%elt17) =>
      !82 = SelectFields(%elt17) [(locus alleles)]
      !83 = ApplySpecial(%49, !82) [-1, contains, 
      (), Boolean]
      If !83 then { %elt17 } else {
        !84 = Str ["TableGen: ..."] 
        !85 = GetTupleElement(%ctx) [0]
        !86 = Apply(!85) [-1, str, (), String]
        !87 = Apply(!84, !86) [-1, concat, (), String] 
        !88 = Str ["\n\tRange bo..."]
        !89 = Apply(!87, !88) [-1, concat, (), String] 
        !90 = GetTupleElement(%ctx) [0]
        !91 = Apply(!90) [-1, str, (), String]
        !92 = Apply(!89, !91) [-1, concat, (), String] 
        !93 = Str [": "]
        !94 = Apply(!92, !93) [-1, concat, (), String] 
        !95 = Apply(%49) [-1, str, (), String]
        !96 = Apply(!94, !95) [-1, concat, (), String] 
        !97 = Str ["\n\tInvalid ..."]
        !98 = Apply(!96, !97) [-1, concat, (), String] 
        !99 = SelectFields(%elt17) [(locus alleles)]
        !100 = Apply(!99) [-1, str, (), String]
        !101 = Apply(!98, !100) [-1, concat, (), String]
        Die(!101) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, 9]
      }
    }
    !s29 = StreamMap(!s28) { (%elt18) =>
      %102 = GetField(%elt18) [entries]
      !103 = IsNA(%102)
      If !103 then {
        !104 = Str ["missing en..."]
        Die(!104) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, -1]
      } else {
        !105 = GetField(%48) [cols]
        %106 = ArrayLen(!105)
        %107 = ArrayLen(%102)
        !108 = ApplyComparisonOp(%107, %106) [NEQWithNA]
        If !108 then {
          !109 = Str ["length mis..."] 
          !110 = Apply(%107) [-1, str, (), String]
          !111 = Apply(!109, !110) [-1, concat, (), String] 
          !112 = Str [" entries, "]
          !113 = Apply(!111, !112) [-1, concat, (), String] 
          !114 = Apply(%106) [-1, str, (), String]
          !115 = Apply(!113, !114) [-1, concat, (), String] 
          !116 = Str [" cols, at "]
          !117 = Apply(!115, !116) [-1, concat, (), String] 
          !118 = SelectFields(%elt18) [(locus alleles)]
          !119 = Apply(!118) [-1, str, (), String]
          !120 = Apply(!117, !119) [-1, concat, (), String]
          Die(!120) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, -1]
        } else { %elt18 }
      }
    }
    !s33 = StreamMap(!s29) { (%elt19) =>
      %121 = CastRename(%elt19) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],`the entries! [877f12a8827e18f61222c6c8c5fb04a8]`:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}]
      !122 = SelectFields(%121) [(locus alleles)] 
      !123 = GetField(%121) [`the entries! [877f12a8827e18f61222c6c8c5fb04a8]`]
      !s30 = ToStream(!123) [False] 
      !124 = GetField(%47) [__cols]
      !s31 = ToStream(!124) [False]
      !s32 = StreamZip(!s30, !s31) [-1, AssumeSameLength] {
      (%elt20, %elt21) =>
        %125 = GetField(%121) [__row_uid]
        !126 = GetField(%121) [af] 
        !127 = GetField(%elt21) [pop]
        %128 = ApplyIR(!126, !127) [10, indexArray, 
        (), Float64]
        !129 = F64 [1.0]
        %130 = ApplyBinaryPrimOp(!129, %128) [Subtract]
        !131 = F64 [2.0]
        !132 = Apply(%130, !131) [13, pow, (), Float64] 
        !133 = F64 [2.0]
        !134 = ApplyBinaryPrimOp(!133, %128) [Multiply]
        !135 = ApplyBinaryPrimOp(!134, %130) [Multiply] 
        !136 = F64 [2.0]
        !137 = Apply(%128, !136) [16, pow, (), Float64]
        !138 = MakeArray(!132, !135, !137) [Array[Float64]] 
        !139 = RNGStateLiteral 
        !140 = GetTupleElement(%125) [0] 
        !141 = GetTupleElement(%125) [1] 
        !142 = GetField(%elt21) [__col_uid]
        !143 = MakeTuple(!140, !141, !142) [(0 1 2)]
        !144 = RNGSplit(!139, !143)
        !145 = ApplySeeded(!138, !144) [rand_cat, 2, Int32]
        !146 = Apply(!145) [17, UnphasedDiploidGtIndexCall, 
        (), Call]
        InsertFields %elt20 (GT: !146)
      }
      !147 = ToArray(!s32)
      InsertFields !122 (the entries! [877f12a8827e18f61222c6c8c5fb04a8]: !147)
    }
    !s34 = StreamMap(!s33) { (%elt22) =>
      %148 = CastRename(%elt22) [Struct{locus:Locus(GRCh37),alleles:Array[String],entries:Array[Struct{GT:Call}]}]
      %149 = GetField(%148) [entries]
      !150 = SelectFields(%148) [(locus alleles)] 
      !c0_9 = I32 [0]
      !151 = ArrayRef(%149, !c0_9) [24] 
      !c1_9 = I32 [1]
      !152 = ArrayRef(%149, !c1_9) [25] 
      !c2 = I32 [2]
      !153 = ArrayRef(%149, !c2) [26] 
      !c3 = I32 [3]
      !154 = ArrayRef(%149, !c3) [27]
      InsertFields !150 (0: !151, 1: !152, 2: !153, 3: !154)
    } 
    !c11 = I32 [11]
    !s35 = StreamTake(!s34, !c11)
    StreamLen(!s35)
  }
  !s36 = ToStream(%155) [False] 
  !c0_10 = I32 [0]
  !156 = StreamFold(!s36, !c0_10) {
  (%accum, %elt23) =>
    ApplyBinaryPrimOp(%accum, %elt23) [Add]
  }
  !157 = Cast(!156) [Int64] 
  !158 = I64 [11]
  !159 = ApplyComparisonOp(!157, !158) [GTEQ] 
  !160 = ArrayLen(%13) 
  !161 = ArrayLen(%155)
  !162 = ApplyComparisonOp(!160, !161) [LTEQ]
  !163 = ApplySpecial(!159, !162) [-1, lor, 
  (), Boolean]
  If !163 then { %155 } else {
    !c4_2 = I32 [4]
    !164 = ApplyBinaryPrimOp(%loopvar, !c4_2) [Multiply] 
    !c1_10 = I32 [1]
    !165 = ApplyBinaryPrimOp(%loopvar2, !c1_10) [Add]
    Recur(!164, !165) [Array[Int32]]
  }
}
%167 = ArrayLen(%166)
!c0_11 = I32 [0]
!168 = ApplyComparisonOp(%167, !c0_11) [EQWithNA]
%183 = If !168 then {
  Literal [Tuple[Int32,Int64], <literal value>]
} else {
  !c0_12 = I32 [0] 
  !169 = I64 [11]
  TailLoop(!c0_12, !169) {
  (%loopvar3, %loopvar4, %loop2) =>
    !c1_11 = I32 [1]
    !170 = ApplyBinaryPrimOp(%167, !c1_11) [Subtract]
    !171 = ApplyComparisonOp(%loopvar3, !170) [EQWithNA] 
    !172 = ArrayRef(%166, %loopvar3) [-1]
    !173 = Cast(!172) [Int64]
    !174 = ApplyBinaryPrimOp(%loopvar4, !173) [Subtract] 
    !175 = I64 [0]
    !176 = ApplyComparisonOp(!174, !175) [LTEQ]
    !177 = ApplySpecial(!171, !176) [-1, lor, 
    (), Boolean]
    If !177 then {
      !c1_12 = I32 [1]
      !178 = ApplyBinaryPrimOp(%loopvar3, !c1_12) [Add]
      MakeTuple(!178, %loopvar4) [(0 1)]
    } else {
      !c1_13 = I32 [1]
      !179 = ApplyBinaryPrimOp(%loopvar3, !c1_13) [Add] 
      !180 = ArrayRef(%166, %loopvar3) [-1]
      !181 = Cast(!180) [Int64]
      !182 = ApplyBinaryPrimOp(%loopvar4, !181) [Subtract]
      Recur(!179, !182) [Tuple[Int32,Int64]]
    }
  }
}
!s37 = ToStream(%13) [False] 
!184 = GetTupleElement(%183) [0]
!s38 = StreamTake(!s37, !184) 
!c0_13 = I32 [0] 
!185 = GetTupleElement(%183) [0] 
!c1_14 = I32 [1]
!s39 = StreamRange(!c0_13, !185, !c1_14) [-1, False]
!s40 = StreamMap(!s39) { (%elt24) =>
  !186 = GetTupleElement(%183) [0] 
  !c1_15 = I32 [1]
  !187 = ApplyBinaryPrimOp(!186, !c1_15) [Subtract]
  !188 = ApplyComparisonOp(%elt24, !187) [EQWithNA]
  If !188 then {
    !189 = GetTupleElement(%183) [1]
    Cast(!189) [Int32]
  } else {
    ArrayRef(%166, %elt24) [-1]
  }
}
!s41 = StreamZip(!s38, !s40) [-1, AssumeSameLength] {
(%elt25, %elt26) =>
  MakeStruct(numberToTake: %elt26, old: %elt25)
}
ToArray(!s41)

2023-11-17 18:07:57.874 : INFO: initial IR: IR size 471: 

!1 = EncodedLiteral [Array[Tuple[Int32,Int32]]]
!s = ToStream(!1) [False] 
!c0 = I32 [0] 
!c1 = I32 [1]
!s2 = StreamIota(!c0, !c1) [False]
!s3 = StreamZip(!s, !s2) [35, TakeMinLength] {
(%elt, %elt2) =>
  !2 = Cast(%elt2) [Int64]
  MakeTuple(!2, %elt) [(0 1)]
}
%3 = ToArray(!s3)
%4 = ArrayLen(%3)
!c0_2 = I32 [0] 
!c8 = I32 [8] 
!c1_2 = I32 [1]
!s4 = StreamRange(!c0_2, !c8, !c1_2) [-1, False] 
!5 = Literal [Array[Interval[Struct{locus:Locus(GRCh37),alleles:Array[String]}]], <literal value>]
!s5 = ToStream(!5) [False] 
!c8_2 = I32 [8]
!6 = ApplyComparisonOp(%4, !c8_2) [EQWithNA]
!12 = If !6 then { %3 } else {
  !7 = Str ["TableGen: ..."] 
  !8 = Apply(%4) [-1, str, (), String]
  !9 = Apply(!7, !8) [-1, concat, (), String] 
  !10 = Str [" contexts."]
  !11 = Apply(!9, !10) [-1, concat, (), String]
  Die(!11) [Array[Tuple[Int64,Tuple[Int32,Int32]]], 9]
}
!s6 = ToStream(!12) [False]
!s7 = StreamZip(!s4, !s5, !s6) [9, AssertSameLength] {
(%elt3, %elt4, %elt5) =>
  MakeTuple(%elt3, %elt4, %elt5) [(0 1 2)]
}
%13 = ToArray(!s7)
!c4 = I32 [4] 
!c0_3 = I32 [0]
%166 = TailLoop(!c4, !c0_3) {
(%loopvar, %loopvar2, %loop) =>
  %14 = RNGStateLiteral
  !c0_4 = I32 [0] 
  !c10 = I32 [10] 
  !c1_3 = I32 [1]
  !s8 = StreamRange(!c0_4, !c10, !c1_3) [1, False]
  !s11 = StreamMap(!s8) { (%elt6) =>
    !15 = Cast(%elt6) [Int64]
    %16 = MakeTuple(!15, %elt6) [(0 1)]
    !17 = GetTupleElement(%16) [1] 
    !18 = EncodedLiteral [Array[Int32]]
    !s9 = ToStream(!18) [False]
    !s10 = StreamMap(!s9) { (%elt7) =>
      Cast(%elt7) [Float64]
    }
    !19 = ToArray(!s10) 
    !20 = GetTupleElement(%16) [0]
    !21 = RNGSplit(%14, !20)
    !22 = ApplySeeded(!19, !21) [rand_cat, 0, Int32]
    MakeStruct(sample_idx: !17, pop: !22)
  }
  !23 = ToArray(!s11)
  %24 = MakeStruct(cols: !23)
  !25 = GetField(%24) [cols]
  !s12 = ToStream(!25) [False] 
  !c0_5 = I32 [0] 
  !c1_4 = I32 [1]
  !s13 = StreamIota(!c0_5, !c1_4) [False]
  !s14 = StreamZip(!s12, !s13) [34, TakeMinLength] {
  (%elt8, %elt9) =>
    !26 = Cast(%elt9) [Int64]
    InsertFields %elt8 (__col_uid: !26)
  }
  !27 = ToArray(!s14)
  %28 = InsertFields %24 (cols: !27)
  !s15 = ToStream(%13) [False]
  !s16 = StreamTake(!s15, %loopvar) 
  !29 = CastRename(%28) [Struct{__cols:Array[Struct{sample_idx:Int32,pop:Int32,__col_uid:Int64}]}]
  %30 = MakeStruct(__iruid_1052: %28, __iruid_1054: !29)
  !31 = IsNA(%30)
  !39 = If !31 then {
    NA [Struct{__iruid_1052:Struct{cols:Array[Struct{}]},__iruid_1054:Struct{__cols:Array[Struct{sample_idx:Int32,pop:Int32,__col_uid:Int64}]}}]
  } else {
    %32 = GetField(%30) [__iruid_1052]
    !33 = IsNA(%32)
    !37 = If !33 then {
      NA [Struct{cols:Array[Struct{}]}]
    } else {
      !34 = GetField(%32) [cols]
      !s17 = ToStream(!34) [False]
      !s18 = StreamMap(!s17) { (%elt10) =>
        !35 = IsNA(%elt10)
        If !35 then {
          NA [Struct{}]
        } else {
          Literal [Struct{}, <literal value>]
        }
      }
      !36 = ToArray(!s18)
      MakeStruct(cols: !36)
    } 
    !38 = GetField(%30) [__iruid_1054]
    MakeStruct(__iruid_1052: !37, __iruid_1054: !38)
  } 
  !40 = Str ["iteration="] 
  !41 = Apply(%loopvar2) [-1, str, (), String]
  !42 = Apply(!40, !41) [-1, concat, (), String] 
  !43 = Str [",nParts="]
  !44 = Apply(!42, !43) [-1, concat, (), String] 
  !45 = Apply(%loopvar) [-1, str, (), String]
  !46 = Apply(!44, !45) [-1, concat, (), String]
  %155 = CollectDistributedArray(!s16, !39, !46) {
  (%ctx, %g) =>
    %47 = GetField(%g) [__iruid_1054]
    %48 = GetField(%g) [__iruid_1052]
    %49 = GetTupleElement(%ctx) [1]
    %50 = GetTupleElement(%ctx) [2]
    %51 = GetTupleElement(%50) [0]
    !c0_6 = I32 [0] 
    !c1_5 = I32 [1]
    !s19 = StreamIota(!c0_6, !c1_5) [False] 
    !52 = RNGStateLiteral
    %53 = RNGSplit(!52, %51)
    %54 = GetTupleElement(%50) [1]
    !55 = GetTupleElement(%54) [0] 
    !56 = GetTupleElement(%54) [1] 
    !c1_6 = I32 [1]
    !s20 = StreamRange(!55, !56, !c1_6) [3, False]
    !s26 = StreamMap(!s20) { (%elt11) =>
      !57 = Cast(%elt11) [Int64]
      %58 = MakeTuple(!57, %elt11) [(0 1)]
      !59 = GetTupleElement(%58) [0]
      %60 = RNGSplit(%53, !59)
      !61 = F64 [0.1] 
      !62 = F64 [0.9]
      %63 = ApplySeeded(!61, !62, %60) [rand_unif, -1, Float64]
      !64 = GetTupleElement(%58) [1]
      !65 = Cast(!64) [Int64]
      !66 = Apply(!65) [5, globalPosToLocus, 
      (), Locus(GRCh37)] 
      !67 = EncodedLiteral [Array[String]] 
      !68 = EncodedLiteral [Array[Float64]]
      !s21 = ToStream(!68) [False] 
      !c0_7 = I32 [0] 
      !c1_7 = I32 [1]
      !s22 = StreamIota(!c0_7, !c1_7) [False]
      !s23 = StreamZip(!s21, !s22) [7, TakeMinLength] {
      (%elt12, %elt13) =>
        !69 = Cast(%elt13) [Int64]
        %70 = MakeTuple(!69, %elt12) [(0 1)]
        %71 = GetTupleElement(%70) [1]
        !72 = ApplyBinaryPrimOp(%63, %71) [Multiply] 
        !73 = F64 [1.0]
        !74 = ApplyBinaryPrimOp(!73, %63) [Subtract]
        !75 = ApplyBinaryPrimOp(!74, %71) [Multiply] 
        !76 = GetTupleElement(%70) [0]
        !77 = RNGSplit(%60, !76)
        ApplySeeded(!72, !75, !77) [rand_beta, 1, Float64]
      }
      !78 = ToArray(!s23) 
      !c0_8 = I32 [0] 
      !c10_2 = I32 [10] 
      !c1_8 = I32 [1]
      !s24 = StreamRange(!c0_8, !c10_2, !c1_8) [8, False]
      !s25 = StreamMap(!s24) { (%elt14) =>
        Literal [Struct{}, <literal value>]
      }
      !79 = ToArray(!s25)
      MakeStruct(locus: !66, alleles: !67, af: !78, entries: !79)
    }
    !s27 = StreamZip(!s19, !s26) [36, TakeMinLength] {
    (%elt15, %elt16) =>
      !80 = Cast(%elt15) [Int64]
      !81 = MakeTuple(%51, !80) [(0 1)]
      InsertFields %elt16 (__row_uid: !81)
    }
    !s28 = StreamMap(!s27) { (%elt17) =>
      !82 = SelectFields(%elt17) [(locus alleles)]
      !83 = ApplySpecial(%49, !82) [-1, contains, 
      (), Boolean]
      If !83 then { %elt17 } else {
        !84 = Str ["TableGen: ..."] 
        !85 = GetTupleElement(%ctx) [0]
        !86 = Apply(!85) [-1, str, (), String]
        !87 = Apply(!84, !86) [-1, concat, (), String] 
        !88 = Str ["\n\tRange bo..."]
        !89 = Apply(!87, !88) [-1, concat, (), String] 
        !90 = GetTupleElement(%ctx) [0]
        !91 = Apply(!90) [-1, str, (), String]
        !92 = Apply(!89, !91) [-1, concat, (), String] 
        !93 = Str [": "]
        !94 = Apply(!92, !93) [-1, concat, (), String] 
        !95 = Apply(%49) [-1, str, (), String]
        !96 = Apply(!94, !95) [-1, concat, (), String] 
        !97 = Str ["\n\tInvalid ..."]
        !98 = Apply(!96, !97) [-1, concat, (), String] 
        !99 = SelectFields(%elt17) [(locus alleles)]
        !100 = Apply(!99) [-1, str, (), String]
        !101 = Apply(!98, !100) [-1, concat, (), String]
        Die(!101) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, 9]
      }
    }
    !s29 = StreamMap(!s28) { (%elt18) =>
      %102 = GetField(%elt18) [entries]
      !103 = IsNA(%102)
      If !103 then {
        !104 = Str ["missing en..."]
        Die(!104) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, -1]
      } else {
        !105 = GetField(%48) [cols]
        %106 = ArrayLen(!105)
        %107 = ArrayLen(%102)
        !108 = ApplyComparisonOp(%107, %106) [NEQWithNA]
        If !108 then {
          !109 = Str ["length mis..."] 
          !110 = Apply(%107) [-1, str, (), String]
          !111 = Apply(!109, !110) [-1, concat, (), String] 
          !112 = Str [" entries, "]
          !113 = Apply(!111, !112) [-1, concat, (), String] 
          !114 = Apply(%106) [-1, str, (), String]
          !115 = Apply(!113, !114) [-1, concat, (), String] 
          !116 = Str [" cols, at "]
          !117 = Apply(!115, !116) [-1, concat, (), String] 
          !118 = SelectFields(%elt18) [(locus alleles)]
          !119 = Apply(!118) [-1, str, (), String]
          !120 = Apply(!117, !119) [-1, concat, (), String]
          Die(!120) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, -1]
        } else { %elt18 }
      }
    }
    !s33 = StreamMap(!s29) { (%elt19) =>
      %121 = CastRename(%elt19) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],`the entries! [877f12a8827e18f61222c6c8c5fb04a8]`:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}]
      !122 = SelectFields(%121) [(locus alleles)] 
      !123 = GetField(%121) [`the entries! [877f12a8827e18f61222c6c8c5fb04a8]`]
      !s30 = ToStream(!123) [False] 
      !124 = GetField(%47) [__cols]
      !s31 = ToStream(!124) [False]
      !s32 = StreamZip(!s30, !s31) [-1, AssumeSameLength] {
      (%elt20, %elt21) =>
        %125 = GetField(%121) [__row_uid]
        !126 = GetField(%121) [af] 
        !127 = GetField(%elt21) [pop]
        %128 = ApplyIR(!126, !127) [10, indexArray, 
        (), Float64]
        !129 = F64 [1.0]
        %130 = ApplyBinaryPrimOp(!129, %128) [Subtract]
        !131 = F64 [2.0]
        !132 = Apply(%130, !131) [13, pow, (), Float64] 
        !133 = F64 [2.0]
        !134 = ApplyBinaryPrimOp(!133, %128) [Multiply]
        !135 = ApplyBinaryPrimOp(!134, %130) [Multiply] 
        !136 = F64 [2.0]
        !137 = Apply(%128, !136) [16, pow, (), Float64]
        !138 = MakeArray(!132, !135, !137) [Array[Float64]] 
        !139 = RNGStateLiteral 
        !140 = GetTupleElement(%125) [0] 
        !141 = GetTupleElement(%125) [1] 
        !142 = GetField(%elt21) [__col_uid]
        !143 = MakeTuple(!140, !141, !142) [(0 1 2)]
        !144 = RNGSplit(!139, !143)
        !145 = ApplySeeded(!138, !144) [rand_cat, 2, Int32]
        !146 = Apply(!145) [17, UnphasedDiploidGtIndexCall, 
        (), Call]
        InsertFields %elt20 (GT: !146)
      }
      !147 = ToArray(!s32)
      InsertFields !122 (the entries! [877f12a8827e18f61222c6c8c5fb04a8]: !147)
    }
    !s34 = StreamMap(!s33) { (%elt22) =>
      %148 = CastRename(%elt22) [Struct{locus:Locus(GRCh37),alleles:Array[String],entries:Array[Struct{GT:Call}]}]
      %149 = GetField(%148) [entries]
      !150 = SelectFields(%148) [(locus alleles)] 
      !c0_9 = I32 [0]
      !151 = ArrayRef(%149, !c0_9) [24] 
      !c1_9 = I32 [1]
      !152 = ArrayRef(%149, !c1_9) [25] 
      !c2 = I32 [2]
      !153 = ArrayRef(%149, !c2) [26] 
      !c3 = I32 [3]
      !154 = ArrayRef(%149, !c3) [27]
      InsertFields !150 (0: !151, 1: !152, 2: !153, 3: !154)
    } 
    !c11 = I32 [11]
    !s35 = StreamTake(!s34, !c11)
    StreamLen(!s35)
  }
  !s36 = ToStream(%155) [False] 
  !c0_10 = I32 [0]
  !156 = StreamFold(!s36, !c0_10) {
  (%accum, %elt23) =>
    ApplyBinaryPrimOp(%accum, %elt23) [Add]
  }
  !157 = Cast(!156) [Int64] 
  !158 = I64 [11]
  !159 = ApplyComparisonOp(!157, !158) [GTEQ] 
  !160 = ArrayLen(%13) 
  !161 = ArrayLen(%155)
  !162 = ApplyComparisonOp(!160, !161) [LTEQ]
  !163 = ApplySpecial(!159, !162) [-1, lor, 
  (), Boolean]
  If !163 then { %155 } else {
    !c4_2 = I32 [4]
    !164 = ApplyBinaryPrimOp(%loopvar, !c4_2) [Multiply] 
    !c1_10 = I32 [1]
    !165 = ApplyBinaryPrimOp(%loopvar2, !c1_10) [Add]
    Recur(!164, !165) [Array[Int32]]
  }
}
%167 = ArrayLen(%166)
!c0_11 = I32 [0]
!168 = ApplyComparisonOp(%167, !c0_11) [EQWithNA]
%183 = If !168 then {
  Literal [Tuple[Int32,Int64], <literal value>]
} else {
  !c0_12 = I32 [0] 
  !169 = I64 [11]
  TailLoop(!c0_12, !169) {
  (%loopvar3, %loopvar4, %loop2) =>
    !c1_11 = I32 [1]
    !170 = ApplyBinaryPrimOp(%167, !c1_11) [Subtract]
    !171 = ApplyComparisonOp(%loopvar3, !170) [EQWithNA] 
    !172 = ArrayRef(%166, %loopvar3) [-1]
    !173 = Cast(!172) [Int64]
    !174 = ApplyBinaryPrimOp(%loopvar4, !173) [Subtract] 
    !175 = I64 [0]
    !176 = ApplyComparisonOp(!174, !175) [LTEQ]
    !177 = ApplySpecial(!171, !176) [-1, lor, 
    (), Boolean]
    If !177 then {
      !c1_12 = I32 [1]
      !178 = ApplyBinaryPrimOp(%loopvar3, !c1_12) [Add]
      MakeTuple(!178, %loopvar4) [(0 1)]
    } else {
      !c1_13 = I32 [1]
      !179 = ApplyBinaryPrimOp(%loopvar3, !c1_13) [Add] 
      !180 = ArrayRef(%166, %loopvar3) [-1]
      !181 = Cast(!180) [Int64]
      !182 = ApplyBinaryPrimOp(%loopvar4, !181) [Subtract]
      Recur(!179, !182) [Tuple[Int32,Int64]]
    }
  }
}
!s37 = ToStream(%13) [False] 
!184 = GetTupleElement(%183) [0]
!s38 = StreamTake(!s37, !184) 
!c0_13 = I32 [0] 
!185 = GetTupleElement(%183) [0] 
!c1_14 = I32 [1]
!s39 = StreamRange(!c0_13, !185, !c1_14) [-1, False]
!s40 = StreamMap(!s39) { (%elt24) =>
  !186 = GetTupleElement(%183) [0] 
  !c1_15 = I32 [1]
  !187 = ApplyBinaryPrimOp(!186, !c1_15) [Subtract]
  !188 = ApplyComparisonOp(%elt24, !187) [EQWithNA]
  If !188 then {
    !189 = GetTupleElement(%183) [1]
    Cast(!189) [Int32]
  } else {
    ArrayRef(%166, %elt24) [-1]
  }
}
!s41 = StreamZip(!s38, !s40) [-1, AssumeSameLength] {
(%elt25, %elt26) =>
  MakeStruct(numberToTake: %elt26, old: %elt25)
}
!190 = ToArray(!s41)
MakeTuple(!190) [(0)]

2023-11-17 18:07:57.934 : INFO: after optimize: compileLowerer, initial IR: IR size 471: 

!1 = EncodedLiteral [Array[Tuple[Int32,Int32]]]
!s = ToStream(!1) [False] 
!c0 = I32 [0] 
!c1 = I32 [1]
!s2 = StreamIota(!c0, !c1) [False]
!s3 = StreamZip(!s, !s2) [35, TakeMinLength] {
(%elt, %elt2) =>
  !2 = Cast(%elt2) [Int64]
  MakeTuple(!2, %elt) [(0 1)]
}
%3 = ToArray(!s3)
%4 = ArrayLen(%3)
!c0_2 = I32 [0] 
!c8 = I32 [8] 
!c1_2 = I32 [1]
!s4 = StreamRange(!c0_2, !c8, !c1_2) [-1, False] 
!5 = Literal [Array[Interval[Struct{locus:Locus(GRCh37),alleles:Array[String]}]], <literal value>]
!s5 = ToStream(!5) [False] 
!c8_2 = I32 [8]
!6 = ApplyComparisonOp(%4, !c8_2) [EQWithNA]
!12 = If !6 then { %3 } else {
  !7 = Str ["TableGen: ..."] 
  !8 = Apply(%4) [-1, str, (), String]
  !9 = Apply(!7, !8) [-1, concat, (), String] 
  !10 = Str [" contexts."]
  !11 = Apply(!9, !10) [-1, concat, (), String]
  Die(!11) [Array[Tuple[Int64,Tuple[Int32,Int32]]], 9]
}
!s6 = ToStream(!12) [False]
!s7 = StreamZip(!s4, !s5, !s6) [9, AssertSameLength] {
(%elt3, %elt4, %elt5) =>
  MakeTuple(%elt3, %elt4, %elt5) [(0 1 2)]
}
%13 = ToArray(!s7)
!c4 = I32 [4] 
!c0_3 = I32 [0]
%166 = TailLoop(!c4, !c0_3) {
(%loopvar, %loopvar2, %loop) =>
  %14 = RNGStateLiteral
  !c0_4 = I32 [0] 
  !c10 = I32 [10] 
  !c1_3 = I32 [1]
  !s8 = StreamRange(!c0_4, !c10, !c1_3) [1, False]
  !s11 = StreamMap(!s8) { (%elt6) =>
    !15 = Cast(%elt6) [Int64]
    %16 = MakeTuple(!15, %elt6) [(0 1)]
    !17 = GetTupleElement(%16) [1] 
    !18 = EncodedLiteral [Array[Int32]]
    !s9 = ToStream(!18) [False]
    !s10 = StreamMap(!s9) { (%elt7) =>
      Cast(%elt7) [Float64]
    }
    !19 = ToArray(!s10) 
    !20 = GetTupleElement(%16) [0]
    !21 = RNGSplit(%14, !20)
    !22 = ApplySeeded(!19, !21) [rand_cat, 0, Int32]
    MakeStruct(sample_idx: !17, pop: !22)
  }
  !23 = ToArray(!s11)
  %24 = MakeStruct(cols: !23)
  !25 = GetField(%24) [cols]
  !s12 = ToStream(!25) [False] 
  !c0_5 = I32 [0] 
  !c1_4 = I32 [1]
  !s13 = StreamIota(!c0_5, !c1_4) [False]
  !s14 = StreamZip(!s12, !s13) [34, TakeMinLength] {
  (%elt8, %elt9) =>
    !26 = Cast(%elt9) [Int64]
    InsertFields %elt8 (__col_uid: !26)
  }
  !27 = ToArray(!s14)
  %28 = InsertFields %24 (cols: !27)
  !s15 = ToStream(%13) [False]
  !s16 = StreamTake(!s15, %loopvar) 
  !29 = CastRename(%28) [Struct{__cols:Array[Struct{sample_idx:Int32,pop:Int32,__col_uid:Int64}]}]
  %30 = MakeStruct(__iruid_1052: %28, __iruid_1054: !29)
  !31 = IsNA(%30)
  !39 = If !31 then {
    NA [Struct{__iruid_1052:Struct{cols:Array[Struct{}]},__iruid_1054:Struct{__cols:Array[Struct{sample_idx:Int32,pop:Int32,__col_uid:Int64}]}}]
  } else {
    %32 = GetField(%30) [__iruid_1052]
    !33 = IsNA(%32)
    !37 = If !33 then {
      NA [Struct{cols:Array[Struct{}]}]
    } else {
      !34 = GetField(%32) [cols]
      !s17 = ToStream(!34) [False]
      !s18 = StreamMap(!s17) { (%elt10) =>
        !35 = IsNA(%elt10)
        If !35 then {
          NA [Struct{}]
        } else {
          Literal [Struct{}, <literal value>]
        }
      }
      !36 = ToArray(!s18)
      MakeStruct(cols: !36)
    } 
    !38 = GetField(%30) [__iruid_1054]
    MakeStruct(__iruid_1052: !37, __iruid_1054: !38)
  } 
  !40 = Str ["iteration="] 
  !41 = Apply(%loopvar2) [-1, str, (), String]
  !42 = Apply(!40, !41) [-1, concat, (), String] 
  !43 = Str [",nParts="]
  !44 = Apply(!42, !43) [-1, concat, (), String] 
  !45 = Apply(%loopvar) [-1, str, (), String]
  !46 = Apply(!44, !45) [-1, concat, (), String]
  %155 = CollectDistributedArray(!s16, !39, !46) {
  (%ctx, %g) =>
    %47 = GetField(%g) [__iruid_1054]
    %48 = GetField(%g) [__iruid_1052]
    %49 = GetTupleElement(%ctx) [1]
    %50 = GetTupleElement(%ctx) [2]
    %51 = GetTupleElement(%50) [0]
    !c0_6 = I32 [0] 
    !c1_5 = I32 [1]
    !s19 = StreamIota(!c0_6, !c1_5) [False] 
    !52 = RNGStateLiteral
    %53 = RNGSplit(!52, %51)
    %54 = GetTupleElement(%50) [1]
    !55 = GetTupleElement(%54) [0] 
    !56 = GetTupleElement(%54) [1] 
    !c1_6 = I32 [1]
    !s20 = StreamRange(!55, !56, !c1_6) [3, False]
    !s26 = StreamMap(!s20) { (%elt11) =>
      !57 = Cast(%elt11) [Int64]
      %58 = MakeTuple(!57, %elt11) [(0 1)]
      !59 = GetTupleElement(%58) [0]
      %60 = RNGSplit(%53, !59)
      !61 = F64 [0.1] 
      !62 = F64 [0.9]
      %63 = ApplySeeded(!61, !62, %60) [rand_unif, -1, Float64]
      !64 = GetTupleElement(%58) [1]
      !65 = Cast(!64) [Int64]
      !66 = Apply(!65) [5, globalPosToLocus, 
      (), Locus(GRCh37)] 
      !67 = EncodedLiteral [Array[String]] 
      !68 = EncodedLiteral [Array[Float64]]
      !s21 = ToStream(!68) [False] 
      !c0_7 = I32 [0] 
      !c1_7 = I32 [1]
      !s22 = StreamIota(!c0_7, !c1_7) [False]
      !s23 = StreamZip(!s21, !s22) [7, TakeMinLength] {
      (%elt12, %elt13) =>
        !69 = Cast(%elt13) [Int64]
        %70 = MakeTuple(!69, %elt12) [(0 1)]
        %71 = GetTupleElement(%70) [1]
        !72 = ApplyBinaryPrimOp(%63, %71) [Multiply] 
        !73 = F64 [1.0]
        !74 = ApplyBinaryPrimOp(!73, %63) [Subtract]
        !75 = ApplyBinaryPrimOp(!74, %71) [Multiply] 
        !76 = GetTupleElement(%70) [0]
        !77 = RNGSplit(%60, !76)
        ApplySeeded(!72, !75, !77) [rand_beta, 1, Float64]
      }
      !78 = ToArray(!s23) 
      !c0_8 = I32 [0] 
      !c10_2 = I32 [10] 
      !c1_8 = I32 [1]
      !s24 = StreamRange(!c0_8, !c10_2, !c1_8) [8, False]
      !s25 = StreamMap(!s24) { (%elt14) =>
        Literal [Struct{}, <literal value>]
      }
      !79 = ToArray(!s25)
      MakeStruct(locus: !66, alleles: !67, af: !78, entries: !79)
    }
    !s27 = StreamZip(!s19, !s26) [36, TakeMinLength] {
    (%elt15, %elt16) =>
      !80 = Cast(%elt15) [Int64]
      !81 = MakeTuple(%51, !80) [(0 1)]
      InsertFields %elt16 (__row_uid: !81)
    }
    !s28 = StreamMap(!s27) { (%elt17) =>
      !82 = SelectFields(%elt17) [(locus alleles)]
      !83 = ApplySpecial(%49, !82) [-1, contains, 
      (), Boolean]
      If !83 then { %elt17 } else {
        !84 = Str ["TableGen: ..."] 
        !85 = GetTupleElement(%ctx) [0]
        !86 = Apply(!85) [-1, str, (), String]
        !87 = Apply(!84, !86) [-1, concat, (), String] 
        !88 = Str ["\n\tRange bo..."]
        !89 = Apply(!87, !88) [-1, concat, (), String] 
        !90 = GetTupleElement(%ctx) [0]
        !91 = Apply(!90) [-1, str, (), String]
        !92 = Apply(!89, !91) [-1, concat, (), String] 
        !93 = Str [": "]
        !94 = Apply(!92, !93) [-1, concat, (), String] 
        !95 = Apply(%49) [-1, str, (), String]
        !96 = Apply(!94, !95) [-1, concat, (), String] 
        !97 = Str ["\n\tInvalid ..."]
        !98 = Apply(!96, !97) [-1, concat, (), String] 
        !99 = SelectFields(%elt17) [(locus alleles)]
        !100 = Apply(!99) [-1, str, (), String]
        !101 = Apply(!98, !100) [-1, concat, (), String]
        Die(!101) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, 9]
      }
    }
    !s29 = StreamMap(!s28) { (%elt18) =>
      %102 = GetField(%elt18) [entries]
      !103 = IsNA(%102)
      If !103 then {
        !104 = Str ["missing en..."]
        Die(!104) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, -1]
      } else {
        !105 = GetField(%48) [cols]
        %106 = ArrayLen(!105)
        %107 = ArrayLen(%102)
        !108 = ApplyComparisonOp(%107, %106) [NEQWithNA]
        If !108 then {
          !109 = Str ["length mis..."] 
          !110 = Apply(%107) [-1, str, (), String]
          !111 = Apply(!109, !110) [-1, concat, (), String] 
          !112 = Str [" entries, "]
          !113 = Apply(!111, !112) [-1, concat, (), String] 
          !114 = Apply(%106) [-1, str, (), String]
          !115 = Apply(!113, !114) [-1, concat, (), String] 
          !116 = Str [" cols, at "]
          !117 = Apply(!115, !116) [-1, concat, (), String] 
          !118 = SelectFields(%elt18) [(locus alleles)]
          !119 = Apply(!118) [-1, str, (), String]
          !120 = Apply(!117, !119) [-1, concat, (), String]
          Die(!120) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, -1]
        } else { %elt18 }
      }
    }
    !s33 = StreamMap(!s29) { (%elt19) =>
      %121 = CastRename(%elt19) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],`the entries! [877f12a8827e18f61222c6c8c5fb04a8]`:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}]
      !122 = SelectFields(%121) [(locus alleles)] 
      !123 = GetField(%121) [`the entries! [877f12a8827e18f61222c6c8c5fb04a8]`]
      !s30 = ToStream(!123) [False] 
      !124 = GetField(%47) [__cols]
      !s31 = ToStream(!124) [False]
      !s32 = StreamZip(!s30, !s31) [-1, AssumeSameLength] {
      (%elt20, %elt21) =>
        %125 = GetField(%121) [__row_uid]
        !126 = GetField(%121) [af] 
        !127 = GetField(%elt21) [pop]
        %128 = ApplyIR(!126, !127) [10, indexArray, 
        (), Float64]
        !129 = F64 [1.0]
        %130 = ApplyBinaryPrimOp(!129, %128) [Subtract]
        !131 = F64 [2.0]
        !132 = Apply(%130, !131) [13, pow, (), Float64] 
        !133 = F64 [2.0]
        !134 = ApplyBinaryPrimOp(!133, %128) [Multiply]
        !135 = ApplyBinaryPrimOp(!134, %130) [Multiply] 
        !136 = F64 [2.0]
        !137 = Apply(%128, !136) [16, pow, (), Float64]
        !138 = MakeArray(!132, !135, !137) [Array[Float64]] 
        !139 = RNGStateLiteral 
        !140 = GetTupleElement(%125) [0] 
        !141 = GetTupleElement(%125) [1] 
        !142 = GetField(%elt21) [__col_uid]
        !143 = MakeTuple(!140, !141, !142) [(0 1 2)]
        !144 = RNGSplit(!139, !143)
        !145 = ApplySeeded(!138, !144) [rand_cat, 2, Int32]
        !146 = Apply(!145) [17, UnphasedDiploidGtIndexCall, 
        (), Call]
        InsertFields %elt20 (GT: !146)
      }
      !147 = ToArray(!s32)
      InsertFields !122 (the entries! [877f12a8827e18f61222c6c8c5fb04a8]: !147)
    }
    !s34 = StreamMap(!s33) { (%elt22) =>
      %148 = CastRename(%elt22) [Struct{locus:Locus(GRCh37),alleles:Array[String],entries:Array[Struct{GT:Call}]}]
      %149 = GetField(%148) [entries]
      !150 = SelectFields(%148) [(locus alleles)] 
      !c0_9 = I32 [0]
      !151 = ArrayRef(%149, !c0_9) [24] 
      !c1_9 = I32 [1]
      !152 = ArrayRef(%149, !c1_9) [25] 
      !c2 = I32 [2]
      !153 = ArrayRef(%149, !c2) [26] 
      !c3 = I32 [3]
      !154 = ArrayRef(%149, !c3) [27]
      InsertFields !150 (0: !151, 1: !152, 2: !153, 3: !154)
    } 
    !c11 = I32 [11]
    !s35 = StreamTake(!s34, !c11)
    StreamLen(!s35)
  }
  !s36 = ToStream(%155) [False] 
  !c0_10 = I32 [0]
  !156 = StreamFold(!s36, !c0_10) {
  (%accum, %elt23) =>
    ApplyBinaryPrimOp(%accum, %elt23) [Add]
  }
  !157 = Cast(!156) [Int64] 
  !158 = I64 [11]
  !159 = ApplyComparisonOp(!157, !158) [GTEQ] 
  !160 = ArrayLen(%13) 
  !161 = ArrayLen(%155)
  !162 = ApplyComparisonOp(!160, !161) [LTEQ]
  !163 = ApplySpecial(!159, !162) [-1, lor, 
  (), Boolean]
  If !163 then { %155 } else {
    !c4_2 = I32 [4]
    !164 = ApplyBinaryPrimOp(%loopvar, !c4_2) [Multiply] 
    !c1_10 = I32 [1]
    !165 = ApplyBinaryPrimOp(%loopvar2, !c1_10) [Add]
    Recur(!164, !165) [Array[Int32]]
  }
}
%167 = ArrayLen(%166)
!c0_11 = I32 [0]
!168 = ApplyComparisonOp(%167, !c0_11) [EQWithNA]
%183 = If !168 then {
  Literal [Tuple[Int32,Int64], <literal value>]
} else {
  !c0_12 = I32 [0] 
  !169 = I64 [11]
  TailLoop(!c0_12, !169) {
  (%loopvar3, %loopvar4, %loop2) =>
    !c1_11 = I32 [1]
    !170 = ApplyBinaryPrimOp(%167, !c1_11) [Subtract]
    !171 = ApplyComparisonOp(%loopvar3, !170) [EQWithNA] 
    !172 = ArrayRef(%166, %loopvar3) [-1]
    !173 = Cast(!172) [Int64]
    !174 = ApplyBinaryPrimOp(%loopvar4, !173) [Subtract] 
    !175 = I64 [0]
    !176 = ApplyComparisonOp(!174, !175) [LTEQ]
    !177 = ApplySpecial(!171, !176) [-1, lor, 
    (), Boolean]
    If !177 then {
      !c1_12 = I32 [1]
      !178 = ApplyBinaryPrimOp(%loopvar3, !c1_12) [Add]
      MakeTuple(!178, %loopvar4) [(0 1)]
    } else {
      !c1_13 = I32 [1]
      !179 = ApplyBinaryPrimOp(%loopvar3, !c1_13) [Add] 
      !180 = ArrayRef(%166, %loopvar3) [-1]
      !181 = Cast(!180) [Int64]
      !182 = ApplyBinaryPrimOp(%loopvar4, !181) [Subtract]
      Recur(!179, !182) [Tuple[Int32,Int64]]
    }
  }
}
!s37 = ToStream(%13) [False] 
!184 = GetTupleElement(%183) [0]
!s38 = StreamTake(!s37, !184) 
!c0_13 = I32 [0] 
!185 = GetTupleElement(%183) [0] 
!c1_14 = I32 [1]
!s39 = StreamRange(!c0_13, !185, !c1_14) [-1, False]
!s40 = StreamMap(!s39) { (%elt24) =>
  !186 = GetTupleElement(%183) [0] 
  !c1_15 = I32 [1]
  !187 = ApplyBinaryPrimOp(!186, !c1_15) [Subtract]
  !188 = ApplyComparisonOp(%elt24, !187) [EQWithNA]
  If !188 then {
    !189 = GetTupleElement(%183) [1]
    Cast(!189) [Int32]
  } else {
    ArrayRef(%166, %elt24) [-1]
  }
}
!s41 = StreamZip(!s38, !s40) [-1, AssumeSameLength] {
(%elt25, %elt26) =>
  MakeStruct(numberToTake: %elt26, old: %elt25)
}
!190 = ToArray(!s41)
MakeTuple(!190) [(0)]

2023-11-17 18:07:57.942 : INFO: after InlineApplyIR: IR size 483: 

!1 = EncodedLiteral [Array[Tuple[Int32,Int32]]]
!s = ToStream(!1) [False] 
!c0 = I32 [0] 
!c1 = I32 [1]
!s2 = StreamIota(!c0, !c1) [False]
!s3 = StreamZip(!s, !s2) [35, TakeMinLength] {
(%elt, %elt2) =>
  !2 = Cast(%elt2) [Int64]
  MakeTuple(!2, %elt) [(0 1)]
}
%3 = ToArray(!s3)
%4 = ArrayLen(%3)
!c0_2 = I32 [0] 
!c8 = I32 [8] 
!c1_2 = I32 [1]
!s4 = StreamRange(!c0_2, !c8, !c1_2) [-1, False] 
!5 = Literal [Array[Interval[Struct{locus:Locus(GRCh37),alleles:Array[String]}]], <literal value>]
!s5 = ToStream(!5) [False] 
!c8_2 = I32 [8]
!6 = ApplyComparisonOp(%4, !c8_2) [EQWithNA]
!12 = If !6 then { %3 } else {
  !7 = Str ["TableGen: ..."] 
  !8 = Apply(%4) [-1, str, (), String]
  !9 = Apply(!7, !8) [-1, concat, (), String] 
  !10 = Str [" contexts."]
  !11 = Apply(!9, !10) [-1, concat, (), String]
  Die(!11) [Array[Tuple[Int64,Tuple[Int32,Int32]]], 9]
}
!s6 = ToStream(!12) [False]
!s7 = StreamZip(!s4, !s5, !s6) [9, AssertSameLength] {
(%elt3, %elt4, %elt5) =>
  MakeTuple(%elt3, %elt4, %elt5) [(0 1 2)]
}
%13 = ToArray(!s7)
!c4 = I32 [4] 
!c0_3 = I32 [0]
%169 = TailLoop(!c4, !c0_3) {
(%loopvar, %loopvar2, %loop) =>
  %14 = RNGStateLiteral
  !c0_4 = I32 [0] 
  !c10 = I32 [10] 
  !c1_3 = I32 [1]
  !s8 = StreamRange(!c0_4, !c10, !c1_3) [1, False]
  !s11 = StreamMap(!s8) { (%elt6) =>
    !15 = Cast(%elt6) [Int64]
    %16 = MakeTuple(!15, %elt6) [(0 1)]
    !17 = GetTupleElement(%16) [1] 
    !18 = EncodedLiteral [Array[Int32]]
    !s9 = ToStream(!18) [False]
    !s10 = StreamMap(!s9) { (%elt7) =>
      Cast(%elt7) [Float64]
    }
    !19 = ToArray(!s10) 
    !20 = GetTupleElement(%16) [0]
    !21 = RNGSplit(%14, !20)
    !22 = ApplySeeded(!19, !21) [rand_cat, 0, Int32]
    MakeStruct(sample_idx: !17, pop: !22)
  }
  !23 = ToArray(!s11)
  %24 = MakeStruct(cols: !23)
  !25 = GetField(%24) [cols]
  !s12 = ToStream(!25) [False] 
  !c0_5 = I32 [0] 
  !c1_4 = I32 [1]
  !s13 = StreamIota(!c0_5, !c1_4) [False]
  !s14 = StreamZip(!s12, !s13) [34, TakeMinLength] {
  (%elt8, %elt9) =>
    !26 = Cast(%elt9) [Int64]
    InsertFields %elt8 (__col_uid: !26)
  }
  !27 = ToArray(!s14)
  %28 = InsertFields %24 (cols: !27)
  !s15 = ToStream(%13) [False]
  !s16 = StreamTake(!s15, %loopvar) 
  !29 = CastRename(%28) [Struct{__cols:Array[Struct{sample_idx:Int32,pop:Int32,__col_uid:Int64}]}]
  %30 = MakeStruct(__iruid_1052: %28, __iruid_1054: !29)
  !31 = IsNA(%30)
  !39 = If !31 then {
    NA [Struct{__iruid_1052:Struct{cols:Array[Struct{}]},__iruid_1054:Struct{__cols:Array[Struct{sample_idx:Int32,pop:Int32,__col_uid:Int64}]}}]
  } else {
    %32 = GetField(%30) [__iruid_1052]
    !33 = IsNA(%32)
    !37 = If !33 then {
      NA [Struct{cols:Array[Struct{}]}]
    } else {
      !34 = GetField(%32) [cols]
      !s17 = ToStream(!34) [False]
      !s18 = StreamMap(!s17) { (%elt10) =>
        !35 = IsNA(%elt10)
        If !35 then {
          NA [Struct{}]
        } else {
          Literal [Struct{}, <literal value>]
        }
      }
      !36 = ToArray(!s18)
      MakeStruct(cols: !36)
    } 
    !38 = GetField(%30) [__iruid_1054]
    MakeStruct(__iruid_1052: !37, __iruid_1054: !38)
  } 
  !40 = Str ["iteration="] 
  !41 = Apply(%loopvar2) [-1, str, (), String]
  !42 = Apply(!40, !41) [-1, concat, (), String] 
  !43 = Str [",nParts="]
  !44 = Apply(!42, !43) [-1, concat, (), String] 
  !45 = Apply(%loopvar) [-1, str, (), String]
  !46 = Apply(!44, !45) [-1, concat, (), String]
  %158 = CollectDistributedArray(!s16, !39, !46) {
  (%ctx, %g) =>
    %47 = GetField(%g) [__iruid_1054]
    %48 = GetField(%g) [__iruid_1052]
    %49 = GetTupleElement(%ctx) [1]
    %50 = GetTupleElement(%ctx) [2]
    %51 = GetTupleElement(%50) [0]
    !c0_6 = I32 [0] 
    !c1_5 = I32 [1]
    !s19 = StreamIota(!c0_6, !c1_5) [False] 
    !52 = RNGStateLiteral
    %53 = RNGSplit(!52, %51)
    %54 = GetTupleElement(%50) [1]
    !55 = GetTupleElement(%54) [0] 
    !56 = GetTupleElement(%54) [1] 
    !c1_6 = I32 [1]
    !s20 = StreamRange(!55, !56, !c1_6) [3, False]
    !s26 = StreamMap(!s20) { (%elt11) =>
      !57 = Cast(%elt11) [Int64]
      %58 = MakeTuple(!57, %elt11) [(0 1)]
      !59 = GetTupleElement(%58) [0]
      %60 = RNGSplit(%53, !59)
      !61 = F64 [0.1] 
      !62 = F64 [0.9]
      %63 = ApplySeeded(!61, !62, %60) [rand_unif, -1, Float64]
      !64 = GetTupleElement(%58) [1]
      !65 = Cast(!64) [Int64]
      !66 = Apply(!65) [5, globalPosToLocus, 
      (), Locus(GRCh37)] 
      !67 = EncodedLiteral [Array[String]] 
      !68 = EncodedLiteral [Array[Float64]]
      !s21 = ToStream(!68) [False] 
      !c0_7 = I32 [0] 
      !c1_7 = I32 [1]
      !s22 = StreamIota(!c0_7, !c1_7) [False]
      !s23 = StreamZip(!s21, !s22) [7, TakeMinLength] {
      (%elt12, %elt13) =>
        !69 = Cast(%elt13) [Int64]
        %70 = MakeTuple(!69, %elt12) [(0 1)]
        %71 = GetTupleElement(%70) [1]
        !72 = ApplyBinaryPrimOp(%63, %71) [Multiply] 
        !73 = F64 [1.0]
        !74 = ApplyBinaryPrimOp(!73, %63) [Subtract]
        !75 = ApplyBinaryPrimOp(!74, %71) [Multiply] 
        !76 = GetTupleElement(%70) [0]
        !77 = RNGSplit(%60, !76)
        ApplySeeded(!72, !75, !77) [rand_beta, 1, Float64]
      }
      !78 = ToArray(!s23) 
      !c0_8 = I32 [0] 
      !c10_2 = I32 [10] 
      !c1_8 = I32 [1]
      !s24 = StreamRange(!c0_8, !c10_2, !c1_8) [8, False]
      !s25 = StreamMap(!s24) { (%elt14) =>
        Literal [Struct{}, <literal value>]
      }
      !79 = ToArray(!s25)
      MakeStruct(locus: !66, alleles: !67, af: !78, entries: !79)
    }
    !s27 = StreamZip(!s19, !s26) [36, TakeMinLength] {
    (%elt15, %elt16) =>
      !80 = Cast(%elt15) [Int64]
      !81 = MakeTuple(%51, !80) [(0 1)]
      InsertFields %elt16 (__row_uid: !81)
    }
    !s28 = StreamMap(!s27) { (%elt17) =>
      !82 = SelectFields(%elt17) [(locus alleles)]
      !83 = ApplySpecial(%49, !82) [-1, contains, 
      (), Boolean]
      If !83 then { %elt17 } else {
        !84 = Str ["TableGen: ..."] 
        !85 = GetTupleElement(%ctx) [0]
        !86 = Apply(!85) [-1, str, (), String]
        !87 = Apply(!84, !86) [-1, concat, (), String] 
        !88 = Str ["\n\tRange bo..."]
        !89 = Apply(!87, !88) [-1, concat, (), String] 
        !90 = GetTupleElement(%ctx) [0]
        !91 = Apply(!90) [-1, str, (), String]
        !92 = Apply(!89, !91) [-1, concat, (), String] 
        !93 = Str [": "]
        !94 = Apply(!92, !93) [-1, concat, (), String] 
        !95 = Apply(%49) [-1, str, (), String]
        !96 = Apply(!94, !95) [-1, concat, (), String] 
        !97 = Str ["\n\tInvalid ..."]
        !98 = Apply(!96, !97) [-1, concat, (), String] 
        !99 = SelectFields(%elt17) [(locus alleles)]
        !100 = Apply(!99) [-1, str, (), String]
        !101 = Apply(!98, !100) [-1, concat, (), String]
        Die(!101) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, 9]
      }
    }
    !s29 = StreamMap(!s28) { (%elt18) =>
      %102 = GetField(%elt18) [entries]
      !103 = IsNA(%102)
      If !103 then {
        !104 = Str ["missing en..."]
        Die(!104) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, -1]
      } else {
        !105 = GetField(%48) [cols]
        %106 = ArrayLen(!105)
        %107 = ArrayLen(%102)
        !108 = ApplyComparisonOp(%107, %106) [NEQWithNA]
        If !108 then {
          !109 = Str ["length mis..."] 
          !110 = Apply(%107) [-1, str, (), String]
          !111 = Apply(!109, !110) [-1, concat, (), String] 
          !112 = Str [" entries, "]
          !113 = Apply(!111, !112) [-1, concat, (), String] 
          !114 = Apply(%106) [-1, str, (), String]
          !115 = Apply(!113, !114) [-1, concat, (), String] 
          !116 = Str [" cols, at "]
          !117 = Apply(!115, !116) [-1, concat, (), String] 
          !118 = SelectFields(%elt18) [(locus alleles)]
          !119 = Apply(!118) [-1, str, (), String]
          !120 = Apply(!117, !119) [-1, concat, (), String]
          Die(!120) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, -1]
        } else { %elt18 }
      }
    }
    !s33 = StreamMap(!s29) { (%elt19) =>
      %121 = CastRename(%elt19) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],`the entries! [877f12a8827e18f61222c6c8c5fb04a8]`:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}]
      !122 = SelectFields(%121) [(locus alleles)] 
      !123 = GetField(%121) [`the entries! [877f12a8827e18f61222c6c8c5fb04a8]`]
      !s30 = ToStream(!123) [False] 
      !124 = GetField(%47) [__cols]
      !s31 = ToStream(!124) [False]
      !s32 = StreamZip(!s30, !s31) [-1, AssumeSameLength] {
      (%elt20, %elt21) =>
        %125 = GetField(%121) [__row_uid]
        %126 = GetField(%121) [af]
        %127 = GetField(%elt21) [pop]
        !c0_9 = I32 [0]
        !128 = ApplyComparisonOp(%127, !c0_9) [LT]
        !130 = If !128 then {
          !129 = ArrayLen(%126)
          ApplyBinaryPrimOp(!129, %127) [Add]
        } else { %127 }
        %131 = ArrayRef(%126, !130) [10]
        !132 = F64 [1.0]
        %133 = ApplyBinaryPrimOp(!132, %131) [Subtract]
        !134 = F64 [2.0]
        !135 = Apply(%133, !134) [13, pow, (), Float64] 
        !136 = F64 [2.0]
        !137 = ApplyBinaryPrimOp(!136, %131) [Multiply]
        !138 = ApplyBinaryPrimOp(!137, %133) [Multiply] 
        !139 = F64 [2.0]
        !140 = Apply(%131, !139) [16, pow, (), Float64]
        !141 = MakeArray(!135, !138, !140) [Array[Float64]] 
        !142 = RNGStateLiteral 
        !143 = GetTupleElement(%125) [0] 
        !144 = GetTupleElement(%125) [1] 
        !145 = GetField(%elt21) [__col_uid]
        !146 = MakeTuple(!143, !144, !145) [(0 1 2)]
        !147 = RNGSplit(!142, !146)
        !148 = ApplySeeded(!141, !147) [rand_cat, 2, Int32]
        !149 = Apply(!148) [17, UnphasedDiploidGtIndexCall, 
        (), Call]
        InsertFields %elt20 (GT: !149)
      }
      !150 = ToArray(!s32)
      InsertFields !122 (the entries! [877f12a8827e18f61222c6c8c5fb04a8]: !150)
    }
    !s34 = StreamMap(!s33) { (%elt22) =>
      %151 = CastRename(%elt22) [Struct{locus:Locus(GRCh37),alleles:Array[String],entries:Array[Struct{GT:Call}]}]
      %152 = GetField(%151) [entries]
      !153 = SelectFields(%151) [(locus alleles)] 
      !c0_10 = I32 [0]
      !154 = ArrayRef(%152, !c0_10) [24] 
      !c1_9 = I32 [1]
      !155 = ArrayRef(%152, !c1_9) [25] 
      !c2 = I32 [2]
      !156 = ArrayRef(%152, !c2) [26] 
      !c3 = I32 [3]
      !157 = ArrayRef(%152, !c3) [27]
      InsertFields !153 (0: !154, 1: !155, 2: !156, 3: !157)
    } 
    !c11 = I32 [11]
    !s35 = StreamTake(!s34, !c11)
    StreamLen(!s35)
  }
  !s36 = ToStream(%158) [False] 
  !c0_11 = I32 [0]
  !159 = StreamFold(!s36, !c0_11) {
  (%accum, %elt23) =>
    ApplyBinaryPrimOp(%accum, %elt23) [Add]
  }
  !160 = Cast(!159) [Int64] 
  !161 = I64 [11]
  !162 = ApplyComparisonOp(!160, !161) [GTEQ] 
  !163 = ArrayLen(%13) 
  !164 = ArrayLen(%158)
  !165 = ApplyComparisonOp(!163, !164) [LTEQ]
  !166 = ApplySpecial(!162, !165) [-1, lor, 
  (), Boolean]
  If !166 then { %158 } else {
    !c4_2 = I32 [4]
    !167 = ApplyBinaryPrimOp(%loopvar, !c4_2) [Multiply] 
    !c1_10 = I32 [1]
    !168 = ApplyBinaryPrimOp(%loopvar2, !c1_10) [Add]
    Recur(!167, !168) [Array[Int32]]
  }
}
%170 = ArrayLen(%169)
!c0_12 = I32 [0]
!171 = ApplyComparisonOp(%170, !c0_12) [EQWithNA]
%186 = If !171 then {
  Literal [Tuple[Int32,Int64], <literal value>]
} else {
  !c0_13 = I32 [0] 
  !172 = I64 [11]
  TailLoop(!c0_13, !172) {
  (%loopvar3, %loopvar4, %loop2) =>
    !c1_11 = I32 [1]
    !173 = ApplyBinaryPrimOp(%170, !c1_11) [Subtract]
    !174 = ApplyComparisonOp(%loopvar3, !173) [EQWithNA] 
    !175 = ArrayRef(%169, %loopvar3) [-1]
    !176 = Cast(!175) [Int64]
    !177 = ApplyBinaryPrimOp(%loopvar4, !176) [Subtract] 
    !178 = I64 [0]
    !179 = ApplyComparisonOp(!177, !178) [LTEQ]
    !180 = ApplySpecial(!174, !179) [-1, lor, 
    (), Boolean]
    If !180 then {
      !c1_12 = I32 [1]
      !181 = ApplyBinaryPrimOp(%loopvar3, !c1_12) [Add]
      MakeTuple(!181, %loopvar4) [(0 1)]
    } else {
      !c1_13 = I32 [1]
      !182 = ApplyBinaryPrimOp(%loopvar3, !c1_13) [Add] 
      !183 = ArrayRef(%169, %loopvar3) [-1]
      !184 = Cast(!183) [Int64]
      !185 = ApplyBinaryPrimOp(%loopvar4, !184) [Subtract]
      Recur(!182, !185) [Tuple[Int32,Int64]]
    }
  }
}
!s37 = ToStream(%13) [False] 
!187 = GetTupleElement(%186) [0]
!s38 = StreamTake(!s37, !187) 
!c0_14 = I32 [0] 
!188 = GetTupleElement(%186) [0] 
!c1_14 = I32 [1]
!s39 = StreamRange(!c0_14, !188, !c1_14) [-1, False]
!s40 = StreamMap(!s39) { (%elt24) =>
  !189 = GetTupleElement(%186) [0] 
  !c1_15 = I32 [1]
  !190 = ApplyBinaryPrimOp(!189, !c1_15) [Subtract]
  !191 = ApplyComparisonOp(%elt24, !190) [EQWithNA]
  If !191 then {
    !192 = GetTupleElement(%186) [1]
    Cast(!192) [Int32]
  } else {
    ArrayRef(%169, %elt24) [-1]
  }
}
!s41 = StreamZip(!s38, !s40) [-1, AssumeSameLength] {
(%elt25, %elt26) =>
  MakeStruct(numberToTake: %elt26, old: %elt25)
}
!193 = ToArray(!s41)
MakeTuple(!193) [(0)]

2023-11-17 18:07:57.991 : INFO: after optimize: compileLowerer, after InlineApplyIR: IR size 483: 

!1 = EncodedLiteral [Array[Tuple[Int32,Int32]]]
!s = ToStream(!1) [False] 
!c0 = I32 [0] 
!c1 = I32 [1]
!s2 = StreamIota(!c0, !c1) [False]
!s3 = StreamZip(!s, !s2) [35, TakeMinLength] {
(%elt, %elt2) =>
  !2 = Cast(%elt2) [Int64]
  MakeTuple(!2, %elt) [(0 1)]
}
%3 = ToArray(!s3)
%4 = ArrayLen(%3)
!c0_2 = I32 [0] 
!c8 = I32 [8] 
!c1_2 = I32 [1]
!s4 = StreamRange(!c0_2, !c8, !c1_2) [-1, False] 
!5 = Literal [Array[Interval[Struct{locus:Locus(GRCh37),alleles:Array[String]}]], <literal value>]
!s5 = ToStream(!5) [False] 
!c8_2 = I32 [8]
!6 = ApplyComparisonOp(%4, !c8_2) [EQWithNA]
!12 = If !6 then { %3 } else {
  !7 = Str ["TableGen: ..."] 
  !8 = Apply(%4) [-1, str, (), String]
  !9 = Apply(!7, !8) [-1, concat, (), String] 
  !10 = Str [" contexts."]
  !11 = Apply(!9, !10) [-1, concat, (), String]
  Die(!11) [Array[Tuple[Int64,Tuple[Int32,Int32]]], 9]
}
!s6 = ToStream(!12) [False]
!s7 = StreamZip(!s4, !s5, !s6) [9, AssertSameLength] {
(%elt3, %elt4, %elt5) =>
  MakeTuple(%elt3, %elt4, %elt5) [(0 1 2)]
}
%13 = ToArray(!s7)
!c4 = I32 [4] 
!c0_3 = I32 [0]
%169 = TailLoop(!c4, !c0_3) {
(%loopvar, %loopvar2, %loop) =>
  %14 = RNGStateLiteral
  !c0_4 = I32 [0] 
  !c10 = I32 [10] 
  !c1_3 = I32 [1]
  !s8 = StreamRange(!c0_4, !c10, !c1_3) [1, False]
  !s11 = StreamMap(!s8) { (%elt6) =>
    !15 = Cast(%elt6) [Int64]
    %16 = MakeTuple(!15, %elt6) [(0 1)]
    !17 = GetTupleElement(%16) [1] 
    !18 = EncodedLiteral [Array[Int32]]
    !s9 = ToStream(!18) [False]
    !s10 = StreamMap(!s9) { (%elt7) =>
      Cast(%elt7) [Float64]
    }
    !19 = ToArray(!s10) 
    !20 = GetTupleElement(%16) [0]
    !21 = RNGSplit(%14, !20)
    !22 = ApplySeeded(!19, !21) [rand_cat, 0, Int32]
    MakeStruct(sample_idx: !17, pop: !22)
  }
  !23 = ToArray(!s11)
  %24 = MakeStruct(cols: !23)
  !25 = GetField(%24) [cols]
  !s12 = ToStream(!25) [False] 
  !c0_5 = I32 [0] 
  !c1_4 = I32 [1]
  !s13 = StreamIota(!c0_5, !c1_4) [False]
  !s14 = StreamZip(!s12, !s13) [34, TakeMinLength] {
  (%elt8, %elt9) =>
    !26 = Cast(%elt9) [Int64]
    InsertFields %elt8 (__col_uid: !26)
  }
  !27 = ToArray(!s14)
  %28 = InsertFields %24 (cols: !27)
  !s15 = ToStream(%13) [False]
  !s16 = StreamTake(!s15, %loopvar) 
  !29 = CastRename(%28) [Struct{__cols:Array[Struct{sample_idx:Int32,pop:Int32,__col_uid:Int64}]}]
  %30 = MakeStruct(__iruid_1052: %28, __iruid_1054: !29)
  !31 = IsNA(%30)
  !39 = If !31 then {
    NA [Struct{__iruid_1052:Struct{cols:Array[Struct{}]},__iruid_1054:Struct{__cols:Array[Struct{sample_idx:Int32,pop:Int32,__col_uid:Int64}]}}]
  } else {
    %32 = GetField(%30) [__iruid_1052]
    !33 = IsNA(%32)
    !37 = If !33 then {
      NA [Struct{cols:Array[Struct{}]}]
    } else {
      !34 = GetField(%32) [cols]
      !s17 = ToStream(!34) [False]
      !s18 = StreamMap(!s17) { (%elt10) =>
        !35 = IsNA(%elt10)
        If !35 then {
          NA [Struct{}]
        } else {
          Literal [Struct{}, <literal value>]
        }
      }
      !36 = ToArray(!s18)
      MakeStruct(cols: !36)
    } 
    !38 = GetField(%30) [__iruid_1054]
    MakeStruct(__iruid_1052: !37, __iruid_1054: !38)
  } 
  !40 = Str ["iteration="] 
  !41 = Apply(%loopvar2) [-1, str, (), String]
  !42 = Apply(!40, !41) [-1, concat, (), String] 
  !43 = Str [",nParts="]
  !44 = Apply(!42, !43) [-1, concat, (), String] 
  !45 = Apply(%loopvar) [-1, str, (), String]
  !46 = Apply(!44, !45) [-1, concat, (), String]
  %158 = CollectDistributedArray(!s16, !39, !46) {
  (%ctx, %g) =>
    %47 = GetField(%g) [__iruid_1054]
    %48 = GetField(%g) [__iruid_1052]
    %49 = GetTupleElement(%ctx) [1]
    %50 = GetTupleElement(%ctx) [2]
    %51 = GetTupleElement(%50) [0]
    !c0_6 = I32 [0] 
    !c1_5 = I32 [1]
    !s19 = StreamIota(!c0_6, !c1_5) [False] 
    !52 = RNGStateLiteral
    %53 = RNGSplit(!52, %51)
    %54 = GetTupleElement(%50) [1]
    !55 = GetTupleElement(%54) [0] 
    !56 = GetTupleElement(%54) [1] 
    !c1_6 = I32 [1]
    !s20 = StreamRange(!55, !56, !c1_6) [3, False]
    !s26 = StreamMap(!s20) { (%elt11) =>
      !57 = Cast(%elt11) [Int64]
      %58 = MakeTuple(!57, %elt11) [(0 1)]
      !59 = GetTupleElement(%58) [0]
      %60 = RNGSplit(%53, !59)
      !61 = F64 [0.1] 
      !62 = F64 [0.9]
      %63 = ApplySeeded(!61, !62, %60) [rand_unif, -1, Float64]
      !64 = GetTupleElement(%58) [1]
      !65 = Cast(!64) [Int64]
      !66 = Apply(!65) [5, globalPosToLocus, 
      (), Locus(GRCh37)] 
      !67 = EncodedLiteral [Array[String]] 
      !68 = EncodedLiteral [Array[Float64]]
      !s21 = ToStream(!68) [False] 
      !c0_7 = I32 [0] 
      !c1_7 = I32 [1]
      !s22 = StreamIota(!c0_7, !c1_7) [False]
      !s23 = StreamZip(!s21, !s22) [7, TakeMinLength] {
      (%elt12, %elt13) =>
        !69 = Cast(%elt13) [Int64]
        %70 = MakeTuple(!69, %elt12) [(0 1)]
        %71 = GetTupleElement(%70) [1]
        !72 = ApplyBinaryPrimOp(%63, %71) [Multiply] 
        !73 = F64 [1.0]
        !74 = ApplyBinaryPrimOp(!73, %63) [Subtract]
        !75 = ApplyBinaryPrimOp(!74, %71) [Multiply] 
        !76 = GetTupleElement(%70) [0]
        !77 = RNGSplit(%60, !76)
        ApplySeeded(!72, !75, !77) [rand_beta, 1, Float64]
      }
      !78 = ToArray(!s23) 
      !c0_8 = I32 [0] 
      !c10_2 = I32 [10] 
      !c1_8 = I32 [1]
      !s24 = StreamRange(!c0_8, !c10_2, !c1_8) [8, False]
      !s25 = StreamMap(!s24) { (%elt14) =>
        Literal [Struct{}, <literal value>]
      }
      !79 = ToArray(!s25)
      MakeStruct(locus: !66, alleles: !67, af: !78, entries: !79)
    }
    !s27 = StreamZip(!s19, !s26) [36, TakeMinLength] {
    (%elt15, %elt16) =>
      !80 = Cast(%elt15) [Int64]
      !81 = MakeTuple(%51, !80) [(0 1)]
      InsertFields %elt16 (__row_uid: !81)
    }
    !s28 = StreamMap(!s27) { (%elt17) =>
      !82 = SelectFields(%elt17) [(locus alleles)]
      !83 = ApplySpecial(%49, !82) [-1, contains, 
      (), Boolean]
      If !83 then { %elt17 } else {
        !84 = Str ["TableGen: ..."] 
        !85 = GetTupleElement(%ctx) [0]
        !86 = Apply(!85) [-1, str, (), String]
        !87 = Apply(!84, !86) [-1, concat, (), String] 
        !88 = Str ["\n\tRange bo..."]
        !89 = Apply(!87, !88) [-1, concat, (), String] 
        !90 = GetTupleElement(%ctx) [0]
        !91 = Apply(!90) [-1, str, (), String]
        !92 = Apply(!89, !91) [-1, concat, (), String] 
        !93 = Str [": "]
        !94 = Apply(!92, !93) [-1, concat, (), String] 
        !95 = Apply(%49) [-1, str, (), String]
        !96 = Apply(!94, !95) [-1, concat, (), String] 
        !97 = Str ["\n\tInvalid ..."]
        !98 = Apply(!96, !97) [-1, concat, (), String] 
        !99 = SelectFields(%elt17) [(locus alleles)]
        !100 = Apply(!99) [-1, str, (), String]
        !101 = Apply(!98, !100) [-1, concat, (), String]
        Die(!101) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, 9]
      }
    }
    !s29 = StreamMap(!s28) { (%elt18) =>
      %102 = GetField(%elt18) [entries]
      !103 = IsNA(%102)
      If !103 then {
        !104 = Str ["missing en..."]
        Die(!104) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, -1]
      } else {
        !105 = GetField(%48) [cols]
        %106 = ArrayLen(!105)
        %107 = ArrayLen(%102)
        !108 = ApplyComparisonOp(%107, %106) [NEQWithNA]
        If !108 then {
          !109 = Str ["length mis..."] 
          !110 = Apply(%107) [-1, str, (), String]
          !111 = Apply(!109, !110) [-1, concat, (), String] 
          !112 = Str [" entries, "]
          !113 = Apply(!111, !112) [-1, concat, (), String] 
          !114 = Apply(%106) [-1, str, (), String]
          !115 = Apply(!113, !114) [-1, concat, (), String] 
          !116 = Str [" cols, at "]
          !117 = Apply(!115, !116) [-1, concat, (), String] 
          !118 = SelectFields(%elt18) [(locus alleles)]
          !119 = Apply(!118) [-1, str, (), String]
          !120 = Apply(!117, !119) [-1, concat, (), String]
          Die(!120) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, -1]
        } else { %elt18 }
      }
    }
    !s33 = StreamMap(!s29) { (%elt19) =>
      %121 = CastRename(%elt19) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],`the entries! [877f12a8827e18f61222c6c8c5fb04a8]`:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}]
      !122 = SelectFields(%121) [(locus alleles)] 
      !123 = GetField(%121) [`the entries! [877f12a8827e18f61222c6c8c5fb04a8]`]
      !s30 = ToStream(!123) [False] 
      !124 = GetField(%47) [__cols]
      !s31 = ToStream(!124) [False]
      !s32 = StreamZip(!s30, !s31) [-1, AssumeSameLength] {
      (%elt20, %elt21) =>
        %125 = GetField(%121) [__row_uid]
        %126 = GetField(%121) [af]
        %127 = GetField(%elt21) [pop]
        !c0_9 = I32 [0]
        !128 = ApplyComparisonOp(%127, !c0_9) [LT]
        !130 = If !128 then {
          !129 = ArrayLen(%126)
          ApplyBinaryPrimOp(!129, %127) [Add]
        } else { %127 }
        %131 = ArrayRef(%126, !130) [10]
        !132 = F64 [1.0]
        %133 = ApplyBinaryPrimOp(!132, %131) [Subtract]
        !134 = F64 [2.0]
        !135 = Apply(%133, !134) [13, pow, (), Float64] 
        !136 = F64 [2.0]
        !137 = ApplyBinaryPrimOp(!136, %131) [Multiply]
        !138 = ApplyBinaryPrimOp(!137, %133) [Multiply] 
        !139 = F64 [2.0]
        !140 = Apply(%131, !139) [16, pow, (), Float64]
        !141 = MakeArray(!135, !138, !140) [Array[Float64]] 
        !142 = RNGStateLiteral 
        !143 = GetTupleElement(%125) [0] 
        !144 = GetTupleElement(%125) [1] 
        !145 = GetField(%elt21) [__col_uid]
        !146 = MakeTuple(!143, !144, !145) [(0 1 2)]
        !147 = RNGSplit(!142, !146)
        !148 = ApplySeeded(!141, !147) [rand_cat, 2, Int32]
        !149 = Apply(!148) [17, UnphasedDiploidGtIndexCall, 
        (), Call]
        InsertFields %elt20 (GT: !149)
      }
      !150 = ToArray(!s32)
      InsertFields !122 (the entries! [877f12a8827e18f61222c6c8c5fb04a8]: !150)
    }
    !s34 = StreamMap(!s33) { (%elt22) =>
      %151 = CastRename(%elt22) [Struct{locus:Locus(GRCh37),alleles:Array[String],entries:Array[Struct{GT:Call}]}]
      %152 = GetField(%151) [entries]
      !153 = SelectFields(%151) [(locus alleles)] 
      !c0_10 = I32 [0]
      !154 = ArrayRef(%152, !c0_10) [24] 
      !c1_9 = I32 [1]
      !155 = ArrayRef(%152, !c1_9) [25] 
      !c2 = I32 [2]
      !156 = ArrayRef(%152, !c2) [26] 
      !c3 = I32 [3]
      !157 = ArrayRef(%152, !c3) [27]
      InsertFields !153 (0: !154, 1: !155, 2: !156, 3: !157)
    } 
    !c11 = I32 [11]
    !s35 = StreamTake(!s34, !c11)
    StreamLen(!s35)
  }
  !s36 = ToStream(%158) [False] 
  !c0_11 = I32 [0]
  !159 = StreamFold(!s36, !c0_11) {
  (%accum, %elt23) =>
    ApplyBinaryPrimOp(%accum, %elt23) [Add]
  }
  !160 = Cast(!159) [Int64] 
  !161 = I64 [11]
  !162 = ApplyComparisonOp(!160, !161) [GTEQ] 
  !163 = ArrayLen(%13) 
  !164 = ArrayLen(%158)
  !165 = ApplyComparisonOp(!163, !164) [LTEQ]
  !166 = ApplySpecial(!162, !165) [-1, lor, 
  (), Boolean]
  If !166 then { %158 } else {
    !c4_2 = I32 [4]
    !167 = ApplyBinaryPrimOp(%loopvar, !c4_2) [Multiply] 
    !c1_10 = I32 [1]
    !168 = ApplyBinaryPrimOp(%loopvar2, !c1_10) [Add]
    Recur(!167, !168) [Array[Int32]]
  }
}
%170 = ArrayLen(%169)
!c0_12 = I32 [0]
!171 = ApplyComparisonOp(%170, !c0_12) [EQWithNA]
%186 = If !171 then {
  Literal [Tuple[Int32,Int64], <literal value>]
} else {
  !c0_13 = I32 [0] 
  !172 = I64 [11]
  TailLoop(!c0_13, !172) {
  (%loopvar3, %loopvar4, %loop2) =>
    !c1_11 = I32 [1]
    !173 = ApplyBinaryPrimOp(%170, !c1_11) [Subtract]
    !174 = ApplyComparisonOp(%loopvar3, !173) [EQWithNA] 
    !175 = ArrayRef(%169, %loopvar3) [-1]
    !176 = Cast(!175) [Int64]
    !177 = ApplyBinaryPrimOp(%loopvar4, !176) [Subtract] 
    !178 = I64 [0]
    !179 = ApplyComparisonOp(!177, !178) [LTEQ]
    !180 = ApplySpecial(!174, !179) [-1, lor, 
    (), Boolean]
    If !180 then {
      !c1_12 = I32 [1]
      !181 = ApplyBinaryPrimOp(%loopvar3, !c1_12) [Add]
      MakeTuple(!181, %loopvar4) [(0 1)]
    } else {
      !c1_13 = I32 [1]
      !182 = ApplyBinaryPrimOp(%loopvar3, !c1_13) [Add] 
      !183 = ArrayRef(%169, %loopvar3) [-1]
      !184 = Cast(!183) [Int64]
      !185 = ApplyBinaryPrimOp(%loopvar4, !184) [Subtract]
      Recur(!182, !185) [Tuple[Int32,Int64]]
    }
  }
}
!s37 = ToStream(%13) [False] 
!187 = GetTupleElement(%186) [0]
!s38 = StreamTake(!s37, !187) 
!c0_14 = I32 [0] 
!188 = GetTupleElement(%186) [0] 
!c1_14 = I32 [1]
!s39 = StreamRange(!c0_14, !188, !c1_14) [-1, False]
!s40 = StreamMap(!s39) { (%elt24) =>
  !189 = GetTupleElement(%186) [0] 
  !c1_15 = I32 [1]
  !190 = ApplyBinaryPrimOp(!189, !c1_15) [Subtract]
  !191 = ApplyComparisonOp(%elt24, !190) [EQWithNA]
  If !191 then {
    !192 = GetTupleElement(%186) [1]
    Cast(!192) [Int32]
  } else {
    ArrayRef(%169, %elt24) [-1]
  }
}
!s41 = StreamZip(!s38, !s40) [-1, AssumeSameLength] {
(%elt25, %elt26) =>
  MakeStruct(numberToTake: %elt26, old: %elt25)
}
!193 = ToArray(!s41)
MakeTuple(!193) [(0)]

2023-11-17 18:07:58.021 : INFO: after LowerArrayAggsToRunAggs: IR size 483: 

!1 = EncodedLiteral [Array[Tuple[Int32,Int32]]]
!s = ToStream(!1) [False] 
!c0 = I32 [0] 
!c1 = I32 [1]
!s2 = StreamIota(!c0, !c1) [False]
!s3 = StreamZip(!s, !s2) [35, TakeMinLength] {
(%elt, %elt2) =>
  !2 = Cast(%elt2) [Int64]
  MakeTuple(!2, %elt) [(0 1)]
}
%3 = ToArray(!s3)
%4 = ArrayLen(%3)
!c0_2 = I32 [0] 
!c8 = I32 [8] 
!c1_2 = I32 [1]
!s4 = StreamRange(!c0_2, !c8, !c1_2) [-1, False] 
!5 = Literal [Array[Interval[Struct{locus:Locus(GRCh37),alleles:Array[String]}]], <literal value>]
!s5 = ToStream(!5) [False] 
!c8_2 = I32 [8]
!6 = ApplyComparisonOp(%4, !c8_2) [EQWithNA]
!12 = If !6 then { %3 } else {
  !7 = Str ["TableGen: ..."] 
  !8 = Apply(%4) [-1, str, (), String]
  !9 = Apply(!7, !8) [-1, concat, (), String] 
  !10 = Str [" contexts."]
  !11 = Apply(!9, !10) [-1, concat, (), String]
  Die(!11) [Array[Tuple[Int64,Tuple[Int32,Int32]]], 9]
}
!s6 = ToStream(!12) [False]
!s7 = StreamZip(!s4, !s5, !s6) [9, AssertSameLength] {
(%elt3, %elt4, %elt5) =>
  MakeTuple(%elt3, %elt4, %elt5) [(0 1 2)]
}
%13 = ToArray(!s7)
!c4 = I32 [4] 
!c0_3 = I32 [0]
%169 = TailLoop(!c4, !c0_3) {
(%loopvar, %loopvar2, %loop) =>
  %14 = RNGStateLiteral
  !c0_4 = I32 [0] 
  !c10 = I32 [10] 
  !c1_3 = I32 [1]
  !s8 = StreamRange(!c0_4, !c10, !c1_3) [1, False]
  !s11 = StreamMap(!s8) { (%elt6) =>
    !15 = Cast(%elt6) [Int64]
    %16 = MakeTuple(!15, %elt6) [(0 1)]
    !17 = GetTupleElement(%16) [1] 
    !18 = EncodedLiteral [Array[Int32]]
    !s9 = ToStream(!18) [False]
    !s10 = StreamMap(!s9) { (%elt7) =>
      Cast(%elt7) [Float64]
    }
    !19 = ToArray(!s10) 
    !20 = GetTupleElement(%16) [0]
    !21 = RNGSplit(%14, !20)
    !22 = ApplySeeded(!19, !21) [rand_cat, 0, Int32]
    MakeStruct(sample_idx: !17, pop: !22)
  }
  !23 = ToArray(!s11)
  %24 = MakeStruct(cols: !23)
  !25 = GetField(%24) [cols]
  !s12 = ToStream(!25) [False] 
  !c0_5 = I32 [0] 
  !c1_4 = I32 [1]
  !s13 = StreamIota(!c0_5, !c1_4) [False]
  !s14 = StreamZip(!s12, !s13) [34, TakeMinLength] {
  (%elt8, %elt9) =>
    !26 = Cast(%elt9) [Int64]
    InsertFields %elt8 (__col_uid: !26)
  }
  !27 = ToArray(!s14)
  %28 = InsertFields %24 (cols: !27)
  !s15 = ToStream(%13) [False]
  !s16 = StreamTake(!s15, %loopvar) 
  !29 = CastRename(%28) [Struct{__cols:Array[Struct{sample_idx:Int32,pop:Int32,__col_uid:Int64}]}]
  %30 = MakeStruct(__iruid_1052: %28, __iruid_1054: !29)
  !31 = IsNA(%30)
  !39 = If !31 then {
    NA [Struct{__iruid_1052:Struct{cols:Array[Struct{}]},__iruid_1054:Struct{__cols:Array[Struct{sample_idx:Int32,pop:Int32,__col_uid:Int64}]}}]
  } else {
    %32 = GetField(%30) [__iruid_1052]
    !33 = IsNA(%32)
    !37 = If !33 then {
      NA [Struct{cols:Array[Struct{}]}]
    } else {
      !34 = GetField(%32) [cols]
      !s17 = ToStream(!34) [False]
      !s18 = StreamMap(!s17) { (%elt10) =>
        !35 = IsNA(%elt10)
        If !35 then {
          NA [Struct{}]
        } else {
          Literal [Struct{}, <literal value>]
        }
      }
      !36 = ToArray(!s18)
      MakeStruct(cols: !36)
    } 
    !38 = GetField(%30) [__iruid_1054]
    MakeStruct(__iruid_1052: !37, __iruid_1054: !38)
  } 
  !40 = Str ["iteration="] 
  !41 = Apply(%loopvar2) [-1, str, (), String]
  !42 = Apply(!40, !41) [-1, concat, (), String] 
  !43 = Str [",nParts="]
  !44 = Apply(!42, !43) [-1, concat, (), String] 
  !45 = Apply(%loopvar) [-1, str, (), String]
  !46 = Apply(!44, !45) [-1, concat, (), String]
  %158 = CollectDistributedArray(!s16, !39, !46) {
  (%ctx, %g) =>
    %47 = GetField(%g) [__iruid_1054]
    %48 = GetField(%g) [__iruid_1052]
    %49 = GetTupleElement(%ctx) [1]
    %50 = GetTupleElement(%ctx) [2]
    %51 = GetTupleElement(%50) [0]
    !c0_6 = I32 [0] 
    !c1_5 = I32 [1]
    !s19 = StreamIota(!c0_6, !c1_5) [False] 
    !52 = RNGStateLiteral
    %53 = RNGSplit(!52, %51)
    %54 = GetTupleElement(%50) [1]
    !55 = GetTupleElement(%54) [0] 
    !56 = GetTupleElement(%54) [1] 
    !c1_6 = I32 [1]
    !s20 = StreamRange(!55, !56, !c1_6) [3, False]
    !s26 = StreamMap(!s20) { (%elt11) =>
      !57 = Cast(%elt11) [Int64]
      %58 = MakeTuple(!57, %elt11) [(0 1)]
      !59 = GetTupleElement(%58) [0]
      %60 = RNGSplit(%53, !59)
      !61 = F64 [0.1] 
      !62 = F64 [0.9]
      %63 = ApplySeeded(!61, !62, %60) [rand_unif, -1, Float64]
      !64 = GetTupleElement(%58) [1]
      !65 = Cast(!64) [Int64]
      !66 = Apply(!65) [5, globalPosToLocus, 
      (), Locus(GRCh37)] 
      !67 = EncodedLiteral [Array[String]] 
      !68 = EncodedLiteral [Array[Float64]]
      !s21 = ToStream(!68) [False] 
      !c0_7 = I32 [0] 
      !c1_7 = I32 [1]
      !s22 = StreamIota(!c0_7, !c1_7) [False]
      !s23 = StreamZip(!s21, !s22) [7, TakeMinLength] {
      (%elt12, %elt13) =>
        !69 = Cast(%elt13) [Int64]
        %70 = MakeTuple(!69, %elt12) [(0 1)]
        %71 = GetTupleElement(%70) [1]
        !72 = ApplyBinaryPrimOp(%63, %71) [Multiply] 
        !73 = F64 [1.0]
        !74 = ApplyBinaryPrimOp(!73, %63) [Subtract]
        !75 = ApplyBinaryPrimOp(!74, %71) [Multiply] 
        !76 = GetTupleElement(%70) [0]
        !77 = RNGSplit(%60, !76)
        ApplySeeded(!72, !75, !77) [rand_beta, 1, Float64]
      }
      !78 = ToArray(!s23) 
      !c0_8 = I32 [0] 
      !c10_2 = I32 [10] 
      !c1_8 = I32 [1]
      !s24 = StreamRange(!c0_8, !c10_2, !c1_8) [8, False]
      !s25 = StreamMap(!s24) { (%elt14) =>
        Literal [Struct{}, <literal value>]
      }
      !79 = ToArray(!s25)
      MakeStruct(locus: !66, alleles: !67, af: !78, entries: !79)
    }
    !s27 = StreamZip(!s19, !s26) [36, TakeMinLength] {
    (%elt15, %elt16) =>
      !80 = Cast(%elt15) [Int64]
      !81 = MakeTuple(%51, !80) [(0 1)]
      InsertFields %elt16 (__row_uid: !81)
    }
    !s28 = StreamMap(!s27) { (%elt17) =>
      !82 = SelectFields(%elt17) [(locus alleles)]
      !83 = ApplySpecial(%49, !82) [-1, contains, 
      (), Boolean]
      If !83 then { %elt17 } else {
        !84 = Str ["TableGen: ..."] 
        !85 = GetTupleElement(%ctx) [0]
        !86 = Apply(!85) [-1, str, (), String]
        !87 = Apply(!84, !86) [-1, concat, (), String] 
        !88 = Str ["\n\tRange bo..."]
        !89 = Apply(!87, !88) [-1, concat, (), String] 
        !90 = GetTupleElement(%ctx) [0]
        !91 = Apply(!90) [-1, str, (), String]
        !92 = Apply(!89, !91) [-1, concat, (), String] 
        !93 = Str [": "]
        !94 = Apply(!92, !93) [-1, concat, (), String] 
        !95 = Apply(%49) [-1, str, (), String]
        !96 = Apply(!94, !95) [-1, concat, (), String] 
        !97 = Str ["\n\tInvalid ..."]
        !98 = Apply(!96, !97) [-1, concat, (), String] 
        !99 = SelectFields(%elt17) [(locus alleles)]
        !100 = Apply(!99) [-1, str, (), String]
        !101 = Apply(!98, !100) [-1, concat, (), String]
        Die(!101) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, 9]
      }
    }
    !s29 = StreamMap(!s28) { (%elt18) =>
      %102 = GetField(%elt18) [entries]
      !103 = IsNA(%102)
      If !103 then {
        !104 = Str ["missing en..."]
        Die(!104) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, -1]
      } else {
        !105 = GetField(%48) [cols]
        %106 = ArrayLen(!105)
        %107 = ArrayLen(%102)
        !108 = ApplyComparisonOp(%107, %106) [NEQWithNA]
        If !108 then {
          !109 = Str ["length mis..."] 
          !110 = Apply(%107) [-1, str, (), String]
          !111 = Apply(!109, !110) [-1, concat, (), String] 
          !112 = Str [" entries, "]
          !113 = Apply(!111, !112) [-1, concat, (), String] 
          !114 = Apply(%106) [-1, str, (), String]
          !115 = Apply(!113, !114) [-1, concat, (), String] 
          !116 = Str [" cols, at "]
          !117 = Apply(!115, !116) [-1, concat, (), String] 
          !118 = SelectFields(%elt18) [(locus alleles)]
          !119 = Apply(!118) [-1, str, (), String]
          !120 = Apply(!117, !119) [-1, concat, (), String]
          Die(!120) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, -1]
        } else { %elt18 }
      }
    }
    !s33 = StreamMap(!s29) { (%elt19) =>
      %121 = CastRename(%elt19) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],`the entries! [877f12a8827e18f61222c6c8c5fb04a8]`:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}]
      !122 = SelectFields(%121) [(locus alleles)] 
      !123 = GetField(%121) [`the entries! [877f12a8827e18f61222c6c8c5fb04a8]`]
      !s30 = ToStream(!123) [False] 
      !124 = GetField(%47) [__cols]
      !s31 = ToStream(!124) [False]
      !s32 = StreamZip(!s30, !s31) [-1, AssumeSameLength] {
      (%elt20, %elt21) =>
        %125 = GetField(%121) [__row_uid]
        %126 = GetField(%121) [af]
        %127 = GetField(%elt21) [pop]
        !c0_9 = I32 [0]
        !128 = ApplyComparisonOp(%127, !c0_9) [LT]
        !130 = If !128 then {
          !129 = ArrayLen(%126)
          ApplyBinaryPrimOp(!129, %127) [Add]
        } else { %127 }
        %131 = ArrayRef(%126, !130) [10]
        !132 = F64 [1.0]
        %133 = ApplyBinaryPrimOp(!132, %131) [Subtract]
        !134 = F64 [2.0]
        !135 = Apply(%133, !134) [13, pow, (), Float64] 
        !136 = F64 [2.0]
        !137 = ApplyBinaryPrimOp(!136, %131) [Multiply]
        !138 = ApplyBinaryPrimOp(!137, %133) [Multiply] 
        !139 = F64 [2.0]
        !140 = Apply(%131, !139) [16, pow, (), Float64]
        !141 = MakeArray(!135, !138, !140) [Array[Float64]] 
        !142 = RNGStateLiteral 
        !143 = GetTupleElement(%125) [0] 
        !144 = GetTupleElement(%125) [1] 
        !145 = GetField(%elt21) [__col_uid]
        !146 = MakeTuple(!143, !144, !145) [(0 1 2)]
        !147 = RNGSplit(!142, !146)
        !148 = ApplySeeded(!141, !147) [rand_cat, 2, Int32]
        !149 = Apply(!148) [17, UnphasedDiploidGtIndexCall, 
        (), Call]
        InsertFields %elt20 (GT: !149)
      }
      !150 = ToArray(!s32)
      InsertFields !122 (the entries! [877f12a8827e18f61222c6c8c5fb04a8]: !150)
    }
    !s34 = StreamMap(!s33) { (%elt22) =>
      %151 = CastRename(%elt22) [Struct{locus:Locus(GRCh37),alleles:Array[String],entries:Array[Struct{GT:Call}]}]
      %152 = GetField(%151) [entries]
      !153 = SelectFields(%151) [(locus alleles)] 
      !c0_10 = I32 [0]
      !154 = ArrayRef(%152, !c0_10) [24] 
      !c1_9 = I32 [1]
      !155 = ArrayRef(%152, !c1_9) [25] 
      !c2 = I32 [2]
      !156 = ArrayRef(%152, !c2) [26] 
      !c3 = I32 [3]
      !157 = ArrayRef(%152, !c3) [27]
      InsertFields !153 (0: !154, 1: !155, 2: !156, 3: !157)
    } 
    !c11 = I32 [11]
    !s35 = StreamTake(!s34, !c11)
    StreamLen(!s35)
  }
  !s36 = ToStream(%158) [False] 
  !c0_11 = I32 [0]
  !159 = StreamFold(!s36, !c0_11) {
  (%accum, %elt23) =>
    ApplyBinaryPrimOp(%accum, %elt23) [Add]
  }
  !160 = Cast(!159) [Int64] 
  !161 = I64 [11]
  !162 = ApplyComparisonOp(!160, !161) [GTEQ] 
  !163 = ArrayLen(%13) 
  !164 = ArrayLen(%158)
  !165 = ApplyComparisonOp(!163, !164) [LTEQ]
  !166 = ApplySpecial(!162, !165) [-1, lor, 
  (), Boolean]
  If !166 then { %158 } else {
    !c4_2 = I32 [4]
    !167 = ApplyBinaryPrimOp(%loopvar, !c4_2) [Multiply] 
    !c1_10 = I32 [1]
    !168 = ApplyBinaryPrimOp(%loopvar2, !c1_10) [Add]
    Recur(!167, !168) [Array[Int32]]
  }
}
%170 = ArrayLen(%169)
!c0_12 = I32 [0]
!171 = ApplyComparisonOp(%170, !c0_12) [EQWithNA]
%186 = If !171 then {
  Literal [Tuple[Int32,Int64], <literal value>]
} else {
  !c0_13 = I32 [0] 
  !172 = I64 [11]
  TailLoop(!c0_13, !172) {
  (%loopvar3, %loopvar4, %loop2) =>
    !c1_11 = I32 [1]
    !173 = ApplyBinaryPrimOp(%170, !c1_11) [Subtract]
    !174 = ApplyComparisonOp(%loopvar3, !173) [EQWithNA] 
    !175 = ArrayRef(%169, %loopvar3) [-1]
    !176 = Cast(!175) [Int64]
    !177 = ApplyBinaryPrimOp(%loopvar4, !176) [Subtract] 
    !178 = I64 [0]
    !179 = ApplyComparisonOp(!177, !178) [LTEQ]
    !180 = ApplySpecial(!174, !179) [-1, lor, 
    (), Boolean]
    If !180 then {
      !c1_12 = I32 [1]
      !181 = ApplyBinaryPrimOp(%loopvar3, !c1_12) [Add]
      MakeTuple(!181, %loopvar4) [(0 1)]
    } else {
      !c1_13 = I32 [1]
      !182 = ApplyBinaryPrimOp(%loopvar3, !c1_13) [Add] 
      !183 = ArrayRef(%169, %loopvar3) [-1]
      !184 = Cast(!183) [Int64]
      !185 = ApplyBinaryPrimOp(%loopvar4, !184) [Subtract]
      Recur(!182, !185) [Tuple[Int32,Int64]]
    }
  }
}
!s37 = ToStream(%13) [False] 
!187 = GetTupleElement(%186) [0]
!s38 = StreamTake(!s37, !187) 
!c0_14 = I32 [0] 
!188 = GetTupleElement(%186) [0] 
!c1_14 = I32 [1]
!s39 = StreamRange(!c0_14, !188, !c1_14) [-1, False]
!s40 = StreamMap(!s39) { (%elt24) =>
  !189 = GetTupleElement(%186) [0] 
  !c1_15 = I32 [1]
  !190 = ApplyBinaryPrimOp(!189, !c1_15) [Subtract]
  !191 = ApplyComparisonOp(%elt24, !190) [EQWithNA]
  If !191 then {
    !192 = GetTupleElement(%186) [1]
    Cast(!192) [Int32]
  } else {
    ArrayRef(%169, %elt24) [-1]
  }
}
!s41 = StreamZip(!s38, !s40) [-1, AssumeSameLength] {
(%elt25, %elt26) =>
  MakeStruct(numberToTake: %elt26, old: %elt25)
}
!193 = ToArray(!s41)
MakeTuple(!193) [(0)]

2023-11-17 18:07:58.067 : INFO: after optimize: compileLowerer, after LowerArrayAggsToRunAggs: IR size 483: 

!1 = EncodedLiteral [Array[Tuple[Int32,Int32]]]
!s = ToStream(!1) [False] 
!c0 = I32 [0] 
!c1 = I32 [1]
!s2 = StreamIota(!c0, !c1) [False]
!s3 = StreamZip(!s, !s2) [35, TakeMinLength] {
(%elt, %elt2) =>
  !2 = Cast(%elt2) [Int64]
  MakeTuple(!2, %elt) [(0 1)]
}
%3 = ToArray(!s3)
%4 = ArrayLen(%3)
!c0_2 = I32 [0] 
!c8 = I32 [8] 
!c1_2 = I32 [1]
!s4 = StreamRange(!c0_2, !c8, !c1_2) [-1, False] 
!5 = Literal [Array[Interval[Struct{locus:Locus(GRCh37),alleles:Array[String]}]], <literal value>]
!s5 = ToStream(!5) [False] 
!c8_2 = I32 [8]
!6 = ApplyComparisonOp(%4, !c8_2) [EQWithNA]
!12 = If !6 then { %3 } else {
  !7 = Str ["TableGen: ..."] 
  !8 = Apply(%4) [-1, str, (), String]
  !9 = Apply(!7, !8) [-1, concat, (), String] 
  !10 = Str [" contexts."]
  !11 = Apply(!9, !10) [-1, concat, (), String]
  Die(!11) [Array[Tuple[Int64,Tuple[Int32,Int32]]], 9]
}
!s6 = ToStream(!12) [False]
!s7 = StreamZip(!s4, !s5, !s6) [9, AssertSameLength] {
(%elt3, %elt4, %elt5) =>
  MakeTuple(%elt3, %elt4, %elt5) [(0 1 2)]
}
%13 = ToArray(!s7)
!c4 = I32 [4] 
!c0_3 = I32 [0]
%169 = TailLoop(!c4, !c0_3) {
(%loopvar, %loopvar2, %loop) =>
  %14 = RNGStateLiteral
  !c0_4 = I32 [0] 
  !c10 = I32 [10] 
  !c1_3 = I32 [1]
  !s8 = StreamRange(!c0_4, !c10, !c1_3) [1, False]
  !s11 = StreamMap(!s8) { (%elt6) =>
    !15 = Cast(%elt6) [Int64]
    %16 = MakeTuple(!15, %elt6) [(0 1)]
    !17 = GetTupleElement(%16) [1] 
    !18 = EncodedLiteral [Array[Int32]]
    !s9 = ToStream(!18) [False]
    !s10 = StreamMap(!s9) { (%elt7) =>
      Cast(%elt7) [Float64]
    }
    !19 = ToArray(!s10) 
    !20 = GetTupleElement(%16) [0]
    !21 = RNGSplit(%14, !20)
    !22 = ApplySeeded(!19, !21) [rand_cat, 0, Int32]
    MakeStruct(sample_idx: !17, pop: !22)
  }
  !23 = ToArray(!s11)
  %24 = MakeStruct(cols: !23)
  !25 = GetField(%24) [cols]
  !s12 = ToStream(!25) [False] 
  !c0_5 = I32 [0] 
  !c1_4 = I32 [1]
  !s13 = StreamIota(!c0_5, !c1_4) [False]
  !s14 = StreamZip(!s12, !s13) [34, TakeMinLength] {
  (%elt8, %elt9) =>
    !26 = Cast(%elt9) [Int64]
    InsertFields %elt8 (__col_uid: !26)
  }
  !27 = ToArray(!s14)
  %28 = InsertFields %24 (cols: !27)
  !s15 = ToStream(%13) [False]
  !s16 = StreamTake(!s15, %loopvar) 
  !29 = CastRename(%28) [Struct{__cols:Array[Struct{sample_idx:Int32,pop:Int32,__col_uid:Int64}]}]
  %30 = MakeStruct(__iruid_1052: %28, __iruid_1054: !29)
  !31 = IsNA(%30)
  !39 = If !31 then {
    NA [Struct{__iruid_1052:Struct{cols:Array[Struct{}]},__iruid_1054:Struct{__cols:Array[Struct{sample_idx:Int32,pop:Int32,__col_uid:Int64}]}}]
  } else {
    %32 = GetField(%30) [__iruid_1052]
    !33 = IsNA(%32)
    !37 = If !33 then {
      NA [Struct{cols:Array[Struct{}]}]
    } else {
      !34 = GetField(%32) [cols]
      !s17 = ToStream(!34) [False]
      !s18 = StreamMap(!s17) { (%elt10) =>
        !35 = IsNA(%elt10)
        If !35 then {
          NA [Struct{}]
        } else {
          Literal [Struct{}, <literal value>]
        }
      }
      !36 = ToArray(!s18)
      MakeStruct(cols: !36)
    } 
    !38 = GetField(%30) [__iruid_1054]
    MakeStruct(__iruid_1052: !37, __iruid_1054: !38)
  } 
  !40 = Str ["iteration="] 
  !41 = Apply(%loopvar2) [-1, str, (), String]
  !42 = Apply(!40, !41) [-1, concat, (), String] 
  !43 = Str [",nParts="]
  !44 = Apply(!42, !43) [-1, concat, (), String] 
  !45 = Apply(%loopvar) [-1, str, (), String]
  !46 = Apply(!44, !45) [-1, concat, (), String]
  %158 = CollectDistributedArray(!s16, !39, !46) {
  (%ctx, %g) =>
    %47 = GetField(%g) [__iruid_1054]
    %48 = GetField(%g) [__iruid_1052]
    %49 = GetTupleElement(%ctx) [1]
    %50 = GetTupleElement(%ctx) [2]
    %51 = GetTupleElement(%50) [0]
    !c0_6 = I32 [0] 
    !c1_5 = I32 [1]
    !s19 = StreamIota(!c0_6, !c1_5) [False] 
    !52 = RNGStateLiteral
    %53 = RNGSplit(!52, %51)
    %54 = GetTupleElement(%50) [1]
    !55 = GetTupleElement(%54) [0] 
    !56 = GetTupleElement(%54) [1] 
    !c1_6 = I32 [1]
    !s20 = StreamRange(!55, !56, !c1_6) [3, False]
    !s26 = StreamMap(!s20) { (%elt11) =>
      !57 = Cast(%elt11) [Int64]
      %58 = MakeTuple(!57, %elt11) [(0 1)]
      !59 = GetTupleElement(%58) [0]
      %60 = RNGSplit(%53, !59)
      !61 = F64 [0.1] 
      !62 = F64 [0.9]
      %63 = ApplySeeded(!61, !62, %60) [rand_unif, -1, Float64]
      !64 = GetTupleElement(%58) [1]
      !65 = Cast(!64) [Int64]
      !66 = Apply(!65) [5, globalPosToLocus, 
      (), Locus(GRCh37)] 
      !67 = EncodedLiteral [Array[String]] 
      !68 = EncodedLiteral [Array[Float64]]
      !s21 = ToStream(!68) [False] 
      !c0_7 = I32 [0] 
      !c1_7 = I32 [1]
      !s22 = StreamIota(!c0_7, !c1_7) [False]
      !s23 = StreamZip(!s21, !s22) [7, TakeMinLength] {
      (%elt12, %elt13) =>
        !69 = Cast(%elt13) [Int64]
        %70 = MakeTuple(!69, %elt12) [(0 1)]
        %71 = GetTupleElement(%70) [1]
        !72 = ApplyBinaryPrimOp(%63, %71) [Multiply] 
        !73 = F64 [1.0]
        !74 = ApplyBinaryPrimOp(!73, %63) [Subtract]
        !75 = ApplyBinaryPrimOp(!74, %71) [Multiply] 
        !76 = GetTupleElement(%70) [0]
        !77 = RNGSplit(%60, !76)
        ApplySeeded(!72, !75, !77) [rand_beta, 1, Float64]
      }
      !78 = ToArray(!s23) 
      !c0_8 = I32 [0] 
      !c10_2 = I32 [10] 
      !c1_8 = I32 [1]
      !s24 = StreamRange(!c0_8, !c10_2, !c1_8) [8, False]
      !s25 = StreamMap(!s24) { (%elt14) =>
        Literal [Struct{}, <literal value>]
      }
      !79 = ToArray(!s25)
      MakeStruct(locus: !66, alleles: !67, af: !78, entries: !79)
    }
    !s27 = StreamZip(!s19, !s26) [36, TakeMinLength] {
    (%elt15, %elt16) =>
      !80 = Cast(%elt15) [Int64]
      !81 = MakeTuple(%51, !80) [(0 1)]
      InsertFields %elt16 (__row_uid: !81)
    }
    !s28 = StreamMap(!s27) { (%elt17) =>
      !82 = SelectFields(%elt17) [(locus alleles)]
      !83 = ApplySpecial(%49, !82) [-1, contains, 
      (), Boolean]
      If !83 then { %elt17 } else {
        !84 = Str ["TableGen: ..."] 
        !85 = GetTupleElement(%ctx) [0]
        !86 = Apply(!85) [-1, str, (), String]
        !87 = Apply(!84, !86) [-1, concat, (), String] 
        !88 = Str ["\n\tRange bo..."]
        !89 = Apply(!87, !88) [-1, concat, (), String] 
        !90 = GetTupleElement(%ctx) [0]
        !91 = Apply(!90) [-1, str, (), String]
        !92 = Apply(!89, !91) [-1, concat, (), String] 
        !93 = Str [": "]
        !94 = Apply(!92, !93) [-1, concat, (), String] 
        !95 = Apply(%49) [-1, str, (), String]
        !96 = Apply(!94, !95) [-1, concat, (), String] 
        !97 = Str ["\n\tInvalid ..."]
        !98 = Apply(!96, !97) [-1, concat, (), String] 
        !99 = SelectFields(%elt17) [(locus alleles)]
        !100 = Apply(!99) [-1, str, (), String]
        !101 = Apply(!98, !100) [-1, concat, (), String]
        Die(!101) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, 9]
      }
    }
    !s29 = StreamMap(!s28) { (%elt18) =>
      %102 = GetField(%elt18) [entries]
      !103 = IsNA(%102)
      If !103 then {
        !104 = Str ["missing en..."]
        Die(!104) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, -1]
      } else {
        !105 = GetField(%48) [cols]
        %106 = ArrayLen(!105)
        %107 = ArrayLen(%102)
        !108 = ApplyComparisonOp(%107, %106) [NEQWithNA]
        If !108 then {
          !109 = Str ["length mis..."] 
          !110 = Apply(%107) [-1, str, (), String]
          !111 = Apply(!109, !110) [-1, concat, (), String] 
          !112 = Str [" entries, "]
          !113 = Apply(!111, !112) [-1, concat, (), String] 
          !114 = Apply(%106) [-1, str, (), String]
          !115 = Apply(!113, !114) [-1, concat, (), String] 
          !116 = Str [" cols, at "]
          !117 = Apply(!115, !116) [-1, concat, (), String] 
          !118 = SelectFields(%elt18) [(locus alleles)]
          !119 = Apply(!118) [-1, str, (), String]
          !120 = Apply(!117, !119) [-1, concat, (), String]
          Die(!120) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, -1]
        } else { %elt18 }
      }
    }
    !s33 = StreamMap(!s29) { (%elt19) =>
      %121 = CastRename(%elt19) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],`the entries! [877f12a8827e18f61222c6c8c5fb04a8]`:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}]
      !122 = SelectFields(%121) [(locus alleles)] 
      !123 = GetField(%121) [`the entries! [877f12a8827e18f61222c6c8c5fb04a8]`]
      !s30 = ToStream(!123) [False] 
      !124 = GetField(%47) [__cols]
      !s31 = ToStream(!124) [False]
      !s32 = StreamZip(!s30, !s31) [-1, AssumeSameLength] {
      (%elt20, %elt21) =>
        %125 = GetField(%121) [__row_uid]
        %126 = GetField(%121) [af]
        %127 = GetField(%elt21) [pop]
        !c0_9 = I32 [0]
        !128 = ApplyComparisonOp(%127, !c0_9) [LT]
        !130 = If !128 then {
          !129 = ArrayLen(%126)
          ApplyBinaryPrimOp(!129, %127) [Add]
        } else { %127 }
        %131 = ArrayRef(%126, !130) [10]
        !132 = F64 [1.0]
        %133 = ApplyBinaryPrimOp(!132, %131) [Subtract]
        !134 = F64 [2.0]
        !135 = Apply(%133, !134) [13, pow, (), Float64] 
        !136 = F64 [2.0]
        !137 = ApplyBinaryPrimOp(!136, %131) [Multiply]
        !138 = ApplyBinaryPrimOp(!137, %133) [Multiply] 
        !139 = F64 [2.0]
        !140 = Apply(%131, !139) [16, pow, (), Float64]
        !141 = MakeArray(!135, !138, !140) [Array[Float64]] 
        !142 = RNGStateLiteral 
        !143 = GetTupleElement(%125) [0] 
        !144 = GetTupleElement(%125) [1] 
        !145 = GetField(%elt21) [__col_uid]
        !146 = MakeTuple(!143, !144, !145) [(0 1 2)]
        !147 = RNGSplit(!142, !146)
        !148 = ApplySeeded(!141, !147) [rand_cat, 2, Int32]
        !149 = Apply(!148) [17, UnphasedDiploidGtIndexCall, 
        (), Call]
        InsertFields %elt20 (GT: !149)
      }
      !150 = ToArray(!s32)
      InsertFields !122 (the entries! [877f12a8827e18f61222c6c8c5fb04a8]: !150)
    }
    !s34 = StreamMap(!s33) { (%elt22) =>
      %151 = CastRename(%elt22) [Struct{locus:Locus(GRCh37),alleles:Array[String],entries:Array[Struct{GT:Call}]}]
      %152 = GetField(%151) [entries]
      !153 = SelectFields(%151) [(locus alleles)] 
      !c0_10 = I32 [0]
      !154 = ArrayRef(%152, !c0_10) [24] 
      !c1_9 = I32 [1]
      !155 = ArrayRef(%152, !c1_9) [25] 
      !c2 = I32 [2]
      !156 = ArrayRef(%152, !c2) [26] 
      !c3 = I32 [3]
      !157 = ArrayRef(%152, !c3) [27]
      InsertFields !153 (0: !154, 1: !155, 2: !156, 3: !157)
    } 
    !c11 = I32 [11]
    !s35 = StreamTake(!s34, !c11)
    StreamLen(!s35)
  }
  !s36 = ToStream(%158) [False] 
  !c0_11 = I32 [0]
  !159 = StreamFold(!s36, !c0_11) {
  (%accum, %elt23) =>
    ApplyBinaryPrimOp(%accum, %elt23) [Add]
  }
  !160 = Cast(!159) [Int64] 
  !161 = I64 [11]
  !162 = ApplyComparisonOp(!160, !161) [GTEQ] 
  !163 = ArrayLen(%13) 
  !164 = ArrayLen(%158)
  !165 = ApplyComparisonOp(!163, !164) [LTEQ]
  !166 = ApplySpecial(!162, !165) [-1, lor, 
  (), Boolean]
  If !166 then { %158 } else {
    !c4_2 = I32 [4]
    !167 = ApplyBinaryPrimOp(%loopvar, !c4_2) [Multiply] 
    !c1_10 = I32 [1]
    !168 = ApplyBinaryPrimOp(%loopvar2, !c1_10) [Add]
    Recur(!167, !168) [Array[Int32]]
  }
}
%170 = ArrayLen(%169)
!c0_12 = I32 [0]
!171 = ApplyComparisonOp(%170, !c0_12) [EQWithNA]
%186 = If !171 then {
  Literal [Tuple[Int32,Int64], <literal value>]
} else {
  !c0_13 = I32 [0] 
  !172 = I64 [11]
  TailLoop(!c0_13, !172) {
  (%loopvar3, %loopvar4, %loop2) =>
    !c1_11 = I32 [1]
    !173 = ApplyBinaryPrimOp(%170, !c1_11) [Subtract]
    !174 = ApplyComparisonOp(%loopvar3, !173) [EQWithNA] 
    !175 = ArrayRef(%169, %loopvar3) [-1]
    !176 = Cast(!175) [Int64]
    !177 = ApplyBinaryPrimOp(%loopvar4, !176) [Subtract] 
    !178 = I64 [0]
    !179 = ApplyComparisonOp(!177, !178) [LTEQ]
    !180 = ApplySpecial(!174, !179) [-1, lor, 
    (), Boolean]
    If !180 then {
      !c1_12 = I32 [1]
      !181 = ApplyBinaryPrimOp(%loopvar3, !c1_12) [Add]
      MakeTuple(!181, %loopvar4) [(0 1)]
    } else {
      !c1_13 = I32 [1]
      !182 = ApplyBinaryPrimOp(%loopvar3, !c1_13) [Add] 
      !183 = ArrayRef(%169, %loopvar3) [-1]
      !184 = Cast(!183) [Int64]
      !185 = ApplyBinaryPrimOp(%loopvar4, !184) [Subtract]
      Recur(!182, !185) [Tuple[Int32,Int64]]
    }
  }
}
!s37 = ToStream(%13) [False] 
!187 = GetTupleElement(%186) [0]
!s38 = StreamTake(!s37, !187) 
!c0_14 = I32 [0] 
!188 = GetTupleElement(%186) [0] 
!c1_14 = I32 [1]
!s39 = StreamRange(!c0_14, !188, !c1_14) [-1, False]
!s40 = StreamMap(!s39) { (%elt24) =>
  !189 = GetTupleElement(%186) [0] 
  !c1_15 = I32 [1]
  !190 = ApplyBinaryPrimOp(!189, !c1_15) [Subtract]
  !191 = ApplyComparisonOp(%elt24, !190) [EQWithNA]
  If !191 then {
    !192 = GetTupleElement(%186) [1]
    Cast(!192) [Int32]
  } else {
    ArrayRef(%169, %elt24) [-1]
  }
}
!s41 = StreamZip(!s38, !s40) [-1, AssumeSameLength] {
(%elt25, %elt26) =>
  MakeStruct(numberToTake: %elt26, old: %elt25)
}
!193 = ToArray(!s41)
MakeTuple(!193) [(0)]

2023-11-17 18:07:58.347 : INFO: encoder cache miss (2 hits, 6 misses, 0.250)
2023-11-17 18:07:58.349 : INFO: instruction count: 3: __C725HailClassLoaderContainer.<init>
2023-11-17 18:07:58.349 : INFO: instruction count: 3: __C725HailClassLoaderContainer.<clinit>
2023-11-17 18:07:58.349 : INFO: instruction count: 3: __C727FSContainer.<init>
2023-11-17 18:07:58.349 : INFO: instruction count: 3: __C727FSContainer.<clinit>
2023-11-17 18:07:58.350 : INFO: instruction count: 3: __C729etypeEncode.<init>
2023-11-17 18:07:58.350 : INFO: instruction count: 7: __C729etypeEncode.apply
2023-11-17 18:07:58.351 : INFO: instruction count: 105: __C729etypeEncode.__m731ENCODE_SBaseStructPointer_TO_r_struct_of_r_binaryANDr_binaryANDr_struct_of_ENDANDr_binaryANDr_binaryANDr_binaryANDr_binaryANDr_binaryANDr_binaryEND
2023-11-17 18:07:58.351 : INFO: instruction count: 16: __C729etypeEncode.__m732ENCODE_SStringPointer_TO_r_binary
2023-11-17 18:07:58.351 : INFO: instruction count: 1: __C729etypeEncode.__m733ENCODE_SBaseStructPointer_TO_r_struct_of_END
2023-11-17 18:07:58.356 : INFO: instruction count: 3: __C400HailClassLoaderContainer.<init>
2023-11-17 18:07:58.356 : INFO: instruction count: 3: __C400HailClassLoaderContainer.<clinit>
2023-11-17 18:07:58.356 : INFO: instruction count: 3: __C402FSContainer.<init>
2023-11-17 18:07:58.356 : INFO: instruction count: 3: __C402FSContainer.<clinit>
2023-11-17 18:07:58.378 : INFO: instruction count: 3: __C404collect_distributed_array_table_head_recursive_count.<init>
2023-11-17 18:07:58.379 : INFO: instruction count: 144: __C404collect_distributed_array_table_head_recursive_count.apply
2023-11-17 18:07:58.379 : INFO: instruction count: 17: __C404collect_distributed_array_table_head_recursive_count.apply
2023-11-17 18:07:58.379 : INFO: instruction count: 27: __C404collect_distributed_array_table_head_recursive_count.__m406DECODE_r_struct_of_r_struct_of_r_int32ANDr_struct_of_r_struct_of_r_struct_of_r_binaryANDr_int32ENDANDr_array_of_r_binaryENDANDr_struct_of_r_struct_of_r_binaryANDr_int32ENDANDr_array_of_r_binaryENDANDr_boolANDr_boolENDANDr_struct_of_r_int64ANDo_struct_of_o_int32ANDo_int32ENDENDENDEND_TO_SBaseStructPointer
2023-11-17 18:07:58.379 : INFO: instruction count: 35: __C404collect_distributed_array_table_head_recursive_count.__m407INPLACE_DECODE_r_struct_of_r_int32ANDr_struct_of_r_struct_of_r_struct_of_r_binaryANDr_int32ENDANDr_array_of_r_binaryENDANDr_struct_of_r_struct_of_r_binaryANDr_int32ENDANDr_array_of_r_binaryENDANDr_boolANDr_boolENDANDr_struct_of_r_int64ANDo_struct_of_o_int32ANDo_int32ENDENDEND_TO_r_tuple_of_r_int32ANDr_interval_of_r_struct_of_r_locusANDr_array_of_r_stringENDANDr_tuple_of_r_int64ANDo_tuple_of_o_int32ANDo_int32ENDENDEND
2023-11-17 18:07:58.379 : INFO: instruction count: 10: __C404collect_distributed_array_table_head_recursive_count.__m408INPLACE_DECODE_r_int32_TO_r_int32
2023-11-17 18:07:58.379 : INFO: instruction count: 44: __C404collect_distributed_array_table_head_recursive_count.__m409INPLACE_DECODE_r_struct_of_r_struct_of_r_struct_of_r_binaryANDr_int32ENDANDr_array_of_r_binaryENDANDr_struct_of_r_struct_of_r_binaryANDr_int32ENDANDr_array_of_r_binaryENDANDr_boolANDr_boolEND_TO_r_interval_of_r_struct_of_r_locusANDr_array_of_r_stringEND
2023-11-17 18:07:58.379 : INFO: instruction count: 26: __C404collect_distributed_array_table_head_recursive_count.__m410INPLACE_DECODE_r_struct_of_r_struct_of_r_binaryANDr_int32ENDANDr_array_of_r_binaryEND_TO_r_struct_of_r_locusANDr_array_of_r_stringEND
2023-11-17 18:07:58.379 : INFO: instruction count: 26: __C404collect_distributed_array_table_head_recursive_count.__m411INPLACE_DECODE_r_struct_of_r_binaryANDr_int32END_TO_r_locus
2023-11-17 18:07:58.380 : INFO: instruction count: 31: __C404collect_distributed_array_table_head_recursive_count.__m412INPLACE_DECODE_r_binary_TO_r_string
2023-11-17 18:07:58.380 : INFO: instruction count: 62: __C404collect_distributed_array_table_head_recursive_count.__m413INPLACE_DECODE_r_array_of_r_binary_TO_r_array_of_r_string
2023-11-17 18:07:58.380 : INFO: instruction count: 10: __C404collect_distributed_array_table_head_recursive_count.__m414INPLACE_DECODE_r_bool_TO_r_bool
2023-11-17 18:07:58.380 : INFO: instruction count: 57: __C404collect_distributed_array_table_head_recursive_count.__m415INPLACE_DECODE_r_struct_of_r_int64ANDo_struct_of_o_int32ANDo_int32ENDEND_TO_r_tuple_of_r_int64ANDo_tuple_of_o_int32ANDo_int32ENDEND
2023-11-17 18:07:58.380 : INFO: instruction count: 10: __C404collect_distributed_array_table_head_recursive_count.__m416INPLACE_DECODE_r_int64_TO_r_int64
2023-11-17 18:07:58.380 : INFO: instruction count: 75: __C404collect_distributed_array_table_head_recursive_count.__m417INPLACE_DECODE_o_struct_of_o_int32ANDo_int32END_TO_o_tuple_of_o_int32ANDo_int32END
2023-11-17 18:07:58.380 : INFO: instruction count: 10: __C404collect_distributed_array_table_head_recursive_count.__m418INPLACE_DECODE_o_int32_TO_o_int32
2023-11-17 18:07:58.380 : INFO: instruction count: 58: __C404collect_distributed_array_table_head_recursive_count.__m420DECODE_r_struct_of_o_struct_of_o_struct_of_r_array_of_o_struct_of_ENDENDANDr_struct_of_r_array_of_r_struct_of_r_int32ANDr_int32ANDr_int64ENDENDENDEND_TO_SBaseStructPointer
2023-11-17 18:07:58.381 : INFO: instruction count: 57: __C404collect_distributed_array_table_head_recursive_count.__m421INPLACE_DECODE_o_struct_of_o_struct_of_r_array_of_o_struct_of_ENDENDANDr_struct_of_r_array_of_r_struct_of_r_int32ANDr_int32ANDr_int64ENDENDEND_TO_o_struct_of_o_struct_of_r_array_of_o_struct_of_ENDENDANDr_struct_of_r_array_of_r_struct_of_r_int32ANDr_int32ANDr_int64ENDENDEND
2023-11-17 18:07:58.381 : INFO: instruction count: 17: __C404collect_distributed_array_table_head_recursive_count.__m422INPLACE_DECODE_o_struct_of_r_array_of_o_struct_of_ENDEND_TO_o_struct_of_r_array_of_o_struct_of_ENDEND
2023-11-17 18:07:58.381 : INFO: instruction count: 213: __C404collect_distributed_array_table_head_recursive_count.__m423INPLACE_DECODE_r_array_of_o_struct_of_END_TO_r_array_of_o_struct_of_END
2023-11-17 18:07:58.381 : INFO: instruction count: 8: __C404collect_distributed_array_table_head_recursive_count.__m424INPLACE_DECODE_o_struct_of_END_TO_o_struct_of_END
2023-11-17 18:07:58.381 : INFO: instruction count: 17: __C404collect_distributed_array_table_head_recursive_count.__m425INPLACE_DECODE_r_struct_of_r_array_of_r_struct_of_r_int32ANDr_int32ANDr_int64ENDEND_TO_r_struct_of_r_array_of_r_struct_of_r_int32ANDr_int32ANDr_int64ENDEND
2023-11-17 18:07:58.381 : INFO: instruction count: 62: __C404collect_distributed_array_table_head_recursive_count.__m426INPLACE_DECODE_r_array_of_r_struct_of_r_int32ANDr_int32ANDr_int64END_TO_r_array_of_r_struct_of_r_int32ANDr_int32ANDr_int64END
2023-11-17 18:07:58.381 : INFO: instruction count: 35: __C404collect_distributed_array_table_head_recursive_count.__m427INPLACE_DECODE_r_struct_of_r_int32ANDr_int32ANDr_int64END_TO_r_struct_of_r_int32ANDr_int32ANDr_int64END
2023-11-17 18:07:58.382 : INFO: instruction count: 317: __C404collect_distributed_array_table_head_recursive_count.__m430split_StreamLen
2023-11-17 18:07:58.382 : INFO: instruction count: 80: __C404collect_distributed_array_table_head_recursive_count.__m465globalPosToLocus
2023-11-17 18:07:58.383 : INFO: instruction count: 450: __C404collect_distributed_array_table_head_recursive_count.__m471split_ToArray
2023-11-17 18:07:58.384 : INFO: instruction count: 177: __C404collect_distributed_array_table_head_recursive_count.__m494split_ToArray
2023-11-17 18:07:58.384 : INFO: instruction count: 368: __C404collect_distributed_array_table_head_recursive_count.__m532split_If
2023-11-17 18:07:58.384 : INFO: instruction count: 125: __C404collect_distributed_array_table_head_recursive_count.__m534ord_compareNonnull
2023-11-17 18:07:58.384 : INFO: instruction count: 15: __C404collect_distributed_array_table_head_recursive_count.__m535ord_compare
2023-11-17 18:07:58.384 : INFO: instruction count: 74: __C404collect_distributed_array_table_head_recursive_count.__m536ord_compareNonnull
2023-11-17 18:07:58.384 : INFO: instruction count: 9: __C404collect_distributed_array_table_head_recursive_count.__m537ord_compareNonnull
2023-11-17 18:07:58.385 : INFO: instruction count: 89: __C404collect_distributed_array_table_head_recursive_count.__m538ord_compareNonnull
2023-11-17 18:07:58.385 : INFO: instruction count: 15: __C404collect_distributed_array_table_head_recursive_count.__m539ord_compare
2023-11-17 18:07:58.385 : INFO: instruction count: 135: __C404collect_distributed_array_table_head_recursive_count.__m540ord_compareNonnull
2023-11-17 18:07:58.385 : INFO: instruction count: 18: __C404collect_distributed_array_table_head_recursive_count.__m541ord_compare
2023-11-17 18:07:58.385 : INFO: instruction count: 18: __C404collect_distributed_array_table_head_recursive_count.__m542str
2023-11-17 18:07:58.385 : INFO: instruction count: 29: __C404collect_distributed_array_table_head_recursive_count.__m545concat
2023-11-17 18:07:58.386 : INFO: instruction count: 29: __C404collect_distributed_array_table_head_recursive_count.__m546concat
2023-11-17 18:07:58.386 : INFO: instruction count: 9: __C404collect_distributed_array_table_head_recursive_count.__m547concat
2023-11-17 18:07:58.386 : INFO: instruction count: 24: __C404collect_distributed_array_table_head_recursive_count.__m548str
2023-11-17 18:07:58.386 : INFO: instruction count: 48: __C404collect_distributed_array_table_head_recursive_count.__m549str
2023-11-17 18:07:58.386 : INFO: instruction count: 380: __C404collect_distributed_array_table_head_recursive_count.__m581split_If
2023-11-17 18:07:58.386 : INFO: instruction count: 18: __C404collect_distributed_array_table_head_recursive_count.__m586ord_equiv
2023-11-17 18:07:58.387 : INFO: instruction count: 14: __C404collect_distributed_array_table_head_recursive_count.__m587ord_equivNonnull
2023-11-17 18:07:58.387 : INFO: instruction count: 260: __C404collect_distributed_array_table_head_recursive_count.__m630split_ToArray
2023-11-17 18:07:58.388 : INFO: instruction count: 444: __C404collect_distributed_array_table_head_recursive_count.__m651split_Let
2023-11-17 18:07:58.388 : INFO: instruction count: 11: __C404collect_distributed_array_table_head_recursive_count.__m653ord_lt
2023-11-17 18:07:58.388 : INFO: instruction count: 14: __C404collect_distributed_array_table_head_recursive_count.__m654ord_ltNonnull
2023-11-17 18:07:58.388 : INFO: instruction count: 35: __C404collect_distributed_array_table_head_recursive_count.__m655arrayref_bounds_check
2023-11-17 18:07:58.388 : INFO: instruction count: 9: __C404collect_distributed_array_table_head_recursive_count.__m660pow
2023-11-17 18:07:58.388 : INFO: instruction count: 8: __C404collect_distributed_array_table_head_recursive_count.__m661UnphasedDiploidGtIndexCall
2023-11-17 18:07:58.388 : INFO: instruction count: 36: __C404collect_distributed_array_table_head_recursive_count.__m712ENCODE_SBaseStructPointer_TO_r_struct_of_o_int32END
2023-11-17 18:07:58.388 : INFO: instruction count: 4: __C404collect_distributed_array_table_head_recursive_count.__m713ENCODE_SInt32$_TO_o_int32
2023-11-17 18:07:58.388 : INFO: instruction count: 15: __C404collect_distributed_array_table_head_recursive_count.setPartitionIndex
2023-11-17 18:07:58.389 : INFO: instruction count: 4: __C404collect_distributed_array_table_head_recursive_count.addPartitionRegion
2023-11-17 18:07:58.389 : INFO: instruction count: 4: __C404collect_distributed_array_table_head_recursive_count.setPool
2023-11-17 18:07:58.389 : INFO: instruction count: 3: __C404collect_distributed_array_table_head_recursive_count.addHailClassLoader
2023-11-17 18:07:58.389 : INFO: instruction count: 3: __C404collect_distributed_array_table_head_recursive_count.addFS
2023-11-17 18:07:58.389 : INFO: instruction count: 4: __C404collect_distributed_array_table_head_recursive_count.addTaskContext
2023-11-17 18:07:58.389 : INFO: instruction count: 43: __C404collect_distributed_array_table_head_recursive_count.addReferenceGenomes
2023-11-17 18:07:58.389 : INFO: instruction count: 3: __C404collect_distributed_array_table_head_recursive_count.setObjects
2023-11-17 18:07:58.389 : INFO: instruction count: 210: __C404collect_distributed_array_table_head_recursive_count.addAndDecodeLiterals
2023-11-17 18:07:58.389 : INFO: instruction count: 99: __C404collect_distributed_array_table_head_recursive_count.__m718DECODE_r_struct_of_r_binaryANDr_binaryANDr_struct_of_ENDANDr_binaryANDr_binaryANDr_binaryANDr_binaryANDr_binaryANDr_binaryEND_TO_SBaseStructPointer
2023-11-17 18:07:58.389 : INFO: instruction count: 8: __C404collect_distributed_array_table_head_recursive_count.__m719INPLACE_DECODE_r_struct_of_END_TO_r_struct_of_END
2023-11-17 18:07:58.390 : INFO: instruction count: 217: __C404collect_distributed_array_table_head_recursive_count.__m720DECODE_o_array_of_o_binary_TO_SIndexablePointer
2023-11-17 18:07:58.390 : INFO: instruction count: 31: __C404collect_distributed_array_table_head_recursive_count.__m722INPLACE_DECODE_o_binary_TO_o_string
2023-11-17 18:07:58.390 : INFO: instruction count: 217: __C404collect_distributed_array_table_head_recursive_count.__m723DECODE_o_array_of_o_float64_TO_SIndexablePointer
2023-11-17 18:07:58.390 : INFO: instruction count: 10: __C404collect_distributed_array_table_head_recursive_count.__m724INPLACE_DECODE_o_float64_TO_o_float64
2023-11-17 18:07:58.390 : INFO: instruction count: 685: __C404collect_distributed_array_table_head_recursive_count.__m651split_Let_region33_33
2023-11-17 18:07:58.391 : INFO: instruction count: 620: __C404collect_distributed_array_table_head_recursive_count.__m651split_Let_region32_48
2023-11-17 18:07:58.391 : INFO: instruction count: 3: __C735__m651split_LetSpills.<init>
2023-11-17 18:07:58.392 : INFO: instruction count: 3: __C466Tuple3.<init>
2023-11-17 18:07:58.392 : INFO: instruction count: 12: __C466Tuple3.<init>
2023-11-17 18:07:58.392 : INFO: instruction count: 3: __C467RGContainer_GRCh37.<init>
2023-11-17 18:07:58.392 : INFO: instruction count: 3: __C467RGContainer_GRCh37.<clinit>
2023-11-17 18:07:58.392 : INFO: instruction count: 3: __C543staticWrapperClass_1.<init>
2023-11-17 18:07:58.392 : INFO: instruction count: 3: __C721Tuple3.<init>
2023-11-17 18:07:58.392 : INFO: instruction count: 12: __C721Tuple3.<init>
2023-11-17 18:07:58.445 : INFO: encoder cache miss (2 hits, 7 misses, 0.222)
2023-11-17 18:07:58.449 : INFO: instruction count: 3: __C873HailClassLoaderContainer.<init>
2023-11-17 18:07:58.449 : INFO: instruction count: 3: __C873HailClassLoaderContainer.<clinit>
2023-11-17 18:07:58.450 : INFO: instruction count: 3: __C875FSContainer.<init>
2023-11-17 18:07:58.450 : INFO: instruction count: 3: __C875FSContainer.<clinit>
2023-11-17 18:07:58.451 : INFO: instruction count: 3: __C877etypeEncode.<init>
2023-11-17 18:07:58.451 : INFO: instruction count: 7: __C877etypeEncode.apply
2023-11-17 18:07:58.452 : INFO: instruction count: 89: __C877etypeEncode.__m879ENCODE_SBaseStructPointer_TO_r_struct_of_r_array_of_r_struct_of_r_struct_of_r_struct_of_r_binaryANDr_int32ENDANDr_array_of_r_binaryENDANDr_struct_of_r_struct_of_r_binaryANDr_int32ENDANDr_array_of_r_binaryENDANDr_boolANDr_boolENDANDr_binaryANDr_binaryANDr_struct_of_ENDANDr_struct_of_r_int32ANDr_int64ENDANDr_binaryANDr_binaryEND
2023-11-17 18:07:58.452 : INFO: instruction count: 53: __C877etypeEncode.__m880ENCODE_SIndexablePointer_TO_r_array_of_r_struct_of_r_struct_of_r_struct_of_r_binaryANDr_int32ENDANDr_array_of_r_binaryENDANDr_struct_of_r_struct_of_r_binaryANDr_int32ENDANDr_array_of_r_binaryENDANDr_boolANDr_boolEND
2023-11-17 18:07:58.452 : INFO: instruction count: 41: __C877etypeEncode.__m881ENCODE_SIntervalPointer_TO_r_struct_of_r_struct_of_r_struct_of_r_binaryANDr_int32ENDANDr_array_of_r_binaryENDANDr_struct_of_r_struct_of_r_binaryANDr_int32ENDANDr_array_of_r_binaryENDANDr_boolANDr_boolEND
2023-11-17 18:07:58.452 : INFO: instruction count: 51: __C877etypeEncode.__m882ENCODE_SBaseStructPointer_TO_r_struct_of_r_struct_of_r_binaryANDr_int32ENDANDr_array_of_r_binaryEND
2023-11-17 18:07:58.452 : INFO: instruction count: 25: __C877etypeEncode.__m883ENCODE_SCanonicalLocusPointer_TO_r_struct_of_r_binaryANDr_int32END
2023-11-17 18:07:58.452 : INFO: instruction count: 16: __C877etypeEncode.__m884ENCODE_SStringPointer_TO_r_binary
2023-11-17 18:07:58.452 : INFO: instruction count: 4: __C877etypeEncode.__m885ENCODE_SInt32$_TO_r_int32
2023-11-17 18:07:58.452 : INFO: instruction count: 39: __C877etypeEncode.__m886ENCODE_SIndexablePointer_TO_r_array_of_r_binary
2023-11-17 18:07:58.452 : INFO: instruction count: 4: __C877etypeEncode.__m887ENCODE_SBoolean$_TO_r_bool
2023-11-17 18:07:58.453 : INFO: instruction count: 1: __C877etypeEncode.__m888ENCODE_SBaseStructPointer_TO_r_struct_of_END
2023-11-17 18:07:58.453 : INFO: instruction count: 25: __C877etypeEncode.__m889ENCODE_SBaseStructPointer_TO_r_struct_of_r_int32ANDr_int64END
2023-11-17 18:07:58.453 : INFO: instruction count: 4: __C877etypeEncode.__m890ENCODE_SInt64$_TO_r_int64
2023-11-17 18:07:58.458 : INFO: instruction count: 3: __C235HailClassLoaderContainer.<init>
2023-11-17 18:07:58.458 : INFO: instruction count: 3: __C235HailClassLoaderContainer.<clinit>
2023-11-17 18:07:58.459 : INFO: instruction count: 3: __C237FSContainer.<init>
2023-11-17 18:07:58.459 : INFO: instruction count: 3: __C237FSContainer.<clinit>
2023-11-17 18:07:58.484 : INFO: instruction count: 3: __C239Compiled.<init>
2023-11-17 18:07:58.484 : INFO: instruction count: 57: __C239Compiled.apply
2023-11-17 18:07:58.484 : INFO: instruction count: 115: __C239Compiled.__m241split_ToArray
2023-11-17 18:07:58.485 : INFO: instruction count: 557: __C239Compiled.__m243split_ToArray
2023-11-17 18:07:58.485 : INFO: instruction count: 280: __C239Compiled.__m245split_ToArray
2023-11-17 18:07:58.485 : INFO: instruction count: 11: __C239Compiled.__m275ord_equiv
2023-11-17 18:07:58.485 : INFO: instruction count: 14: __C239Compiled.__m276ord_equivNonnull
2023-11-17 18:07:58.485 : INFO: instruction count: 18: __C239Compiled.__m277str
2023-11-17 18:07:58.485 : INFO: instruction count: 29: __C239Compiled.__m280concat
2023-11-17 18:07:58.486 : INFO: instruction count: 29: __C239Compiled.__m281concat
2023-11-17 18:07:58.486 : INFO: instruction count: 366: __C239Compiled.__m303split_TailLoop
2023-11-17 18:07:58.486 : INFO: instruction count: 447: __C239Compiled.__m313split_ToArray
2023-11-17 18:07:58.487 : INFO: instruction count: 263: __C239Compiled.__m322split_ToArray
2023-11-17 18:07:58.487 : INFO: instruction count: 206: __C239Compiled.__m340split_ToArray
2023-11-17 18:07:58.488 : INFO: instruction count: 679: __C239Compiled.__m362split_CollectDistributedArray
2023-11-17 18:07:58.489 : INFO: instruction count: 200: __C239Compiled.__m389split_ToArray
2023-11-17 18:07:58.489 : INFO: instruction count: 4: __C239Compiled.setBackend
2023-11-17 18:07:58.489 : INFO: instruction count: 9: __C239Compiled.__m759ENCODE_SBaseStructPointer_TO_r_struct_of_r_struct_of_r_int32ANDr_struct_of_r_struct_of_r_struct_of_r_binaryANDr_int32ENDANDr_array_of_r_binaryENDANDr_struct_of_r_struct_of_r_binaryANDr_int32ENDANDr_array_of_r_binaryENDANDr_boolANDr_boolENDANDr_struct_of_r_int64ANDo_struct_of_o_int32ANDo_int32ENDENDENDEND
2023-11-17 18:07:58.489 : INFO: instruction count: 47: __C239Compiled.__m760ENCODE_SBaseStructPointer_TO_r_struct_of_r_int32ANDr_struct_of_r_struct_of_r_struct_of_r_binaryANDr_int32ENDANDr_array_of_r_binaryENDANDr_struct_of_r_struct_of_r_binaryANDr_int32ENDANDr_array_of_r_binaryENDANDr_boolANDr_boolENDANDr_struct_of_r_int64ANDo_struct_of_o_int32ANDo_int32ENDENDEND
2023-11-17 18:07:58.489 : INFO: instruction count: 4: __C239Compiled.__m761ENCODE_SInt32$_TO_r_int32
2023-11-17 18:07:58.489 : INFO: instruction count: 41: __C239Compiled.__m762ENCODE_SIntervalPointer_TO_r_struct_of_r_struct_of_r_struct_of_r_binaryANDr_int32ENDANDr_array_of_r_binaryENDANDr_struct_of_r_struct_of_r_binaryANDr_int32ENDANDr_array_of_r_binaryENDANDr_boolANDr_boolEND
2023-11-17 18:07:58.490 : INFO: instruction count: 51: __C239Compiled.__m763ENCODE_SBaseStructPointer_TO_r_struct_of_r_struct_of_r_binaryANDr_int32ENDANDr_array_of_r_binaryEND
2023-11-17 18:07:58.490 : INFO: instruction count: 25: __C239Compiled.__m764ENCODE_SCanonicalLocusPointer_TO_r_struct_of_r_binaryANDr_int32END
2023-11-17 18:07:58.490 : INFO: instruction count: 16: __C239Compiled.__m765ENCODE_SStringPointer_TO_r_binary
2023-11-17 18:07:58.490 : INFO: instruction count: 39: __C239Compiled.__m766ENCODE_SIndexablePointer_TO_r_array_of_r_binary
2023-11-17 18:07:58.490 : INFO: instruction count: 4: __C239Compiled.__m767ENCODE_SBoolean$_TO_r_bool
2023-11-17 18:07:58.490 : INFO: instruction count: 44: __C239Compiled.__m768ENCODE_SBaseStructPointer_TO_r_struct_of_r_int64ANDo_struct_of_o_int32ANDo_int32ENDEND
2023-11-17 18:07:58.490 : INFO: instruction count: 4: __C239Compiled.__m769ENCODE_SInt64$_TO_r_int64
2023-11-17 18:07:58.490 : INFO: instruction count: 59: __C239Compiled.__m770ENCODE_SBaseStructPointer_TO_o_struct_of_o_int32ANDo_int32END
2023-11-17 18:07:58.490 : INFO: instruction count: 4: __C239Compiled.__m771ENCODE_SInt32$_TO_o_int32
2023-11-17 18:07:58.490 : INFO: instruction count: 32: __C239Compiled.__m772ENCODE_SBaseStructPointer_TO_r_struct_of_o_struct_of_o_struct_of_r_array_of_o_struct_of_ENDENDANDr_struct_of_r_array_of_r_struct_of_r_int32ANDr_int32ANDr_int64ENDENDENDEND
2023-11-17 18:07:58.490 : INFO: instruction count: 40: __C239Compiled.__m773ENCODE_SBaseStructPointer_TO_o_struct_of_o_struct_of_r_array_of_o_struct_of_ENDENDANDr_struct_of_r_array_of_r_struct_of_r_int32ANDr_int32ANDr_int64ENDENDEND
2023-11-17 18:07:58.491 : INFO: instruction count: 36: __C239Compiled.__m774ENCODE_SBaseStructPointer_TO_o_struct_of_r_array_of_o_struct_of_ENDEND
2023-11-17 18:07:58.491 : INFO: instruction count: 111: __C239Compiled.__m775ENCODE_SIndexablePointer_TO_r_array_of_o_struct_of_END
2023-11-17 18:07:58.491 : INFO: instruction count: 1: __C239Compiled.__m776ENCODE_SBaseStructPointer_TO_o_struct_of_END
2023-11-17 18:07:58.491 : INFO: instruction count: 25: __C239Compiled.__m777ENCODE_SBaseStructPointer_TO_r_struct_of_r_array_of_r_struct_of_r_int32ANDr_int32ANDr_int64ENDEND
2023-11-17 18:07:58.491 : INFO: instruction count: 35: __C239Compiled.__m778ENCODE_SIndexablePointer_TO_r_array_of_r_struct_of_r_int32ANDr_int32ANDr_int64END
2023-11-17 18:07:58.491 : INFO: instruction count: 37: __C239Compiled.__m779ENCODE_SBaseStructPointer_TO_r_struct_of_r_int32ANDr_int32ANDr_int64END
2023-11-17 18:07:58.491 : INFO: instruction count: 9: __C239Compiled.__m780concat
2023-11-17 18:07:58.491 : INFO: instruction count: 58: __C239Compiled.__m781DECODE_r_struct_of_o_int32END_TO_SBaseStructPointer
2023-11-17 18:07:58.491 : INFO: instruction count: 10: __C239Compiled.__m782INPLACE_DECODE_o_int32_TO_o_int32
2023-11-17 18:07:58.491 : INFO: instruction count: 143: __C239Compiled.__m789split_StreamFold
2023-11-17 18:07:58.491 : INFO: instruction count: 11: __C239Compiled.__m802ord_gteq
2023-11-17 18:07:58.491 : INFO: instruction count: 16: __C239Compiled.__m803ord_gteqNonnull
2023-11-17 18:07:58.492 : INFO: instruction count: 11: __C239Compiled.__m804ord_lteq
2023-11-17 18:07:58.492 : INFO: instruction count: 14: __C239Compiled.__m805ord_lteqNonnull
2023-11-17 18:07:58.492 : INFO: instruction count: 18: __C239Compiled.__m816ord_equiv
2023-11-17 18:07:58.492 : INFO: instruction count: 436: __C239Compiled.__m817split_TailLoop
2023-11-17 18:07:58.492 : INFO: instruction count: 18: __C239Compiled.__m825ord_equiv
2023-11-17 18:07:58.493 : INFO: instruction count: 35: __C239Compiled.__m826arrayref_bounds_check
2023-11-17 18:07:58.493 : INFO: instruction count: 11: __C239Compiled.__m827ord_lteq
2023-11-17 18:07:58.493 : INFO: instruction count: 16: __C239Compiled.__m828ord_lteqNonnull
2023-11-17 18:07:58.493 : INFO: instruction count: 9: __C239Compiled.setPartitionIndex
2023-11-17 18:07:58.493 : INFO: instruction count: 4: __C239Compiled.addPartitionRegion
2023-11-17 18:07:58.493 : INFO: instruction count: 4: __C239Compiled.setPool
2023-11-17 18:07:58.493 : INFO: instruction count: 3: __C239Compiled.addHailClassLoader
2023-11-17 18:07:58.493 : INFO: instruction count: 3: __C239Compiled.addFS
2023-11-17 18:07:58.493 : INFO: instruction count: 4: __C239Compiled.addTaskContext
2023-11-17 18:07:58.493 : INFO: instruction count: 3: __C239Compiled.setObjects
2023-11-17 18:07:58.493 : INFO: instruction count: 190: __C239Compiled.addAndDecodeLiterals
2023-11-17 18:07:58.493 : INFO: instruction count: 81: __C239Compiled.__m857DECODE_r_struct_of_r_array_of_r_struct_of_r_struct_of_r_struct_of_r_binaryANDr_int32ENDANDr_array_of_r_binaryENDANDr_struct_of_r_struct_of_r_binaryANDr_int32ENDANDr_array_of_r_binaryENDANDr_boolANDr_boolENDANDr_binaryANDr_binaryANDr_struct_of_ENDANDr_struct_of_r_int32ANDr_int64ENDANDr_binaryANDr_binaryEND_TO_SBaseStructPointer
2023-11-17 18:07:58.493 : INFO: instruction count: 62: __C239Compiled.__m858INPLACE_DECODE_r_array_of_r_struct_of_r_struct_of_r_struct_of_r_binaryANDr_int32ENDANDr_array_of_r_binaryENDANDr_struct_of_r_struct_of_r_binaryANDr_int32ENDANDr_array_of_r_binaryENDANDr_boolANDr_boolEND_TO_r_array_of_r_interval_of_r_struct_of_r_locusANDr_array_of_r_stringEND
2023-11-17 18:07:58.494 : INFO: instruction count: 44: __C239Compiled.__m859INPLACE_DECODE_r_struct_of_r_struct_of_r_struct_of_r_binaryANDr_int32ENDANDr_array_of_r_binaryENDANDr_struct_of_r_struct_of_r_binaryANDr_int32ENDANDr_array_of_r_binaryENDANDr_boolANDr_boolEND_TO_r_interval_of_r_struct_of_r_locusANDr_array_of_r_stringEND
2023-11-17 18:07:58.494 : INFO: instruction count: 26: __C239Compiled.__m860INPLACE_DECODE_r_struct_of_r_struct_of_r_binaryANDr_int32ENDANDr_array_of_r_binaryEND_TO_r_struct_of_r_locusANDr_array_of_r_stringEND
2023-11-17 18:07:58.494 : INFO: instruction count: 26: __C239Compiled.__m861INPLACE_DECODE_r_struct_of_r_binaryANDr_int32END_TO_r_locus
2023-11-17 18:07:58.494 : INFO: instruction count: 31: __C239Compiled.__m862INPLACE_DECODE_r_binary_TO_r_string
2023-11-17 18:07:58.494 : INFO: instruction count: 10: __C239Compiled.__m863INPLACE_DECODE_r_int32_TO_r_int32
2023-11-17 18:07:58.494 : INFO: instruction count: 62: __C239Compiled.__m864INPLACE_DECODE_r_array_of_r_binary_TO_r_array_of_r_string
2023-11-17 18:07:58.494 : INFO: instruction count: 10: __C239Compiled.__m865INPLACE_DECODE_r_bool_TO_r_bool
2023-11-17 18:07:58.494 : INFO: instruction count: 8: __C239Compiled.__m866INPLACE_DECODE_r_struct_of_END_TO_r_struct_of_END
2023-11-17 18:07:58.494 : INFO: instruction count: 26: __C239Compiled.__m867INPLACE_DECODE_r_struct_of_r_int32ANDr_int64END_TO_r_tuple_of_r_int32ANDr_int64END
2023-11-17 18:07:58.494 : INFO: instruction count: 10: __C239Compiled.__m868INPLACE_DECODE_r_int64_TO_r_int64
2023-11-17 18:07:58.494 : INFO: instruction count: 217: __C239Compiled.__m869DECODE_o_array_of_o_struct_of_o_int32ANDo_int32END_TO_SIndexablePointer
2023-11-17 18:07:58.495 : INFO: instruction count: 75: __C239Compiled.__m871INPLACE_DECODE_o_struct_of_o_int32ANDo_int32END_TO_o_tuple_of_o_int32ANDo_int32END
2023-11-17 18:07:58.495 : INFO: instruction count: 217: __C239Compiled.__m872DECODE_o_array_of_o_int32_TO_SIndexablePointer
2023-11-17 18:07:58.496 : INFO: instruction count: 573: __C239Compiled.__m241split_ToArray_region16_67
2023-11-17 18:07:58.497 : INFO: instruction count: 760: __C239Compiled.__m313split_ToArray_region10_10
2023-11-17 18:07:58.497 : INFO: instruction count: 528: __C239Compiled.__m313split_ToArray_region10_11
2023-11-17 18:07:58.497 : INFO: instruction count: 3: __C891__m241split_ToArraySpills.<init>
2023-11-17 18:07:58.497 : INFO: instruction count: 3: __C896__m243split_ToArraySpills.<init>
2023-11-17 18:07:58.497 : INFO: instruction count: 3: __C898__m313split_ToArraySpills.<init>
2023-11-17 18:07:58.497 : INFO: instruction count: 3: __C920__m362split_CollectDistributedArraySpills.<init>
2023-11-17 18:07:58.498 : INFO: instruction count: 3: __C278staticWrapperClass_1.<init>
2023-11-17 18:07:58.498 : INFO: instruction count: 3: __C870Tuple3.<init>
2023-11-17 18:07:58.498 : INFO: instruction count: 12: __C870Tuple3.<init>
2023-11-17 18:07:58.510 : INFO: [collectDArray|table_head_recursive_count|iteration=0,nParts=4]: executing 4 tasks, contexts size = 296.00 B, globals size = 176.00 B
2023-11-17 18:07:59.274 : INFO: RegionPool: initialized for thread 85: Executor task launch worker for task 1.0 in stage 0.0 (TID 1)
2023-11-17 18:07:59.274 : INFO: RegionPool: initialized for thread 86: Executor task launch worker for task 2.0 in stage 0.0 (TID 2)
2023-11-17 18:07:59.274 : INFO: RegionPool: initialized for thread 87: Executor task launch worker for task 3.0 in stage 0.0 (TID 3)
2023-11-17 18:07:59.274 : INFO: RegionPool: initialized for thread 84: Executor task launch worker for task 0.0 in stage 0.0 (TID 0)
2023-11-17 18:07:59.285 : INFO: TaskReport: stage=0, partition=1, attempt=0, peakBytes=65536, peakBytesReadable=64.00 KiB, chunks requested=0, cache hits=0
2023-11-17 18:07:59.285 : INFO: TaskReport: stage=0, partition=0, attempt=0, peakBytes=65536, peakBytesReadable=64.00 KiB, chunks requested=0, cache hits=0
2023-11-17 18:07:59.285 : INFO: TaskReport: stage=0, partition=2, attempt=0, peakBytes=65536, peakBytesReadable=64.00 KiB, chunks requested=0, cache hits=0
2023-11-17 18:07:59.285 : INFO: TaskReport: stage=0, partition=3, attempt=0, peakBytes=65536, peakBytesReadable=64.00 KiB, chunks requested=0, cache hits=0
2023-11-17 18:07:59.286 : INFO: RegionPool: FREE: 64.0K allocated (64.0K blocks / 0 chunks), regions.size = 1, 0 current java objects, thread 85: Executor task launch worker for task 1.0 in stage 0.0 (TID 1)
2023-11-17 18:07:59.286 : INFO: RegionPool: FREE: 64.0K allocated (64.0K blocks / 0 chunks), regions.size = 1, 0 current java objects, thread 86: Executor task launch worker for task 2.0 in stage 0.0 (TID 2)
2023-11-17 18:07:59.286 : INFO: RegionPool: FREE: 64.0K allocated (64.0K blocks / 0 chunks), regions.size = 1, 0 current java objects, thread 87: Executor task launch worker for task 3.0 in stage 0.0 (TID 3)
2023-11-17 18:07:59.286 : INFO: RegionPool: FREE: 64.0K allocated (64.0K blocks / 0 chunks), regions.size = 1, 0 current java objects, thread 84: Executor task launch worker for task 0.0 in stage 0.0 (TID 0)
2023-11-17 18:07:59.384 : INFO: [collectDArray|table_head_recursive_count|iteration=0,nParts=4]: executed 4 tasks in 873.117ms
2023-11-17 18:07:59.385 : INFO: RegionPool: REPORT_THRESHOLD: 256.0K allocated (192.0K blocks / 64.0K chunks), regions.size = 3, 0 current java objects, thread 78: Thread-20
2023-11-17 18:07:59.387 : INFO: compiling and evaluating result: TableCollect
2023-11-17 18:07:59.392 : INFO: initial IR: IR size 407: 

%1 = RNGStateLiteral
!c0 = I32 [0] 
!c10 = I32 [10] 
!c1 = I32 [1]
!s = StreamRange(!c0, !c10, !c1) [1, False]
!s4 = StreamMap(!s) { (%elt) =>
  !2 = Cast(%elt) [Int64]
  %3 = MakeTuple(!2, %elt) [(0 1)]
  !4 = GetTupleElement(%3) [1] 
  !5 = EncodedLiteral [Array[Int32]]
  !s2 = ToStream(!5) [False]
  !s3 = StreamMap(!s2) { (%elt2) =>
    Cast(%elt2) [Float64]
  }
  !6 = ToArray(!s3) 
  !7 = GetTupleElement(%3) [0]
  !8 = RNGSplit(%1, !7)
  !9 = ApplySeeded(!6, !8) [rand_cat, 0, Int32]
  MakeStruct(sample_idx: !4, pop: !9)
}
!10 = ToArray(!s4)
%11 = MakeStruct(cols: !10)
%12 = Ref [__iruid_1048]
!13 = GetField(%12) [cols]
!s5 = ToStream(!13) [False] 
!c0_2 = I32 [0] 
!c1_2 = I32 [1]
!s6 = StreamIota(!c0_2, !c1_2) [False]
!s7 = StreamZip(!s5, !s6) [34, TakeMinLength] {
(%elt3, %elt4) =>
  !14 = Cast(%elt4) [Int64]
  InsertFields %elt3 (__col_uid: !14)
}
!15 = ToArray(!s7)
%16 = InsertFields %12 (cols: !15)
%17 = CastRename(%16) [Struct{__cols:Array[Struct{sample_idx:Int32,pop:Int32,__col_uid:Int64}]}]
%18 = Ref [__iruid_1054]
%19 = SelectFields(%18) [()]
%20 = CastRename(%19) [Struct{}]
!21 = Literal [Array[Struct{numberToTake:Int32,old:Tuple[Int32,Interval[Struct{locus:Locus(GRCh37),alleles:Array[String]}],Tuple[Int64,Tuple[Int32,Int32]]]}], <literal value>]
!s8 = ToStream(!21) [False] 
!22 = MakeStruct(__iruid_1048: %11, __iruid_1052: %16, __iruid_1054: %17, __iruid_1058: %19, __iruid_1059: %20) 
!23 = NA [String]
%174 = CollectDistributedArray(!s8, !22, !23) {
(%ctx, %g) =>
  %24 = GetField(%g) [__iruid_1059]
  %25 = GetField(%g) [__iruid_1058]
  %26 = GetField(%g) [__iruid_1054]
  %27 = GetField(%g) [__iruid_1052]
  %28 = GetField(%g) [__iruid_1048]
  %29 = Ref [__iruid_1059]
  %30 = GetField(%ctx) [old]
  %31 = Ref [__iruid_1059]
  %32 = Ref [__iruid_1060]
  %33 = Ref [__iruid_1054]
  %34 = Ref [__iruid_1055]
  %35 = Ref [__iruid_1052]
  %36 = GetTupleElement(%34) [1]
  %37 = GetTupleElement(%34) [2]
  %38 = RNGStateLiteral
  !c0_3 = I32 [0] 
  !c10_2 = I32 [10] 
  !c1_3 = I32 [1]
  !s9 = StreamRange(!c0_3, !c10_2, !c1_3) [1, False]
  !s12 = StreamMap(!s9) { (%elt5) =>
    !39 = Cast(%elt5) [Int64]
    %40 = MakeTuple(!39, %elt5) [(0 1)]
    !41 = GetTupleElement(%40) [1] 
    !42 = EncodedLiteral [Array[Int32]]
    !s10 = ToStream(!42) [False]
    !s11 = StreamMap(!s10) { (%elt6) =>
      Cast(%elt6) [Float64]
    }
    !43 = ToArray(!s11) 
    !44 = GetTupleElement(%40) [0]
    !45 = RNGSplit(%38, !44)
    !46 = ApplySeeded(!43, !45) [rand_cat, 0, Int32]
    MakeStruct(sample_idx: !41, pop: !46)
  }
  !47 = ToArray(!s12)
  %48 = MakeStruct(cols: !47)
  %49 = GetTupleElement(%37) [0]
  !c0_4 = I32 [0] 
  !c1_4 = I32 [1]
  !s13 = StreamIota(!c0_4, !c1_4) [False] 
  !50 = RNGStateLiteral
  %51 = RNGSplit(!50, %49)
  %52 = GetTupleElement(%37) [1]
  !53 = GetTupleElement(%52) [0] 
  !54 = GetTupleElement(%52) [1] 
  !c1_5 = I32 [1]
  !s14 = StreamRange(!53, !54, !c1_5) [3, False]
  !s20 = StreamMap(!s14) { (%elt7) =>
    !55 = Cast(%elt7) [Int64]
    %56 = MakeTuple(!55, %elt7) [(0 1)]
    !57 = GetTupleElement(%56) [0]
    %58 = RNGSplit(%51, !57)
    !59 = F64 [0.1] 
    !60 = F64 [0.9]
    %61 = ApplySeeded(!59, !60, %58) [rand_unif, -1, Float64]
    !62 = GetTupleElement(%56) [1]
    !63 = Cast(!62) [Int64]
    !64 = Apply(!63) [5, globalPosToLocus, 
    (), Locus(GRCh37)] 
    !65 = EncodedLiteral [Array[String]] 
    !66 = EncodedLiteral [Array[Float64]]
    !s15 = ToStream(!66) [False] 
    !c0_5 = I32 [0] 
    !c1_6 = I32 [1]
    !s16 = StreamIota(!c0_5, !c1_6) [False]
    !s17 = StreamZip(!s15, !s16) [7, TakeMinLength] {
    (%elt8, %elt9) =>
      !67 = Cast(%elt9) [Int64]
      %68 = MakeTuple(!67, %elt8) [(0 1)]
      %69 = GetTupleElement(%68) [1]
      !70 = ApplyBinaryPrimOp(%61, %69) [Multiply] 
      !71 = F64 [1.0]
      !72 = ApplyBinaryPrimOp(!71, %61) [Subtract]
      !73 = ApplyBinaryPrimOp(!72, %69) [Multiply] 
      !74 = GetTupleElement(%68) [0]
      !75 = RNGSplit(%58, !74)
      ApplySeeded(!70, !73, !75) [rand_beta, 1, Float64]
    }
    !76 = ToArray(!s17) 
    !c0_6 = I32 [0] 
    !c10_3 = I32 [10] 
    !c1_7 = I32 [1]
    !s18 = StreamRange(!c0_6, !c10_3, !c1_7) [8, False]
    !s19 = StreamMap(!s18) { (%elt10) =>
      Literal [Struct{}, <literal value>]
    }
    !77 = ToArray(!s19)
    MakeStruct(locus: !64, alleles: !65, af: !76, entries: !77)
  }
  !s21 = StreamZip(!s13, !s20) [36, TakeMinLength] {
  (%elt11, %elt12) =>
    !78 = Cast(%elt11) [Int64]
    !79 = MakeTuple(%49, !78) [(0 1)]
    InsertFields %elt12 (__row_uid: !79)
  }
  !s22 = StreamMap(!s21) { (%elt13) =>
    !80 = SelectFields(%elt13) [(locus alleles)]
    !81 = ApplySpecial(%36, !80) [-1, contains, 
    (), Boolean]
    If !81 then { %elt13 } else {
      !82 = Str ["TableGen: ..."] 
      !83 = GetTupleElement(%34) [0]
      !84 = Apply(!83) [-1, str, (), String]
      !85 = Apply(!82, !84) [-1, concat, (), String] 
      !86 = Str ["\n\tRange bo..."]
      !87 = Apply(!85, !86) [-1, concat, (), String] 
      !88 = GetTupleElement(%34) [0]
      !89 = Apply(!88) [-1, str, (), String]
      !90 = Apply(!87, !89) [-1, concat, (), String] 
      !91 = Str [": "]
      !92 = Apply(!90, !91) [-1, concat, (), String] 
      !93 = Apply(%36) [-1, str, (), String]
      !94 = Apply(!92, !93) [-1, concat, (), String] 
      !95 = Str ["\n\tInvalid ..."]
      !96 = Apply(!94, !95) [-1, concat, (), String] 
      !97 = SelectFields(%elt13) [(locus alleles)]
      !98 = Apply(!97) [-1, str, (), String]
      !99 = Apply(!96, !98) [-1, concat, (), String]
      Die(!99) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, 9]
    }
  }
  !s23 = StreamMap(!s22) { (%elt14) =>
    %100 = Ref [__iruid_1053]
    %101 = GetField(%100) [entries]
    !102 = IsNA(%101)
    If !102 then {
      !103 = Str ["missing en..."]
      Die(!103) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, -1]
    } else {
      !104 = GetField(%35) [cols]
      %105 = ArrayLen(!104)
      %106 = ArrayLen(%101)
      !107 = ApplyComparisonOp(%106, %105) [NEQWithNA]
      If !107 then {
        !108 = Str ["length mis..."] 
        !109 = Apply(%106) [-1, str, (), String]
        !110 = Apply(!108, !109) [-1, concat, (), String] 
        !111 = Str [" entries, "]
        !112 = Apply(!110, !111) [-1, concat, (), String] 
        !113 = Apply(%105) [-1, str, (), String]
        !114 = Apply(!112, !113) [-1, concat, (), String] 
        !115 = Str [" cols, at "]
        !116 = Apply(!114, !115) [-1, concat, (), String] 
        !117 = SelectFields(%100) [(locus alleles)]
        !118 = Apply(!117) [-1, str, (), String]
        !119 = Apply(!116, !118) [-1, concat, (), String]
        Die(!119) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, -1]
      } else { %100 }
    }
  }
  !s24 = StreamMap(!s23) { (%elt15) =>
    CastRename(%elt15) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],`the entries! [877f12a8827e18f61222c6c8c5fb04a8]`:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}]
  }
  !s28 = StreamMap(!s24) { (%elt16) =>
    %120 = Ref [__iruid_1057]
    !121 = SelectFields(%120) [(locus alleles)] 
    !122 = GetField(%120) [`the entries! [877f12a8827e18f61222c6c8c5fb04a8]`]
    !s25 = ToStream(!122) [False] 
    !123 = GetField(%33) [__cols]
    !s26 = ToStream(!123) [False]
    !s27 = StreamZip(!s25, !s26) [-1, AssumeSameLength] {
    (%elt17, %elt18) =>
      %124 = GetField(%120) [__row_uid]
      !125 = GetField(%120) [af] 
      !126 = GetField(%elt18) [pop]
      %127 = ApplyIR(!125, !126) [10, indexArray, 
      (), Float64]
      !128 = F64 [1.0]
      %129 = ApplyBinaryPrimOp(!128, %127) [Subtract]
      !130 = F64 [2.0]
      !131 = Apply(%129, !130) [13, pow, (), Float64] 
      !132 = F64 [2.0]
      !133 = ApplyBinaryPrimOp(!132, %127) [Multiply]
      !134 = ApplyBinaryPrimOp(!133, %129) [Multiply] 
      !135 = F64 [2.0]
      !136 = Apply(%127, !135) [16, pow, (), Float64]
      !137 = MakeArray(!131, !134, !136) [Array[Float64]] 
      !138 = RNGStateLiteral 
      !139 = GetTupleElement(%124) [0] 
      !140 = GetTupleElement(%124) [1] 
      !141 = GetField(%elt18) [__col_uid]
      !142 = MakeTuple(!139, !140, !141) [(0 1 2)]
      !143 = RNGSplit(!138, !142)
      !144 = ApplySeeded(!137, !143) [rand_cat, 2, Int32]
      !145 = Apply(!144) [17, UnphasedDiploidGtIndexCall, 
      (), Call]
      InsertFields %elt17 (GT: !145)
    }
    !146 = ToArray(!s27)
    InsertFields !121 (the entries! [877f12a8827e18f61222c6c8c5fb04a8]: !146)
  }
  !s29 = StreamMap(!s28) { (%elt19) =>
    CastRename(%elt19) [Struct{locus:Locus(GRCh37),alleles:Array[String],entries:Array[Struct{GT:Call}]}]
  }
  !s30 = StreamMap(!s29) { (%elt20) =>
    %147 = Ref [__iruid_1062]
    %148 = GetField(%147) [entries]
    !149 = SelectFields(%147) [(locus alleles)] 
    !c0_7 = I32 [0]
    !150 = ArrayRef(%148, !c0_7) [24] 
    !c1_8 = I32 [1]
    !151 = ArrayRef(%148, !c1_8) [25] 
    !c2 = I32 [2]
    !152 = ArrayRef(%148, !c2) [26] 
    !c3 = I32 [3]
    !153 = ArrayRef(%148, !c3) [27]
    InsertFields !149 (0: !150, 1: !151, 2: !152, 3: !153)
  } 
  !154 = GetField(%ctx) [numberToTake]
  !s31 = StreamTake(!s30, !154)
  !s32 = StreamMap(!s31) { (%elt21) =>
    %155 = Ref [__iruid_2679]
    %156 = SelectFields(%155) [(locus alleles)]
    !157 = SelectFields(%156) [()] 
    !158 = GetField(%156) [locus]
    !159 = ApplySpecial(!158) [28, showStr, 
    (), String] 
    !160 = GetField(%156) [alleles]
    !161 = ApplySpecial(!160) [29, showStr, 
    (), String] 
    !162 = GetField(%155) [`0`]
    !163 = GetField(!162) [GT]
    !164 = ApplySpecial(!163) [30, showStr, 
    (), String] 
    !165 = GetField(%155) [`1`]
    !166 = GetField(!165) [GT]
    !167 = ApplySpecial(!166) [31, showStr, 
    (), String] 
    !168 = GetField(%155) [`2`]
    !169 = GetField(!168) [GT]
    !170 = ApplySpecial(!169) [32, showStr, 
    (), String] 
    !171 = GetField(%155) [`3`]
    !172 = GetField(!171) [GT]
    !173 = ApplySpecial(!172) [33, showStr, 
    (), String]
    InsertFields !157 (locus: !159, alleles: !161, 0.GT: !164, 1.GT: !167, 2.GT: !170, 3.GT: !173)
  }
  ToArray(!s32)
}
!s33 = ToStream(%174) [False]
!s34 = StreamFlatMap(!s33) { (%elt22) =>
  ToStream(%elt22) [False]
}
!175 = ToArray(!s34)
MakeStruct(rows: !175, global: %20)

2023-11-17 18:07:59.421 : INFO: Prune: MakeStruct: eliminating field '__iruid_1048'
2023-11-17 18:07:59.421 : INFO: Prune: MakeStruct: eliminating field '__iruid_1058'
2023-11-17 18:07:59.444 : INFO: Prune: MakeStruct: eliminating field '__iruid_1059'
2023-11-17 18:07:59.444 : INFO: Prune: MakeStruct: eliminating field '__iruid_1059'
2023-11-17 18:07:59.468 : INFO: after optimize: relationalLowerer, initial IR: IR size 361: 

%1 = RNGStateLiteral
!c0 = I32 [0] 
!c10 = I32 [10] 
!c1 = I32 [1]
!s = StreamRange(!c0, !c10, !c1) [1, False]
!s4 = StreamMap(!s) { (%elt) =>
  !2 = Cast(%elt) [Int64]
  %3 = MakeTuple(!2, %elt) [(0 1)]
  !4 = GetTupleElement(%3) [1] 
  !5 = EncodedLiteral [Array[Int32]]
  !s2 = ToStream(!5) [False]
  !s3 = StreamMap(!s2) { (%elt2) =>
    Cast(%elt2) [Float64]
  }
  !6 = ToArray(!s3) 
  !7 = GetTupleElement(%3) [0]
  !8 = RNGSplit(%1, !7)
  !9 = ApplySeeded(!6, !8) [rand_cat, 0, Int32]
  MakeStruct(sample_idx: !4, pop: !9)
}
!10 = ToArray(!s4)
%11 = MakeStruct(cols: !10)
!12 = GetField(%11) [cols]
!s5 = ToStream(!12) [False] 
!c0_2 = I32 [0] 
!c1_2 = I32 [1]
!s6 = StreamIota(!c0_2, !c1_2) [False]
!s7 = StreamZip(!s5, !s6) [34, TakeMinLength] {
(%elt3, %elt4) =>
  !13 = Cast(%elt4) [Int64]
  InsertFields %elt3 (__col_uid: !13)
}
!14 = ToArray(!s7)
%15 = InsertFields %11 (cols: !14)
%16 = CastRename(%15) [Struct{__cols:Array[Struct{sample_idx:Int32,pop:Int32,__col_uid:Int64}]}]
!17 = Literal [Array[Struct{numberToTake:Int32,old:Tuple[Int32,Interval[Struct{locus:Locus(GRCh37),alleles:Array[String]}],Tuple[Int64,Tuple[Int32,Int32]]]}], <literal value>]
!s8 = ToStream(!17) [False] 
%18 = MakeStruct(__iruid_1052: %15, __iruid_1054: %16)
!19 = IsNA(%18)
!27 = If !19 then {
  NA [Struct{__iruid_1052:Struct{cols:Array[Struct{}]},__iruid_1054:Struct{__cols:Array[Struct{sample_idx:Int32,pop:Int32,__col_uid:Int64}]}}]
} else {
  %20 = GetField(%18) [__iruid_1052]
  !21 = IsNA(%20)
  !25 = If !21 then {
    NA [Struct{cols:Array[Struct{}]}]
  } else {
    !22 = GetField(%20) [cols]
    !s9 = ToStream(!22) [False]
    !s10 = StreamMap(!s9) { (%elt5) =>
      !23 = IsNA(%elt5)
      If !23 then {
        NA [Struct{}]
      } else {
        Literal [Struct{}, <literal value>]
      }
    }
    !24 = ToArray(!s10)
    MakeStruct(cols: !24)
  } 
  !26 = GetField(%18) [__iruid_1054]
  MakeStruct(__iruid_1052: !25, __iruid_1054: !26)
} 
!28 = NA [String]
!157 = CollectDistributedArray(!s8, !27, !28) {
(%ctx, %g) =>
  %29 = GetField(%g) [__iruid_1054]
  %30 = GetField(%ctx) [old]
  %31 = GetField(%g) [__iruid_1052]
  %32 = GetTupleElement(%30) [1]
  %33 = GetTupleElement(%30) [2]
  %34 = GetTupleElement(%33) [0]
  !c0_3 = I32 [0] 
  !c1_3 = I32 [1]
  !s11 = StreamIota(!c0_3, !c1_3) [False] 
  !35 = RNGStateLiteral
  %36 = RNGSplit(!35, %34)
  %37 = GetTupleElement(%33) [1]
  !38 = GetTupleElement(%37) [0] 
  !39 = GetTupleElement(%37) [1] 
  !c1_4 = I32 [1]
  !s12 = StreamRange(!38, !39, !c1_4) [3, False]
  !s18 = StreamMap(!s12) { (%elt6) =>
    !40 = Cast(%elt6) [Int64]
    %41 = MakeTuple(!40, %elt6) [(0 1)]
    !42 = GetTupleElement(%41) [0]
    %43 = RNGSplit(%36, !42)
    !44 = F64 [0.1] 
    !45 = F64 [0.9]
    %46 = ApplySeeded(!44, !45, %43) [rand_unif, -1, Float64]
    !47 = GetTupleElement(%41) [1]
    !48 = Cast(!47) [Int64]
    !49 = Apply(!48) [5, globalPosToLocus, 
    (), Locus(GRCh37)] 
    !50 = EncodedLiteral [Array[String]] 
    !51 = EncodedLiteral [Array[Float64]]
    !s13 = ToStream(!51) [False] 
    !c0_4 = I32 [0] 
    !c1_5 = I32 [1]
    !s14 = StreamIota(!c0_4, !c1_5) [False]
    !s15 = StreamZip(!s13, !s14) [7, TakeMinLength] {
    (%elt7, %elt8) =>
      !52 = Cast(%elt8) [Int64]
      %53 = MakeTuple(!52, %elt7) [(0 1)]
      %54 = GetTupleElement(%53) [1]
      !55 = ApplyBinaryPrimOp(%46, %54) [Multiply] 
      !56 = F64 [1.0]
      !57 = ApplyBinaryPrimOp(!56, %46) [Subtract]
      !58 = ApplyBinaryPrimOp(!57, %54) [Multiply] 
      !59 = GetTupleElement(%53) [0]
      !60 = RNGSplit(%43, !59)
      ApplySeeded(!55, !58, !60) [rand_beta, 1, Float64]
    }
    !61 = ToArray(!s15) 
    !c0_5 = I32 [0] 
    !c10_2 = I32 [10] 
    !c1_6 = I32 [1]
    !s16 = StreamRange(!c0_5, !c10_2, !c1_6) [8, False]
    !s17 = StreamMap(!s16) { (%elt9) =>
      Literal [Struct{}, <literal value>]
    }
    !62 = ToArray(!s17)
    MakeStruct(locus: !49, alleles: !50, af: !61, entries: !62)
  }
  !s19 = StreamZip(!s11, !s18) [36, TakeMinLength] {
  (%elt10, %elt11) =>
    !63 = Cast(%elt10) [Int64]
    !64 = MakeTuple(%34, !63) [(0 1)]
    InsertFields %elt11 (__row_uid: !64)
  }
  !s20 = StreamMap(!s19) { (%elt12) =>
    !65 = SelectFields(%elt12) [(locus alleles)]
    !66 = ApplySpecial(%32, !65) [-1, contains, 
    (), Boolean]
    If !66 then { %elt12 } else {
      !67 = Str ["TableGen: ..."] 
      !68 = GetTupleElement(%30) [0]
      !69 = Apply(!68) [-1, str, (), String]
      !70 = Apply(!67, !69) [-1, concat, (), String] 
      !71 = Str ["\n\tRange bo..."]
      !72 = Apply(!70, !71) [-1, concat, (), String] 
      !73 = GetTupleElement(%30) [0]
      !74 = Apply(!73) [-1, str, (), String]
      !75 = Apply(!72, !74) [-1, concat, (), String] 
      !76 = Str [": "]
      !77 = Apply(!75, !76) [-1, concat, (), String] 
      !78 = Apply(%32) [-1, str, (), String]
      !79 = Apply(!77, !78) [-1, concat, (), String] 
      !80 = Str ["\n\tInvalid ..."]
      !81 = Apply(!79, !80) [-1, concat, (), String] 
      !82 = SelectFields(%elt12) [(locus alleles)]
      !83 = Apply(!82) [-1, str, (), String]
      !84 = Apply(!81, !83) [-1, concat, (), String]
      Die(!84) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, 9]
    }
  }
  !s21 = StreamMap(!s20) { (%elt13) =>
    %85 = GetField(%elt13) [entries]
    !86 = IsNA(%85)
    If !86 then {
      !87 = Str ["missing en..."]
      Die(!87) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, -1]
    } else {
      !88 = GetField(%31) [cols]
      %89 = ArrayLen(!88)
      %90 = ArrayLen(%85)
      !91 = ApplyComparisonOp(%90, %89) [NEQWithNA]
      If !91 then {
        !92 = Str ["length mis..."] 
        !93 = Apply(%90) [-1, str, (), String]
        !94 = Apply(!92, !93) [-1, concat, (), String] 
        !95 = Str [" entries, "]
        !96 = Apply(!94, !95) [-1, concat, (), String] 
        !97 = Apply(%89) [-1, str, (), String]
        !98 = Apply(!96, !97) [-1, concat, (), String] 
        !99 = Str [" cols, at "]
        !100 = Apply(!98, !99) [-1, concat, (), String] 
        !101 = SelectFields(%elt13) [(locus alleles)]
        !102 = Apply(!101) [-1, str, (), String]
        !103 = Apply(!100, !102) [-1, concat, (), String]
        Die(!103) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, -1]
      } else { %elt13 }
    }
  }
  !s25 = StreamMap(!s21) { (%elt14) =>
    %104 = CastRename(%elt14) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],`the entries! [877f12a8827e18f61222c6c8c5fb04a8]`:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}]
    !105 = SelectFields(%104) [(locus alleles)] 
    !106 = GetField(%104) [`the entries! [877f12a8827e18f61222c6c8c5fb04a8]`]
    !s22 = ToStream(!106) [False] 
    !107 = GetField(%29) [__cols]
    !s23 = ToStream(!107) [False]
    !s24 = StreamZip(!s22, !s23) [-1, AssumeSameLength] {
    (%elt15, %elt16) =>
      %108 = GetField(%104) [__row_uid]
      !109 = GetField(%104) [af] 
      !110 = GetField(%elt16) [pop]
      %111 = ApplyIR(!109, !110) [10, indexArray, 
      (), Float64]
      !112 = F64 [1.0]
      %113 = ApplyBinaryPrimOp(!112, %111) [Subtract]
      !114 = F64 [2.0]
      !115 = Apply(%113, !114) [13, pow, (), Float64] 
      !116 = F64 [2.0]
      !117 = ApplyBinaryPrimOp(!116, %111) [Multiply]
      !118 = ApplyBinaryPrimOp(!117, %113) [Multiply] 
      !119 = F64 [2.0]
      !120 = Apply(%111, !119) [16, pow, (), Float64]
      !121 = MakeArray(!115, !118, !120) [Array[Float64]] 
      !122 = RNGStateLiteral 
      !123 = GetTupleElement(%108) [0] 
      !124 = GetTupleElement(%108) [1] 
      !125 = GetField(%elt16) [__col_uid]
      !126 = MakeTuple(!123, !124, !125) [(0 1 2)]
      !127 = RNGSplit(!122, !126)
      !128 = ApplySeeded(!121, !127) [rand_cat, 2, Int32]
      !129 = Apply(!128) [17, UnphasedDiploidGtIndexCall, 
      (), Call]
      InsertFields %elt15 (GT: !129)
    }
    !130 = ToArray(!s24)
    InsertFields !105 (the entries! [877f12a8827e18f61222c6c8c5fb04a8]: !130)
  }
  !s26 = StreamMap(!s25) { (%elt17) =>
    %131 = CastRename(%elt17) [Struct{locus:Locus(GRCh37),alleles:Array[String],entries:Array[Struct{GT:Call}]}]
    %132 = GetField(%131) [entries]
    !133 = SelectFields(%131) [(locus alleles)] 
    !c0_6 = I32 [0]
    !134 = ArrayRef(%132, !c0_6) [24] 
    !c1_7 = I32 [1]
    !135 = ArrayRef(%132, !c1_7) [25] 
    !c2 = I32 [2]
    !136 = ArrayRef(%132, !c2) [26] 
    !c3 = I32 [3]
    !137 = ArrayRef(%132, !c3) [27]
    InsertFields !133 (0: !134, 1: !135, 2: !136, 3: !137)
  } 
  !138 = GetField(%ctx) [numberToTake]
  !s27 = StreamTake(!s26, !138)
  !s28 = StreamMap(!s27) { (%elt18) =>
    %139 = SelectFields(%elt18) [(locus alleles)]
    !140 = SelectFields(%139) [()] 
    !141 = GetField(%139) [locus]
    !142 = ApplySpecial(!141) [28, showStr, 
    (), String] 
    !143 = GetField(%139) [alleles]
    !144 = ApplySpecial(!143) [29, showStr, 
    (), String] 
    !145 = GetField(%elt18) [`0`]
    !146 = GetField(!145) [GT]
    !147 = ApplySpecial(!146) [30, showStr, 
    (), String] 
    !148 = GetField(%elt18) [`1`]
    !149 = GetField(!148) [GT]
    !150 = ApplySpecial(!149) [31, showStr, 
    (), String] 
    !151 = GetField(%elt18) [`2`]
    !152 = GetField(!151) [GT]
    !153 = ApplySpecial(!152) [32, showStr, 
    (), String] 
    !154 = GetField(%elt18) [`3`]
    !155 = GetField(!154) [GT]
    !156 = ApplySpecial(!155) [33, showStr, 
    (), String]
    InsertFields !140 (locus: !142, alleles: !144, 0.GT: !147, 1.GT: !150, 2.GT: !153, 3.GT: !156)
  }
  ToArray(!s28)
}
!s29 = ToStream(!157) [False]
!s30 = StreamFlatMap(!s29) { (%elt19) =>
  ToStream(%elt19) [False]
}
!158 = ToArray(!s30) 
!159 = SelectFields(%16) [()]
MakeStruct(rows: !158, global: !159)

2023-11-17 18:07:59.474 : INFO: after LowerMatrixToTable: IR size 361: 

%1 = RNGStateLiteral
!c0 = I32 [0] 
!c10 = I32 [10] 
!c1 = I32 [1]
!s = StreamRange(!c0, !c10, !c1) [1, False]
!s4 = StreamMap(!s) { (%elt) =>
  !2 = Cast(%elt) [Int64]
  %3 = MakeTuple(!2, %elt) [(0 1)]
  !4 = GetTupleElement(%3) [1] 
  !5 = EncodedLiteral [Array[Int32]]
  !s2 = ToStream(!5) [False]
  !s3 = StreamMap(!s2) { (%elt2) =>
    Cast(%elt2) [Float64]
  }
  !6 = ToArray(!s3) 
  !7 = GetTupleElement(%3) [0]
  !8 = RNGSplit(%1, !7)
  !9 = ApplySeeded(!6, !8) [rand_cat, 0, Int32]
  MakeStruct(sample_idx: !4, pop: !9)
}
!10 = ToArray(!s4)
%11 = MakeStruct(cols: !10)
!12 = GetField(%11) [cols]
!s5 = ToStream(!12) [False] 
!c0_2 = I32 [0] 
!c1_2 = I32 [1]
!s6 = StreamIota(!c0_2, !c1_2) [False]
!s7 = StreamZip(!s5, !s6) [34, TakeMinLength] {
(%elt3, %elt4) =>
  !13 = Cast(%elt4) [Int64]
  InsertFields %elt3 (__col_uid: !13)
}
!14 = ToArray(!s7)
%15 = InsertFields %11 (cols: !14)
%16 = CastRename(%15) [Struct{__cols:Array[Struct{sample_idx:Int32,pop:Int32,__col_uid:Int64}]}]
!17 = Literal [Array[Struct{numberToTake:Int32,old:Tuple[Int32,Interval[Struct{locus:Locus(GRCh37),alleles:Array[String]}],Tuple[Int64,Tuple[Int32,Int32]]]}], <literal value>]
!s8 = ToStream(!17) [False] 
%18 = MakeStruct(__iruid_1052: %15, __iruid_1054: %16)
!19 = IsNA(%18)
!27 = If !19 then {
  NA [Struct{__iruid_1052:Struct{cols:Array[Struct{}]},__iruid_1054:Struct{__cols:Array[Struct{sample_idx:Int32,pop:Int32,__col_uid:Int64}]}}]
} else {
  %20 = GetField(%18) [__iruid_1052]
  !21 = IsNA(%20)
  !25 = If !21 then {
    NA [Struct{cols:Array[Struct{}]}]
  } else {
    !22 = GetField(%20) [cols]
    !s9 = ToStream(!22) [False]
    !s10 = StreamMap(!s9) { (%elt5) =>
      !23 = IsNA(%elt5)
      If !23 then {
        NA [Struct{}]
      } else {
        Literal [Struct{}, <literal value>]
      }
    }
    !24 = ToArray(!s10)
    MakeStruct(cols: !24)
  } 
  !26 = GetField(%18) [__iruid_1054]
  MakeStruct(__iruid_1052: !25, __iruid_1054: !26)
} 
!28 = NA [String]
!157 = CollectDistributedArray(!s8, !27, !28) {
(%ctx, %g) =>
  %29 = GetField(%g) [__iruid_1054]
  %30 = GetField(%ctx) [old]
  %31 = GetField(%g) [__iruid_1052]
  %32 = GetTupleElement(%30) [1]
  %33 = GetTupleElement(%30) [2]
  %34 = GetTupleElement(%33) [0]
  !c0_3 = I32 [0] 
  !c1_3 = I32 [1]
  !s11 = StreamIota(!c0_3, !c1_3) [False] 
  !35 = RNGStateLiteral
  %36 = RNGSplit(!35, %34)
  %37 = GetTupleElement(%33) [1]
  !38 = GetTupleElement(%37) [0] 
  !39 = GetTupleElement(%37) [1] 
  !c1_4 = I32 [1]
  !s12 = StreamRange(!38, !39, !c1_4) [3, False]
  !s18 = StreamMap(!s12) { (%elt6) =>
    !40 = Cast(%elt6) [Int64]
    %41 = MakeTuple(!40, %elt6) [(0 1)]
    !42 = GetTupleElement(%41) [0]
    %43 = RNGSplit(%36, !42)
    !44 = F64 [0.1] 
    !45 = F64 [0.9]
    %46 = ApplySeeded(!44, !45, %43) [rand_unif, -1, Float64]
    !47 = GetTupleElement(%41) [1]
    !48 = Cast(!47) [Int64]
    !49 = Apply(!48) [5, globalPosToLocus, 
    (), Locus(GRCh37)] 
    !50 = EncodedLiteral [Array[String]] 
    !51 = EncodedLiteral [Array[Float64]]
    !s13 = ToStream(!51) [False] 
    !c0_4 = I32 [0] 
    !c1_5 = I32 [1]
    !s14 = StreamIota(!c0_4, !c1_5) [False]
    !s15 = StreamZip(!s13, !s14) [7, TakeMinLength] {
    (%elt7, %elt8) =>
      !52 = Cast(%elt8) [Int64]
      %53 = MakeTuple(!52, %elt7) [(0 1)]
      %54 = GetTupleElement(%53) [1]
      !55 = ApplyBinaryPrimOp(%46, %54) [Multiply] 
      !56 = F64 [1.0]
      !57 = ApplyBinaryPrimOp(!56, %46) [Subtract]
      !58 = ApplyBinaryPrimOp(!57, %54) [Multiply] 
      !59 = GetTupleElement(%53) [0]
      !60 = RNGSplit(%43, !59)
      ApplySeeded(!55, !58, !60) [rand_beta, 1, Float64]
    }
    !61 = ToArray(!s15) 
    !c0_5 = I32 [0] 
    !c10_2 = I32 [10] 
    !c1_6 = I32 [1]
    !s16 = StreamRange(!c0_5, !c10_2, !c1_6) [8, False]
    !s17 = StreamMap(!s16) { (%elt9) =>
      Literal [Struct{}, <literal value>]
    }
    !62 = ToArray(!s17)
    MakeStruct(locus: !49, alleles: !50, af: !61, entries: !62)
  }
  !s19 = StreamZip(!s11, !s18) [36, TakeMinLength] {
  (%elt10, %elt11) =>
    !63 = Cast(%elt10) [Int64]
    !64 = MakeTuple(%34, !63) [(0 1)]
    InsertFields %elt11 (__row_uid: !64)
  }
  !s20 = StreamMap(!s19) { (%elt12) =>
    !65 = SelectFields(%elt12) [(locus alleles)]
    !66 = ApplySpecial(%32, !65) [-1, contains, 
    (), Boolean]
    If !66 then { %elt12 } else {
      !67 = Str ["TableGen: ..."] 
      !68 = GetTupleElement(%30) [0]
      !69 = Apply(!68) [-1, str, (), String]
      !70 = Apply(!67, !69) [-1, concat, (), String] 
      !71 = Str ["\n\tRange bo..."]
      !72 = Apply(!70, !71) [-1, concat, (), String] 
      !73 = GetTupleElement(%30) [0]
      !74 = Apply(!73) [-1, str, (), String]
      !75 = Apply(!72, !74) [-1, concat, (), String] 
      !76 = Str [": "]
      !77 = Apply(!75, !76) [-1, concat, (), String] 
      !78 = Apply(%32) [-1, str, (), String]
      !79 = Apply(!77, !78) [-1, concat, (), String] 
      !80 = Str ["\n\tInvalid ..."]
      !81 = Apply(!79, !80) [-1, concat, (), String] 
      !82 = SelectFields(%elt12) [(locus alleles)]
      !83 = Apply(!82) [-1, str, (), String]
      !84 = Apply(!81, !83) [-1, concat, (), String]
      Die(!84) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, 9]
    }
  }
  !s21 = StreamMap(!s20) { (%elt13) =>
    %85 = GetField(%elt13) [entries]
    !86 = IsNA(%85)
    If !86 then {
      !87 = Str ["missing en..."]
      Die(!87) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, -1]
    } else {
      !88 = GetField(%31) [cols]
      %89 = ArrayLen(!88)
      %90 = ArrayLen(%85)
      !91 = ApplyComparisonOp(%90, %89) [NEQWithNA]
      If !91 then {
        !92 = Str ["length mis..."] 
        !93 = Apply(%90) [-1, str, (), String]
        !94 = Apply(!92, !93) [-1, concat, (), String] 
        !95 = Str [" entries, "]
        !96 = Apply(!94, !95) [-1, concat, (), String] 
        !97 = Apply(%89) [-1, str, (), String]
        !98 = Apply(!96, !97) [-1, concat, (), String] 
        !99 = Str [" cols, at "]
        !100 = Apply(!98, !99) [-1, concat, (), String] 
        !101 = SelectFields(%elt13) [(locus alleles)]
        !102 = Apply(!101) [-1, str, (), String]
        !103 = Apply(!100, !102) [-1, concat, (), String]
        Die(!103) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, -1]
      } else { %elt13 }
    }
  }
  !s25 = StreamMap(!s21) { (%elt14) =>
    %104 = CastRename(%elt14) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],`the entries! [877f12a8827e18f61222c6c8c5fb04a8]`:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}]
    !105 = SelectFields(%104) [(locus alleles)] 
    !106 = GetField(%104) [`the entries! [877f12a8827e18f61222c6c8c5fb04a8]`]
    !s22 = ToStream(!106) [False] 
    !107 = GetField(%29) [__cols]
    !s23 = ToStream(!107) [False]
    !s24 = StreamZip(!s22, !s23) [-1, AssumeSameLength] {
    (%elt15, %elt16) =>
      %108 = GetField(%104) [__row_uid]
      !109 = GetField(%104) [af] 
      !110 = GetField(%elt16) [pop]
      %111 = ApplyIR(!109, !110) [10, indexArray, 
      (), Float64]
      !112 = F64 [1.0]
      %113 = ApplyBinaryPrimOp(!112, %111) [Subtract]
      !114 = F64 [2.0]
      !115 = Apply(%113, !114) [13, pow, (), Float64] 
      !116 = F64 [2.0]
      !117 = ApplyBinaryPrimOp(!116, %111) [Multiply]
      !118 = ApplyBinaryPrimOp(!117, %113) [Multiply] 
      !119 = F64 [2.0]
      !120 = Apply(%111, !119) [16, pow, (), Float64]
      !121 = MakeArray(!115, !118, !120) [Array[Float64]] 
      !122 = RNGStateLiteral 
      !123 = GetTupleElement(%108) [0] 
      !124 = GetTupleElement(%108) [1] 
      !125 = GetField(%elt16) [__col_uid]
      !126 = MakeTuple(!123, !124, !125) [(0 1 2)]
      !127 = RNGSplit(!122, !126)
      !128 = ApplySeeded(!121, !127) [rand_cat, 2, Int32]
      !129 = Apply(!128) [17, UnphasedDiploidGtIndexCall, 
      (), Call]
      InsertFields %elt15 (GT: !129)
    }
    !130 = ToArray(!s24)
    InsertFields !105 (the entries! [877f12a8827e18f61222c6c8c5fb04a8]: !130)
  }
  !s26 = StreamMap(!s25) { (%elt17) =>
    %131 = CastRename(%elt17) [Struct{locus:Locus(GRCh37),alleles:Array[String],entries:Array[Struct{GT:Call}]}]
    %132 = GetField(%131) [entries]
    !133 = SelectFields(%131) [(locus alleles)] 
    !c0_6 = I32 [0]
    !134 = ArrayRef(%132, !c0_6) [24] 
    !c1_7 = I32 [1]
    !135 = ArrayRef(%132, !c1_7) [25] 
    !c2 = I32 [2]
    !136 = ArrayRef(%132, !c2) [26] 
    !c3 = I32 [3]
    !137 = ArrayRef(%132, !c3) [27]
    InsertFields !133 (0: !134, 1: !135, 2: !136, 3: !137)
  } 
  !138 = GetField(%ctx) [numberToTake]
  !s27 = StreamTake(!s26, !138)
  !s28 = StreamMap(!s27) { (%elt18) =>
    %139 = SelectFields(%elt18) [(locus alleles)]
    !140 = SelectFields(%139) [()] 
    !141 = GetField(%139) [locus]
    !142 = ApplySpecial(!141) [28, showStr, 
    (), String] 
    !143 = GetField(%139) [alleles]
    !144 = ApplySpecial(!143) [29, showStr, 
    (), String] 
    !145 = GetField(%elt18) [`0`]
    !146 = GetField(!145) [GT]
    !147 = ApplySpecial(!146) [30, showStr, 
    (), String] 
    !148 = GetField(%elt18) [`1`]
    !149 = GetField(!148) [GT]
    !150 = ApplySpecial(!149) [31, showStr, 
    (), String] 
    !151 = GetField(%elt18) [`2`]
    !152 = GetField(!151) [GT]
    !153 = ApplySpecial(!152) [32, showStr, 
    (), String] 
    !154 = GetField(%elt18) [`3`]
    !155 = GetField(!154) [GT]
    !156 = ApplySpecial(!155) [33, showStr, 
    (), String]
    InsertFields !140 (locus: !142, alleles: !144, 0.GT: !147, 1.GT: !150, 2.GT: !153, 3.GT: !156)
  }
  ToArray(!s28)
}
!s29 = ToStream(!157) [False]
!s30 = StreamFlatMap(!s29) { (%elt19) =>
  ToStream(%elt19) [False]
}
!158 = ToArray(!s30) 
!159 = SelectFields(%16) [()]
MakeStruct(rows: !158, global: !159)

2023-11-17 18:07:59.527 : INFO: after optimize: relationalLowerer, after LowerMatrixToTable: IR size 361: 

%1 = RNGStateLiteral
!c0 = I32 [0] 
!c10 = I32 [10] 
!c1 = I32 [1]
!s = StreamRange(!c0, !c10, !c1) [1, False]
!s4 = StreamMap(!s) { (%elt) =>
  !2 = Cast(%elt) [Int64]
  %3 = MakeTuple(!2, %elt) [(0 1)]
  !4 = GetTupleElement(%3) [1] 
  !5 = EncodedLiteral [Array[Int32]]
  !s2 = ToStream(!5) [False]
  !s3 = StreamMap(!s2) { (%elt2) =>
    Cast(%elt2) [Float64]
  }
  !6 = ToArray(!s3) 
  !7 = GetTupleElement(%3) [0]
  !8 = RNGSplit(%1, !7)
  !9 = ApplySeeded(!6, !8) [rand_cat, 0, Int32]
  MakeStruct(sample_idx: !4, pop: !9)
}
!10 = ToArray(!s4)
%11 = MakeStruct(cols: !10)
!12 = GetField(%11) [cols]
!s5 = ToStream(!12) [False] 
!c0_2 = I32 [0] 
!c1_2 = I32 [1]
!s6 = StreamIota(!c0_2, !c1_2) [False]
!s7 = StreamZip(!s5, !s6) [34, TakeMinLength] {
(%elt3, %elt4) =>
  !13 = Cast(%elt4) [Int64]
  InsertFields %elt3 (__col_uid: !13)
}
!14 = ToArray(!s7)
%15 = InsertFields %11 (cols: !14)
%16 = CastRename(%15) [Struct{__cols:Array[Struct{sample_idx:Int32,pop:Int32,__col_uid:Int64}]}]
!17 = Literal [Array[Struct{numberToTake:Int32,old:Tuple[Int32,Interval[Struct{locus:Locus(GRCh37),alleles:Array[String]}],Tuple[Int64,Tuple[Int32,Int32]]]}], <literal value>]
!s8 = ToStream(!17) [False] 
%18 = MakeStruct(__iruid_1052: %15, __iruid_1054: %16)
!19 = IsNA(%18)
!27 = If !19 then {
  NA [Struct{__iruid_1052:Struct{cols:Array[Struct{}]},__iruid_1054:Struct{__cols:Array[Struct{sample_idx:Int32,pop:Int32,__col_uid:Int64}]}}]
} else {
  %20 = GetField(%18) [__iruid_1052]
  !21 = IsNA(%20)
  !25 = If !21 then {
    NA [Struct{cols:Array[Struct{}]}]
  } else {
    !22 = GetField(%20) [cols]
    !s9 = ToStream(!22) [False]
    !s10 = StreamMap(!s9) { (%elt5) =>
      !23 = IsNA(%elt5)
      If !23 then {
        NA [Struct{}]
      } else {
        Literal [Struct{}, <literal value>]
      }
    }
    !24 = ToArray(!s10)
    MakeStruct(cols: !24)
  } 
  !26 = GetField(%18) [__iruid_1054]
  MakeStruct(__iruid_1052: !25, __iruid_1054: !26)
} 
!28 = NA [String]
!157 = CollectDistributedArray(!s8, !27, !28) {
(%ctx, %g) =>
  %29 = GetField(%g) [__iruid_1054]
  %30 = GetField(%ctx) [old]
  %31 = GetField(%g) [__iruid_1052]
  %32 = GetTupleElement(%30) [1]
  %33 = GetTupleElement(%30) [2]
  %34 = GetTupleElement(%33) [0]
  !c0_3 = I32 [0] 
  !c1_3 = I32 [1]
  !s11 = StreamIota(!c0_3, !c1_3) [False] 
  !35 = RNGStateLiteral
  %36 = RNGSplit(!35, %34)
  %37 = GetTupleElement(%33) [1]
  !38 = GetTupleElement(%37) [0] 
  !39 = GetTupleElement(%37) [1] 
  !c1_4 = I32 [1]
  !s12 = StreamRange(!38, !39, !c1_4) [3, False]
  !s18 = StreamMap(!s12) { (%elt6) =>
    !40 = Cast(%elt6) [Int64]
    %41 = MakeTuple(!40, %elt6) [(0 1)]
    !42 = GetTupleElement(%41) [0]
    %43 = RNGSplit(%36, !42)
    !44 = F64 [0.1] 
    !45 = F64 [0.9]
    %46 = ApplySeeded(!44, !45, %43) [rand_unif, -1, Float64]
    !47 = GetTupleElement(%41) [1]
    !48 = Cast(!47) [Int64]
    !49 = Apply(!48) [5, globalPosToLocus, 
    (), Locus(GRCh37)] 
    !50 = EncodedLiteral [Array[String]] 
    !51 = EncodedLiteral [Array[Float64]]
    !s13 = ToStream(!51) [False] 
    !c0_4 = I32 [0] 
    !c1_5 = I32 [1]
    !s14 = StreamIota(!c0_4, !c1_5) [False]
    !s15 = StreamZip(!s13, !s14) [7, TakeMinLength] {
    (%elt7, %elt8) =>
      !52 = Cast(%elt8) [Int64]
      %53 = MakeTuple(!52, %elt7) [(0 1)]
      %54 = GetTupleElement(%53) [1]
      !55 = ApplyBinaryPrimOp(%46, %54) [Multiply] 
      !56 = F64 [1.0]
      !57 = ApplyBinaryPrimOp(!56, %46) [Subtract]
      !58 = ApplyBinaryPrimOp(!57, %54) [Multiply] 
      !59 = GetTupleElement(%53) [0]
      !60 = RNGSplit(%43, !59)
      ApplySeeded(!55, !58, !60) [rand_beta, 1, Float64]
    }
    !61 = ToArray(!s15) 
    !c0_5 = I32 [0] 
    !c10_2 = I32 [10] 
    !c1_6 = I32 [1]
    !s16 = StreamRange(!c0_5, !c10_2, !c1_6) [8, False]
    !s17 = StreamMap(!s16) { (%elt9) =>
      Literal [Struct{}, <literal value>]
    }
    !62 = ToArray(!s17)
    MakeStruct(locus: !49, alleles: !50, af: !61, entries: !62)
  }
  !s19 = StreamZip(!s11, !s18) [36, TakeMinLength] {
  (%elt10, %elt11) =>
    !63 = Cast(%elt10) [Int64]
    !64 = MakeTuple(%34, !63) [(0 1)]
    InsertFields %elt11 (__row_uid: !64)
  }
  !s20 = StreamMap(!s19) { (%elt12) =>
    !65 = SelectFields(%elt12) [(locus alleles)]
    !66 = ApplySpecial(%32, !65) [-1, contains, 
    (), Boolean]
    If !66 then { %elt12 } else {
      !67 = Str ["TableGen: ..."] 
      !68 = GetTupleElement(%30) [0]
      !69 = Apply(!68) [-1, str, (), String]
      !70 = Apply(!67, !69) [-1, concat, (), String] 
      !71 = Str ["\n\tRange bo..."]
      !72 = Apply(!70, !71) [-1, concat, (), String] 
      !73 = GetTupleElement(%30) [0]
      !74 = Apply(!73) [-1, str, (), String]
      !75 = Apply(!72, !74) [-1, concat, (), String] 
      !76 = Str [": "]
      !77 = Apply(!75, !76) [-1, concat, (), String] 
      !78 = Apply(%32) [-1, str, (), String]
      !79 = Apply(!77, !78) [-1, concat, (), String] 
      !80 = Str ["\n\tInvalid ..."]
      !81 = Apply(!79, !80) [-1, concat, (), String] 
      !82 = SelectFields(%elt12) [(locus alleles)]
      !83 = Apply(!82) [-1, str, (), String]
      !84 = Apply(!81, !83) [-1, concat, (), String]
      Die(!84) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, 9]
    }
  }
  !s21 = StreamMap(!s20) { (%elt13) =>
    %85 = GetField(%elt13) [entries]
    !86 = IsNA(%85)
    If !86 then {
      !87 = Str ["missing en..."]
      Die(!87) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, -1]
    } else {
      !88 = GetField(%31) [cols]
      %89 = ArrayLen(!88)
      %90 = ArrayLen(%85)
      !91 = ApplyComparisonOp(%90, %89) [NEQWithNA]
      If !91 then {
        !92 = Str ["length mis..."] 
        !93 = Apply(%90) [-1, str, (), String]
        !94 = Apply(!92, !93) [-1, concat, (), String] 
        !95 = Str [" entries, "]
        !96 = Apply(!94, !95) [-1, concat, (), String] 
        !97 = Apply(%89) [-1, str, (), String]
        !98 = Apply(!96, !97) [-1, concat, (), String] 
        !99 = Str [" cols, at "]
        !100 = Apply(!98, !99) [-1, concat, (), String] 
        !101 = SelectFields(%elt13) [(locus alleles)]
        !102 = Apply(!101) [-1, str, (), String]
        !103 = Apply(!100, !102) [-1, concat, (), String]
        Die(!103) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, -1]
      } else { %elt13 }
    }
  }
  !s25 = StreamMap(!s21) { (%elt14) =>
    %104 = CastRename(%elt14) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],`the entries! [877f12a8827e18f61222c6c8c5fb04a8]`:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}]
    !105 = SelectFields(%104) [(locus alleles)] 
    !106 = GetField(%104) [`the entries! [877f12a8827e18f61222c6c8c5fb04a8]`]
    !s22 = ToStream(!106) [False] 
    !107 = GetField(%29) [__cols]
    !s23 = ToStream(!107) [False]
    !s24 = StreamZip(!s22, !s23) [-1, AssumeSameLength] {
    (%elt15, %elt16) =>
      %108 = GetField(%104) [__row_uid]
      !109 = GetField(%104) [af] 
      !110 = GetField(%elt16) [pop]
      %111 = ApplyIR(!109, !110) [10, indexArray, 
      (), Float64]
      !112 = F64 [1.0]
      %113 = ApplyBinaryPrimOp(!112, %111) [Subtract]
      !114 = F64 [2.0]
      !115 = Apply(%113, !114) [13, pow, (), Float64] 
      !116 = F64 [2.0]
      !117 = ApplyBinaryPrimOp(!116, %111) [Multiply]
      !118 = ApplyBinaryPrimOp(!117, %113) [Multiply] 
      !119 = F64 [2.0]
      !120 = Apply(%111, !119) [16, pow, (), Float64]
      !121 = MakeArray(!115, !118, !120) [Array[Float64]] 
      !122 = RNGStateLiteral 
      !123 = GetTupleElement(%108) [0] 
      !124 = GetTupleElement(%108) [1] 
      !125 = GetField(%elt16) [__col_uid]
      !126 = MakeTuple(!123, !124, !125) [(0 1 2)]
      !127 = RNGSplit(!122, !126)
      !128 = ApplySeeded(!121, !127) [rand_cat, 2, Int32]
      !129 = Apply(!128) [17, UnphasedDiploidGtIndexCall, 
      (), Call]
      InsertFields %elt15 (GT: !129)
    }
    !130 = ToArray(!s24)
    InsertFields !105 (the entries! [877f12a8827e18f61222c6c8c5fb04a8]: !130)
  }
  !s26 = StreamMap(!s25) { (%elt17) =>
    %131 = CastRename(%elt17) [Struct{locus:Locus(GRCh37),alleles:Array[String],entries:Array[Struct{GT:Call}]}]
    %132 = GetField(%131) [entries]
    !133 = SelectFields(%131) [(locus alleles)] 
    !c0_6 = I32 [0]
    !134 = ArrayRef(%132, !c0_6) [24] 
    !c1_7 = I32 [1]
    !135 = ArrayRef(%132, !c1_7) [25] 
    !c2 = I32 [2]
    !136 = ArrayRef(%132, !c2) [26] 
    !c3 = I32 [3]
    !137 = ArrayRef(%132, !c3) [27]
    InsertFields !133 (0: !134, 1: !135, 2: !136, 3: !137)
  } 
  !138 = GetField(%ctx) [numberToTake]
  !s27 = StreamTake(!s26, !138)
  !s28 = StreamMap(!s27) { (%elt18) =>
    %139 = SelectFields(%elt18) [(locus alleles)]
    !140 = SelectFields(%139) [()] 
    !141 = GetField(%139) [locus]
    !142 = ApplySpecial(!141) [28, showStr, 
    (), String] 
    !143 = GetField(%139) [alleles]
    !144 = ApplySpecial(!143) [29, showStr, 
    (), String] 
    !145 = GetField(%elt18) [`0`]
    !146 = GetField(!145) [GT]
    !147 = ApplySpecial(!146) [30, showStr, 
    (), String] 
    !148 = GetField(%elt18) [`1`]
    !149 = GetField(!148) [GT]
    !150 = ApplySpecial(!149) [31, showStr, 
    (), String] 
    !151 = GetField(%elt18) [`2`]
    !152 = GetField(!151) [GT]
    !153 = ApplySpecial(!152) [32, showStr, 
    (), String] 
    !154 = GetField(%elt18) [`3`]
    !155 = GetField(!154) [GT]
    !156 = ApplySpecial(!155) [33, showStr, 
    (), String]
    InsertFields !140 (locus: !142, alleles: !144, 0.GT: !147, 1.GT: !150, 2.GT: !153, 3.GT: !156)
  }
  ToArray(!s28)
}
!s29 = ToStream(!157) [False]
!s30 = StreamFlatMap(!s29) { (%elt19) =>
  ToStream(%elt19) [False]
}
!158 = ToArray(!s30) 
!159 = SelectFields(%16) [()]
MakeStruct(rows: !158, global: !159)

2023-11-17 18:07:59.532 : INFO: after LiftRelationalValuesToRelationalLets: IR size 361: 

%1 = RNGStateLiteral
!c0 = I32 [0] 
!c10 = I32 [10] 
!c1 = I32 [1]
!s = StreamRange(!c0, !c10, !c1) [1, False]
!s4 = StreamMap(!s) { (%elt) =>
  !2 = Cast(%elt) [Int64]
  %3 = MakeTuple(!2, %elt) [(0 1)]
  !4 = GetTupleElement(%3) [1] 
  !5 = EncodedLiteral [Array[Int32]]
  !s2 = ToStream(!5) [False]
  !s3 = StreamMap(!s2) { (%elt2) =>
    Cast(%elt2) [Float64]
  }
  !6 = ToArray(!s3) 
  !7 = GetTupleElement(%3) [0]
  !8 = RNGSplit(%1, !7)
  !9 = ApplySeeded(!6, !8) [rand_cat, 0, Int32]
  MakeStruct(sample_idx: !4, pop: !9)
}
!10 = ToArray(!s4)
%11 = MakeStruct(cols: !10)
!12 = GetField(%11) [cols]
!s5 = ToStream(!12) [False] 
!c0_2 = I32 [0] 
!c1_2 = I32 [1]
!s6 = StreamIota(!c0_2, !c1_2) [False]
!s7 = StreamZip(!s5, !s6) [34, TakeMinLength] {
(%elt3, %elt4) =>
  !13 = Cast(%elt4) [Int64]
  InsertFields %elt3 (__col_uid: !13)
}
!14 = ToArray(!s7)
%15 = InsertFields %11 (cols: !14)
%16 = CastRename(%15) [Struct{__cols:Array[Struct{sample_idx:Int32,pop:Int32,__col_uid:Int64}]}]
!17 = Literal [Array[Struct{numberToTake:Int32,old:Tuple[Int32,Interval[Struct{locus:Locus(GRCh37),alleles:Array[String]}],Tuple[Int64,Tuple[Int32,Int32]]]}], <literal value>]
!s8 = ToStream(!17) [False] 
%18 = MakeStruct(__iruid_1052: %15, __iruid_1054: %16)
!19 = IsNA(%18)
!27 = If !19 then {
  NA [Struct{__iruid_1052:Struct{cols:Array[Struct{}]},__iruid_1054:Struct{__cols:Array[Struct{sample_idx:Int32,pop:Int32,__col_uid:Int64}]}}]
} else {
  %20 = GetField(%18) [__iruid_1052]
  !21 = IsNA(%20)
  !25 = If !21 then {
    NA [Struct{cols:Array[Struct{}]}]
  } else {
    !22 = GetField(%20) [cols]
    !s9 = ToStream(!22) [False]
    !s10 = StreamMap(!s9) { (%elt5) =>
      !23 = IsNA(%elt5)
      If !23 then {
        NA [Struct{}]
      } else {
        Literal [Struct{}, <literal value>]
      }
    }
    !24 = ToArray(!s10)
    MakeStruct(cols: !24)
  } 
  !26 = GetField(%18) [__iruid_1054]
  MakeStruct(__iruid_1052: !25, __iruid_1054: !26)
} 
!28 = NA [String]
!157 = CollectDistributedArray(!s8, !27, !28) {
(%ctx, %g) =>
  %29 = GetField(%g) [__iruid_1054]
  %30 = GetField(%ctx) [old]
  %31 = GetField(%g) [__iruid_1052]
  %32 = GetTupleElement(%30) [1]
  %33 = GetTupleElement(%30) [2]
  %34 = GetTupleElement(%33) [0]
  !c0_3 = I32 [0] 
  !c1_3 = I32 [1]
  !s11 = StreamIota(!c0_3, !c1_3) [False] 
  !35 = RNGStateLiteral
  %36 = RNGSplit(!35, %34)
  %37 = GetTupleElement(%33) [1]
  !38 = GetTupleElement(%37) [0] 
  !39 = GetTupleElement(%37) [1] 
  !c1_4 = I32 [1]
  !s12 = StreamRange(!38, !39, !c1_4) [3, False]
  !s18 = StreamMap(!s12) { (%elt6) =>
    !40 = Cast(%elt6) [Int64]
    %41 = MakeTuple(!40, %elt6) [(0 1)]
    !42 = GetTupleElement(%41) [0]
    %43 = RNGSplit(%36, !42)
    !44 = F64 [0.1] 
    !45 = F64 [0.9]
    %46 = ApplySeeded(!44, !45, %43) [rand_unif, -1, Float64]
    !47 = GetTupleElement(%41) [1]
    !48 = Cast(!47) [Int64]
    !49 = Apply(!48) [5, globalPosToLocus, 
    (), Locus(GRCh37)] 
    !50 = EncodedLiteral [Array[String]] 
    !51 = EncodedLiteral [Array[Float64]]
    !s13 = ToStream(!51) [False] 
    !c0_4 = I32 [0] 
    !c1_5 = I32 [1]
    !s14 = StreamIota(!c0_4, !c1_5) [False]
    !s15 = StreamZip(!s13, !s14) [7, TakeMinLength] {
    (%elt7, %elt8) =>
      !52 = Cast(%elt8) [Int64]
      %53 = MakeTuple(!52, %elt7) [(0 1)]
      %54 = GetTupleElement(%53) [1]
      !55 = ApplyBinaryPrimOp(%46, %54) [Multiply] 
      !56 = F64 [1.0]
      !57 = ApplyBinaryPrimOp(!56, %46) [Subtract]
      !58 = ApplyBinaryPrimOp(!57, %54) [Multiply] 
      !59 = GetTupleElement(%53) [0]
      !60 = RNGSplit(%43, !59)
      ApplySeeded(!55, !58, !60) [rand_beta, 1, Float64]
    }
    !61 = ToArray(!s15) 
    !c0_5 = I32 [0] 
    !c10_2 = I32 [10] 
    !c1_6 = I32 [1]
    !s16 = StreamRange(!c0_5, !c10_2, !c1_6) [8, False]
    !s17 = StreamMap(!s16) { (%elt9) =>
      Literal [Struct{}, <literal value>]
    }
    !62 = ToArray(!s17)
    MakeStruct(locus: !49, alleles: !50, af: !61, entries: !62)
  }
  !s19 = StreamZip(!s11, !s18) [36, TakeMinLength] {
  (%elt10, %elt11) =>
    !63 = Cast(%elt10) [Int64]
    !64 = MakeTuple(%34, !63) [(0 1)]
    InsertFields %elt11 (__row_uid: !64)
  }
  !s20 = StreamMap(!s19) { (%elt12) =>
    !65 = SelectFields(%elt12) [(locus alleles)]
    !66 = ApplySpecial(%32, !65) [-1, contains, 
    (), Boolean]
    If !66 then { %elt12 } else {
      !67 = Str ["TableGen: ..."] 
      !68 = GetTupleElement(%30) [0]
      !69 = Apply(!68) [-1, str, (), String]
      !70 = Apply(!67, !69) [-1, concat, (), String] 
      !71 = Str ["\n\tRange bo..."]
      !72 = Apply(!70, !71) [-1, concat, (), String] 
      !73 = GetTupleElement(%30) [0]
      !74 = Apply(!73) [-1, str, (), String]
      !75 = Apply(!72, !74) [-1, concat, (), String] 
      !76 = Str [": "]
      !77 = Apply(!75, !76) [-1, concat, (), String] 
      !78 = Apply(%32) [-1, str, (), String]
      !79 = Apply(!77, !78) [-1, concat, (), String] 
      !80 = Str ["\n\tInvalid ..."]
      !81 = Apply(!79, !80) [-1, concat, (), String] 
      !82 = SelectFields(%elt12) [(locus alleles)]
      !83 = Apply(!82) [-1, str, (), String]
      !84 = Apply(!81, !83) [-1, concat, (), String]
      Die(!84) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, 9]
    }
  }
  !s21 = StreamMap(!s20) { (%elt13) =>
    %85 = GetField(%elt13) [entries]
    !86 = IsNA(%85)
    If !86 then {
      !87 = Str ["missing en..."]
      Die(!87) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, -1]
    } else {
      !88 = GetField(%31) [cols]
      %89 = ArrayLen(!88)
      %90 = ArrayLen(%85)
      !91 = ApplyComparisonOp(%90, %89) [NEQWithNA]
      If !91 then {
        !92 = Str ["length mis..."] 
        !93 = Apply(%90) [-1, str, (), String]
        !94 = Apply(!92, !93) [-1, concat, (), String] 
        !95 = Str [" entries, "]
        !96 = Apply(!94, !95) [-1, concat, (), String] 
        !97 = Apply(%89) [-1, str, (), String]
        !98 = Apply(!96, !97) [-1, concat, (), String] 
        !99 = Str [" cols, at "]
        !100 = Apply(!98, !99) [-1, concat, (), String] 
        !101 = SelectFields(%elt13) [(locus alleles)]
        !102 = Apply(!101) [-1, str, (), String]
        !103 = Apply(!100, !102) [-1, concat, (), String]
        Die(!103) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, -1]
      } else { %elt13 }
    }
  }
  !s25 = StreamMap(!s21) { (%elt14) =>
    %104 = CastRename(%elt14) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],`the entries! [877f12a8827e18f61222c6c8c5fb04a8]`:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}]
    !105 = SelectFields(%104) [(locus alleles)] 
    !106 = GetField(%104) [`the entries! [877f12a8827e18f61222c6c8c5fb04a8]`]
    !s22 = ToStream(!106) [False] 
    !107 = GetField(%29) [__cols]
    !s23 = ToStream(!107) [False]
    !s24 = StreamZip(!s22, !s23) [-1, AssumeSameLength] {
    (%elt15, %elt16) =>
      %108 = GetField(%104) [__row_uid]
      !109 = GetField(%104) [af] 
      !110 = GetField(%elt16) [pop]
      %111 = ApplyIR(!109, !110) [10, indexArray, 
      (), Float64]
      !112 = F64 [1.0]
      %113 = ApplyBinaryPrimOp(!112, %111) [Subtract]
      !114 = F64 [2.0]
      !115 = Apply(%113, !114) [13, pow, (), Float64] 
      !116 = F64 [2.0]
      !117 = ApplyBinaryPrimOp(!116, %111) [Multiply]
      !118 = ApplyBinaryPrimOp(!117, %113) [Multiply] 
      !119 = F64 [2.0]
      !120 = Apply(%111, !119) [16, pow, (), Float64]
      !121 = MakeArray(!115, !118, !120) [Array[Float64]] 
      !122 = RNGStateLiteral 
      !123 = GetTupleElement(%108) [0] 
      !124 = GetTupleElement(%108) [1] 
      !125 = GetField(%elt16) [__col_uid]
      !126 = MakeTuple(!123, !124, !125) [(0 1 2)]
      !127 = RNGSplit(!122, !126)
      !128 = ApplySeeded(!121, !127) [rand_cat, 2, Int32]
      !129 = Apply(!128) [17, UnphasedDiploidGtIndexCall, 
      (), Call]
      InsertFields %elt15 (GT: !129)
    }
    !130 = ToArray(!s24)
    InsertFields !105 (the entries! [877f12a8827e18f61222c6c8c5fb04a8]: !130)
  }
  !s26 = StreamMap(!s25) { (%elt17) =>
    %131 = CastRename(%elt17) [Struct{locus:Locus(GRCh37),alleles:Array[String],entries:Array[Struct{GT:Call}]}]
    %132 = GetField(%131) [entries]
    !133 = SelectFields(%131) [(locus alleles)] 
    !c0_6 = I32 [0]
    !134 = ArrayRef(%132, !c0_6) [24] 
    !c1_7 = I32 [1]
    !135 = ArrayRef(%132, !c1_7) [25] 
    !c2 = I32 [2]
    !136 = ArrayRef(%132, !c2) [26] 
    !c3 = I32 [3]
    !137 = ArrayRef(%132, !c3) [27]
    InsertFields !133 (0: !134, 1: !135, 2: !136, 3: !137)
  } 
  !138 = GetField(%ctx) [numberToTake]
  !s27 = StreamTake(!s26, !138)
  !s28 = StreamMap(!s27) { (%elt18) =>
    %139 = SelectFields(%elt18) [(locus alleles)]
    !140 = SelectFields(%139) [()] 
    !141 = GetField(%139) [locus]
    !142 = ApplySpecial(!141) [28, showStr, 
    (), String] 
    !143 = GetField(%139) [alleles]
    !144 = ApplySpecial(!143) [29, showStr, 
    (), String] 
    !145 = GetField(%elt18) [`0`]
    !146 = GetField(!145) [GT]
    !147 = ApplySpecial(!146) [30, showStr, 
    (), String] 
    !148 = GetField(%elt18) [`1`]
    !149 = GetField(!148) [GT]
    !150 = ApplySpecial(!149) [31, showStr, 
    (), String] 
    !151 = GetField(%elt18) [`2`]
    !152 = GetField(!151) [GT]
    !153 = ApplySpecial(!152) [32, showStr, 
    (), String] 
    !154 = GetField(%elt18) [`3`]
    !155 = GetField(!154) [GT]
    !156 = ApplySpecial(!155) [33, showStr, 
    (), String]
    InsertFields !140 (locus: !142, alleles: !144, 0.GT: !147, 1.GT: !150, 2.GT: !153, 3.GT: !156)
  }
  ToArray(!s28)
}
!s29 = ToStream(!157) [False]
!s30 = StreamFlatMap(!s29) { (%elt19) =>
  ToStream(%elt19) [False]
}
!158 = ToArray(!s30) 
!159 = SelectFields(%16) [()]
MakeStruct(rows: !158, global: !159)

2023-11-17 18:07:59.537 : INFO: after EvalRelationalLets: IR size 361: 

%1 = RNGStateLiteral
!c0 = I32 [0] 
!c10 = I32 [10] 
!c1 = I32 [1]
!s = StreamRange(!c0, !c10, !c1) [1, False]
!s4 = StreamMap(!s) { (%elt) =>
  !2 = Cast(%elt) [Int64]
  %3 = MakeTuple(!2, %elt) [(0 1)]
  !4 = GetTupleElement(%3) [1] 
  !5 = EncodedLiteral [Array[Int32]]
  !s2 = ToStream(!5) [False]
  !s3 = StreamMap(!s2) { (%elt2) =>
    Cast(%elt2) [Float64]
  }
  !6 = ToArray(!s3) 
  !7 = GetTupleElement(%3) [0]
  !8 = RNGSplit(%1, !7)
  !9 = ApplySeeded(!6, !8) [rand_cat, 0, Int32]
  MakeStruct(sample_idx: !4, pop: !9)
}
!10 = ToArray(!s4)
%11 = MakeStruct(cols: !10)
!12 = GetField(%11) [cols]
!s5 = ToStream(!12) [False] 
!c0_2 = I32 [0] 
!c1_2 = I32 [1]
!s6 = StreamIota(!c0_2, !c1_2) [False]
!s7 = StreamZip(!s5, !s6) [34, TakeMinLength] {
(%elt3, %elt4) =>
  !13 = Cast(%elt4) [Int64]
  InsertFields %elt3 (__col_uid: !13)
}
!14 = ToArray(!s7)
%15 = InsertFields %11 (cols: !14)
%16 = CastRename(%15) [Struct{__cols:Array[Struct{sample_idx:Int32,pop:Int32,__col_uid:Int64}]}]
!17 = Literal [Array[Struct{numberToTake:Int32,old:Tuple[Int32,Interval[Struct{locus:Locus(GRCh37),alleles:Array[String]}],Tuple[Int64,Tuple[Int32,Int32]]]}], <literal value>]
!s8 = ToStream(!17) [False] 
%18 = MakeStruct(__iruid_1052: %15, __iruid_1054: %16)
!19 = IsNA(%18)
!27 = If !19 then {
  NA [Struct{__iruid_1052:Struct{cols:Array[Struct{}]},__iruid_1054:Struct{__cols:Array[Struct{sample_idx:Int32,pop:Int32,__col_uid:Int64}]}}]
} else {
  %20 = GetField(%18) [__iruid_1052]
  !21 = IsNA(%20)
  !25 = If !21 then {
    NA [Struct{cols:Array[Struct{}]}]
  } else {
    !22 = GetField(%20) [cols]
    !s9 = ToStream(!22) [False]
    !s10 = StreamMap(!s9) { (%elt5) =>
      !23 = IsNA(%elt5)
      If !23 then {
        NA [Struct{}]
      } else {
        Literal [Struct{}, <literal value>]
      }
    }
    !24 = ToArray(!s10)
    MakeStruct(cols: !24)
  } 
  !26 = GetField(%18) [__iruid_1054]
  MakeStruct(__iruid_1052: !25, __iruid_1054: !26)
} 
!28 = NA [String]
!157 = CollectDistributedArray(!s8, !27, !28) {
(%ctx, %g) =>
  %29 = GetField(%g) [__iruid_1054]
  %30 = GetField(%ctx) [old]
  %31 = GetField(%g) [__iruid_1052]
  %32 = GetTupleElement(%30) [1]
  %33 = GetTupleElement(%30) [2]
  %34 = GetTupleElement(%33) [0]
  !c0_3 = I32 [0] 
  !c1_3 = I32 [1]
  !s11 = StreamIota(!c0_3, !c1_3) [False] 
  !35 = RNGStateLiteral
  %36 = RNGSplit(!35, %34)
  %37 = GetTupleElement(%33) [1]
  !38 = GetTupleElement(%37) [0] 
  !39 = GetTupleElement(%37) [1] 
  !c1_4 = I32 [1]
  !s12 = StreamRange(!38, !39, !c1_4) [3, False]
  !s18 = StreamMap(!s12) { (%elt6) =>
    !40 = Cast(%elt6) [Int64]
    %41 = MakeTuple(!40, %elt6) [(0 1)]
    !42 = GetTupleElement(%41) [0]
    %43 = RNGSplit(%36, !42)
    !44 = F64 [0.1] 
    !45 = F64 [0.9]
    %46 = ApplySeeded(!44, !45, %43) [rand_unif, -1, Float64]
    !47 = GetTupleElement(%41) [1]
    !48 = Cast(!47) [Int64]
    !49 = Apply(!48) [5, globalPosToLocus, 
    (), Locus(GRCh37)] 
    !50 = EncodedLiteral [Array[String]] 
    !51 = EncodedLiteral [Array[Float64]]
    !s13 = ToStream(!51) [False] 
    !c0_4 = I32 [0] 
    !c1_5 = I32 [1]
    !s14 = StreamIota(!c0_4, !c1_5) [False]
    !s15 = StreamZip(!s13, !s14) [7, TakeMinLength] {
    (%elt7, %elt8) =>
      !52 = Cast(%elt8) [Int64]
      %53 = MakeTuple(!52, %elt7) [(0 1)]
      %54 = GetTupleElement(%53) [1]
      !55 = ApplyBinaryPrimOp(%46, %54) [Multiply] 
      !56 = F64 [1.0]
      !57 = ApplyBinaryPrimOp(!56, %46) [Subtract]
      !58 = ApplyBinaryPrimOp(!57, %54) [Multiply] 
      !59 = GetTupleElement(%53) [0]
      !60 = RNGSplit(%43, !59)
      ApplySeeded(!55, !58, !60) [rand_beta, 1, Float64]
    }
    !61 = ToArray(!s15) 
    !c0_5 = I32 [0] 
    !c10_2 = I32 [10] 
    !c1_6 = I32 [1]
    !s16 = StreamRange(!c0_5, !c10_2, !c1_6) [8, False]
    !s17 = StreamMap(!s16) { (%elt9) =>
      Literal [Struct{}, <literal value>]
    }
    !62 = ToArray(!s17)
    MakeStruct(locus: !49, alleles: !50, af: !61, entries: !62)
  }
  !s19 = StreamZip(!s11, !s18) [36, TakeMinLength] {
  (%elt10, %elt11) =>
    !63 = Cast(%elt10) [Int64]
    !64 = MakeTuple(%34, !63) [(0 1)]
    InsertFields %elt11 (__row_uid: !64)
  }
  !s20 = StreamMap(!s19) { (%elt12) =>
    !65 = SelectFields(%elt12) [(locus alleles)]
    !66 = ApplySpecial(%32, !65) [-1, contains, 
    (), Boolean]
    If !66 then { %elt12 } else {
      !67 = Str ["TableGen: ..."] 
      !68 = GetTupleElement(%30) [0]
      !69 = Apply(!68) [-1, str, (), String]
      !70 = Apply(!67, !69) [-1, concat, (), String] 
      !71 = Str ["\n\tRange bo..."]
      !72 = Apply(!70, !71) [-1, concat, (), String] 
      !73 = GetTupleElement(%30) [0]
      !74 = Apply(!73) [-1, str, (), String]
      !75 = Apply(!72, !74) [-1, concat, (), String] 
      !76 = Str [": "]
      !77 = Apply(!75, !76) [-1, concat, (), String] 
      !78 = Apply(%32) [-1, str, (), String]
      !79 = Apply(!77, !78) [-1, concat, (), String] 
      !80 = Str ["\n\tInvalid ..."]
      !81 = Apply(!79, !80) [-1, concat, (), String] 
      !82 = SelectFields(%elt12) [(locus alleles)]
      !83 = Apply(!82) [-1, str, (), String]
      !84 = Apply(!81, !83) [-1, concat, (), String]
      Die(!84) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, 9]
    }
  }
  !s21 = StreamMap(!s20) { (%elt13) =>
    %85 = GetField(%elt13) [entries]
    !86 = IsNA(%85)
    If !86 then {
      !87 = Str ["missing en..."]
      Die(!87) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, -1]
    } else {
      !88 = GetField(%31) [cols]
      %89 = ArrayLen(!88)
      %90 = ArrayLen(%85)
      !91 = ApplyComparisonOp(%90, %89) [NEQWithNA]
      If !91 then {
        !92 = Str ["length mis..."] 
        !93 = Apply(%90) [-1, str, (), String]
        !94 = Apply(!92, !93) [-1, concat, (), String] 
        !95 = Str [" entries, "]
        !96 = Apply(!94, !95) [-1, concat, (), String] 
        !97 = Apply(%89) [-1, str, (), String]
        !98 = Apply(!96, !97) [-1, concat, (), String] 
        !99 = Str [" cols, at "]
        !100 = Apply(!98, !99) [-1, concat, (), String] 
        !101 = SelectFields(%elt13) [(locus alleles)]
        !102 = Apply(!101) [-1, str, (), String]
        !103 = Apply(!100, !102) [-1, concat, (), String]
        Die(!103) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, -1]
      } else { %elt13 }
    }
  }
  !s25 = StreamMap(!s21) { (%elt14) =>
    %104 = CastRename(%elt14) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],`the entries! [877f12a8827e18f61222c6c8c5fb04a8]`:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}]
    !105 = SelectFields(%104) [(locus alleles)] 
    !106 = GetField(%104) [`the entries! [877f12a8827e18f61222c6c8c5fb04a8]`]
    !s22 = ToStream(!106) [False] 
    !107 = GetField(%29) [__cols]
    !s23 = ToStream(!107) [False]
    !s24 = StreamZip(!s22, !s23) [-1, AssumeSameLength] {
    (%elt15, %elt16) =>
      %108 = GetField(%104) [__row_uid]
      !109 = GetField(%104) [af] 
      !110 = GetField(%elt16) [pop]
      %111 = ApplyIR(!109, !110) [10, indexArray, 
      (), Float64]
      !112 = F64 [1.0]
      %113 = ApplyBinaryPrimOp(!112, %111) [Subtract]
      !114 = F64 [2.0]
      !115 = Apply(%113, !114) [13, pow, (), Float64] 
      !116 = F64 [2.0]
      !117 = ApplyBinaryPrimOp(!116, %111) [Multiply]
      !118 = ApplyBinaryPrimOp(!117, %113) [Multiply] 
      !119 = F64 [2.0]
      !120 = Apply(%111, !119) [16, pow, (), Float64]
      !121 = MakeArray(!115, !118, !120) [Array[Float64]] 
      !122 = RNGStateLiteral 
      !123 = GetTupleElement(%108) [0] 
      !124 = GetTupleElement(%108) [1] 
      !125 = GetField(%elt16) [__col_uid]
      !126 = MakeTuple(!123, !124, !125) [(0 1 2)]
      !127 = RNGSplit(!122, !126)
      !128 = ApplySeeded(!121, !127) [rand_cat, 2, Int32]
      !129 = Apply(!128) [17, UnphasedDiploidGtIndexCall, 
      (), Call]
      InsertFields %elt15 (GT: !129)
    }
    !130 = ToArray(!s24)
    InsertFields !105 (the entries! [877f12a8827e18f61222c6c8c5fb04a8]: !130)
  }
  !s26 = StreamMap(!s25) { (%elt17) =>
    %131 = CastRename(%elt17) [Struct{locus:Locus(GRCh37),alleles:Array[String],entries:Array[Struct{GT:Call}]}]
    %132 = GetField(%131) [entries]
    !133 = SelectFields(%131) [(locus alleles)] 
    !c0_6 = I32 [0]
    !134 = ArrayRef(%132, !c0_6) [24] 
    !c1_7 = I32 [1]
    !135 = ArrayRef(%132, !c1_7) [25] 
    !c2 = I32 [2]
    !136 = ArrayRef(%132, !c2) [26] 
    !c3 = I32 [3]
    !137 = ArrayRef(%132, !c3) [27]
    InsertFields !133 (0: !134, 1: !135, 2: !136, 3: !137)
  } 
  !138 = GetField(%ctx) [numberToTake]
  !s27 = StreamTake(!s26, !138)
  !s28 = StreamMap(!s27) { (%elt18) =>
    %139 = SelectFields(%elt18) [(locus alleles)]
    !140 = SelectFields(%139) [()] 
    !141 = GetField(%139) [locus]
    !142 = ApplySpecial(!141) [28, showStr, 
    (), String] 
    !143 = GetField(%139) [alleles]
    !144 = ApplySpecial(!143) [29, showStr, 
    (), String] 
    !145 = GetField(%elt18) [`0`]
    !146 = GetField(!145) [GT]
    !147 = ApplySpecial(!146) [30, showStr, 
    (), String] 
    !148 = GetField(%elt18) [`1`]
    !149 = GetField(!148) [GT]
    !150 = ApplySpecial(!149) [31, showStr, 
    (), String] 
    !151 = GetField(%elt18) [`2`]
    !152 = GetField(!151) [GT]
    !153 = ApplySpecial(!152) [32, showStr, 
    (), String] 
    !154 = GetField(%elt18) [`3`]
    !155 = GetField(!154) [GT]
    !156 = ApplySpecial(!155) [33, showStr, 
    (), String]
    InsertFields !140 (locus: !142, alleles: !144, 0.GT: !147, 1.GT: !150, 2.GT: !153, 3.GT: !156)
  }
  ToArray(!s28)
}
!s29 = ToStream(!157) [False]
!s30 = StreamFlatMap(!s29) { (%elt19) =>
  ToStream(%elt19) [False]
}
!158 = ToArray(!s30) 
!159 = SelectFields(%16) [()]
MakeStruct(rows: !158, global: !159)

2023-11-17 18:07:59.541 : INFO: after LowerAndExecuteShuffles: IR size 361: 

%1 = RNGStateLiteral
!c0 = I32 [0] 
!c10 = I32 [10] 
!c1 = I32 [1]
!s = StreamRange(!c0, !c10, !c1) [1, False]
!s4 = StreamMap(!s) { (%elt) =>
  !2 = Cast(%elt) [Int64]
  %3 = MakeTuple(!2, %elt) [(0 1)]
  !4 = GetTupleElement(%3) [1] 
  !5 = EncodedLiteral [Array[Int32]]
  !s2 = ToStream(!5) [False]
  !s3 = StreamMap(!s2) { (%elt2) =>
    Cast(%elt2) [Float64]
  }
  !6 = ToArray(!s3) 
  !7 = GetTupleElement(%3) [0]
  !8 = RNGSplit(%1, !7)
  !9 = ApplySeeded(!6, !8) [rand_cat, 0, Int32]
  MakeStruct(sample_idx: !4, pop: !9)
}
!10 = ToArray(!s4)
%11 = MakeStruct(cols: !10)
!12 = GetField(%11) [cols]
!s5 = ToStream(!12) [False] 
!c0_2 = I32 [0] 
!c1_2 = I32 [1]
!s6 = StreamIota(!c0_2, !c1_2) [False]
!s7 = StreamZip(!s5, !s6) [34, TakeMinLength] {
(%elt3, %elt4) =>
  !13 = Cast(%elt4) [Int64]
  InsertFields %elt3 (__col_uid: !13)
}
!14 = ToArray(!s7)
%15 = InsertFields %11 (cols: !14)
%16 = CastRename(%15) [Struct{__cols:Array[Struct{sample_idx:Int32,pop:Int32,__col_uid:Int64}]}]
!17 = Literal [Array[Struct{numberToTake:Int32,old:Tuple[Int32,Interval[Struct{locus:Locus(GRCh37),alleles:Array[String]}],Tuple[Int64,Tuple[Int32,Int32]]]}], <literal value>]
!s8 = ToStream(!17) [False] 
%18 = MakeStruct(__iruid_1052: %15, __iruid_1054: %16)
!19 = IsNA(%18)
!27 = If !19 then {
  NA [Struct{__iruid_1052:Struct{cols:Array[Struct{}]},__iruid_1054:Struct{__cols:Array[Struct{sample_idx:Int32,pop:Int32,__col_uid:Int64}]}}]
} else {
  %20 = GetField(%18) [__iruid_1052]
  !21 = IsNA(%20)
  !25 = If !21 then {
    NA [Struct{cols:Array[Struct{}]}]
  } else {
    !22 = GetField(%20) [cols]
    !s9 = ToStream(!22) [False]
    !s10 = StreamMap(!s9) { (%elt5) =>
      !23 = IsNA(%elt5)
      If !23 then {
        NA [Struct{}]
      } else {
        Literal [Struct{}, <literal value>]
      }
    }
    !24 = ToArray(!s10)
    MakeStruct(cols: !24)
  } 
  !26 = GetField(%18) [__iruid_1054]
  MakeStruct(__iruid_1052: !25, __iruid_1054: !26)
} 
!28 = NA [String]
!157 = CollectDistributedArray(!s8, !27, !28) {
(%ctx, %g) =>
  %29 = GetField(%g) [__iruid_1054]
  %30 = GetField(%ctx) [old]
  %31 = GetField(%g) [__iruid_1052]
  %32 = GetTupleElement(%30) [1]
  %33 = GetTupleElement(%30) [2]
  %34 = GetTupleElement(%33) [0]
  !c0_3 = I32 [0] 
  !c1_3 = I32 [1]
  !s11 = StreamIota(!c0_3, !c1_3) [False] 
  !35 = RNGStateLiteral
  %36 = RNGSplit(!35, %34)
  %37 = GetTupleElement(%33) [1]
  !38 = GetTupleElement(%37) [0] 
  !39 = GetTupleElement(%37) [1] 
  !c1_4 = I32 [1]
  !s12 = StreamRange(!38, !39, !c1_4) [3, False]
  !s18 = StreamMap(!s12) { (%elt6) =>
    !40 = Cast(%elt6) [Int64]
    %41 = MakeTuple(!40, %elt6) [(0 1)]
    !42 = GetTupleElement(%41) [0]
    %43 = RNGSplit(%36, !42)
    !44 = F64 [0.1] 
    !45 = F64 [0.9]
    %46 = ApplySeeded(!44, !45, %43) [rand_unif, -1, Float64]
    !47 = GetTupleElement(%41) [1]
    !48 = Cast(!47) [Int64]
    !49 = Apply(!48) [5, globalPosToLocus, 
    (), Locus(GRCh37)] 
    !50 = EncodedLiteral [Array[String]] 
    !51 = EncodedLiteral [Array[Float64]]
    !s13 = ToStream(!51) [False] 
    !c0_4 = I32 [0] 
    !c1_5 = I32 [1]
    !s14 = StreamIota(!c0_4, !c1_5) [False]
    !s15 = StreamZip(!s13, !s14) [7, TakeMinLength] {
    (%elt7, %elt8) =>
      !52 = Cast(%elt8) [Int64]
      %53 = MakeTuple(!52, %elt7) [(0 1)]
      %54 = GetTupleElement(%53) [1]
      !55 = ApplyBinaryPrimOp(%46, %54) [Multiply] 
      !56 = F64 [1.0]
      !57 = ApplyBinaryPrimOp(!56, %46) [Subtract]
      !58 = ApplyBinaryPrimOp(!57, %54) [Multiply] 
      !59 = GetTupleElement(%53) [0]
      !60 = RNGSplit(%43, !59)
      ApplySeeded(!55, !58, !60) [rand_beta, 1, Float64]
    }
    !61 = ToArray(!s15) 
    !c0_5 = I32 [0] 
    !c10_2 = I32 [10] 
    !c1_6 = I32 [1]
    !s16 = StreamRange(!c0_5, !c10_2, !c1_6) [8, False]
    !s17 = StreamMap(!s16) { (%elt9) =>
      Literal [Struct{}, <literal value>]
    }
    !62 = ToArray(!s17)
    MakeStruct(locus: !49, alleles: !50, af: !61, entries: !62)
  }
  !s19 = StreamZip(!s11, !s18) [36, TakeMinLength] {
  (%elt10, %elt11) =>
    !63 = Cast(%elt10) [Int64]
    !64 = MakeTuple(%34, !63) [(0 1)]
    InsertFields %elt11 (__row_uid: !64)
  }
  !s20 = StreamMap(!s19) { (%elt12) =>
    !65 = SelectFields(%elt12) [(locus alleles)]
    !66 = ApplySpecial(%32, !65) [-1, contains, 
    (), Boolean]
    If !66 then { %elt12 } else {
      !67 = Str ["TableGen: ..."] 
      !68 = GetTupleElement(%30) [0]
      !69 = Apply(!68) [-1, str, (), String]
      !70 = Apply(!67, !69) [-1, concat, (), String] 
      !71 = Str ["\n\tRange bo..."]
      !72 = Apply(!70, !71) [-1, concat, (), String] 
      !73 = GetTupleElement(%30) [0]
      !74 = Apply(!73) [-1, str, (), String]
      !75 = Apply(!72, !74) [-1, concat, (), String] 
      !76 = Str [": "]
      !77 = Apply(!75, !76) [-1, concat, (), String] 
      !78 = Apply(%32) [-1, str, (), String]
      !79 = Apply(!77, !78) [-1, concat, (), String] 
      !80 = Str ["\n\tInvalid ..."]
      !81 = Apply(!79, !80) [-1, concat, (), String] 
      !82 = SelectFields(%elt12) [(locus alleles)]
      !83 = Apply(!82) [-1, str, (), String]
      !84 = Apply(!81, !83) [-1, concat, (), String]
      Die(!84) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, 9]
    }
  }
  !s21 = StreamMap(!s20) { (%elt13) =>
    %85 = GetField(%elt13) [entries]
    !86 = IsNA(%85)
    If !86 then {
      !87 = Str ["missing en..."]
      Die(!87) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, -1]
    } else {
      !88 = GetField(%31) [cols]
      %89 = ArrayLen(!88)
      %90 = ArrayLen(%85)
      !91 = ApplyComparisonOp(%90, %89) [NEQWithNA]
      If !91 then {
        !92 = Str ["length mis..."] 
        !93 = Apply(%90) [-1, str, (), String]
        !94 = Apply(!92, !93) [-1, concat, (), String] 
        !95 = Str [" entries, "]
        !96 = Apply(!94, !95) [-1, concat, (), String] 
        !97 = Apply(%89) [-1, str, (), String]
        !98 = Apply(!96, !97) [-1, concat, (), String] 
        !99 = Str [" cols, at "]
        !100 = Apply(!98, !99) [-1, concat, (), String] 
        !101 = SelectFields(%elt13) [(locus alleles)]
        !102 = Apply(!101) [-1, str, (), String]
        !103 = Apply(!100, !102) [-1, concat, (), String]
        Die(!103) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, -1]
      } else { %elt13 }
    }
  }
  !s25 = StreamMap(!s21) { (%elt14) =>
    %104 = CastRename(%elt14) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],`the entries! [877f12a8827e18f61222c6c8c5fb04a8]`:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}]
    !105 = SelectFields(%104) [(locus alleles)] 
    !106 = GetField(%104) [`the entries! [877f12a8827e18f61222c6c8c5fb04a8]`]
    !s22 = ToStream(!106) [False] 
    !107 = GetField(%29) [__cols]
    !s23 = ToStream(!107) [False]
    !s24 = StreamZip(!s22, !s23) [-1, AssumeSameLength] {
    (%elt15, %elt16) =>
      %108 = GetField(%104) [__row_uid]
      !109 = GetField(%104) [af] 
      !110 = GetField(%elt16) [pop]
      %111 = ApplyIR(!109, !110) [10, indexArray, 
      (), Float64]
      !112 = F64 [1.0]
      %113 = ApplyBinaryPrimOp(!112, %111) [Subtract]
      !114 = F64 [2.0]
      !115 = Apply(%113, !114) [13, pow, (), Float64] 
      !116 = F64 [2.0]
      !117 = ApplyBinaryPrimOp(!116, %111) [Multiply]
      !118 = ApplyBinaryPrimOp(!117, %113) [Multiply] 
      !119 = F64 [2.0]
      !120 = Apply(%111, !119) [16, pow, (), Float64]
      !121 = MakeArray(!115, !118, !120) [Array[Float64]] 
      !122 = RNGStateLiteral 
      !123 = GetTupleElement(%108) [0] 
      !124 = GetTupleElement(%108) [1] 
      !125 = GetField(%elt16) [__col_uid]
      !126 = MakeTuple(!123, !124, !125) [(0 1 2)]
      !127 = RNGSplit(!122, !126)
      !128 = ApplySeeded(!121, !127) [rand_cat, 2, Int32]
      !129 = Apply(!128) [17, UnphasedDiploidGtIndexCall, 
      (), Call]
      InsertFields %elt15 (GT: !129)
    }
    !130 = ToArray(!s24)
    InsertFields !105 (the entries! [877f12a8827e18f61222c6c8c5fb04a8]: !130)
  }
  !s26 = StreamMap(!s25) { (%elt17) =>
    %131 = CastRename(%elt17) [Struct{locus:Locus(GRCh37),alleles:Array[String],entries:Array[Struct{GT:Call}]}]
    %132 = GetField(%131) [entries]
    !133 = SelectFields(%131) [(locus alleles)] 
    !c0_6 = I32 [0]
    !134 = ArrayRef(%132, !c0_6) [24] 
    !c1_7 = I32 [1]
    !135 = ArrayRef(%132, !c1_7) [25] 
    !c2 = I32 [2]
    !136 = ArrayRef(%132, !c2) [26] 
    !c3 = I32 [3]
    !137 = ArrayRef(%132, !c3) [27]
    InsertFields !133 (0: !134, 1: !135, 2: !136, 3: !137)
  } 
  !138 = GetField(%ctx) [numberToTake]
  !s27 = StreamTake(!s26, !138)
  !s28 = StreamMap(!s27) { (%elt18) =>
    %139 = SelectFields(%elt18) [(locus alleles)]
    !140 = SelectFields(%139) [()] 
    !141 = GetField(%139) [locus]
    !142 = ApplySpecial(!141) [28, showStr, 
    (), String] 
    !143 = GetField(%139) [alleles]
    !144 = ApplySpecial(!143) [29, showStr, 
    (), String] 
    !145 = GetField(%elt18) [`0`]
    !146 = GetField(!145) [GT]
    !147 = ApplySpecial(!146) [30, showStr, 
    (), String] 
    !148 = GetField(%elt18) [`1`]
    !149 = GetField(!148) [GT]
    !150 = ApplySpecial(!149) [31, showStr, 
    (), String] 
    !151 = GetField(%elt18) [`2`]
    !152 = GetField(!151) [GT]
    !153 = ApplySpecial(!152) [32, showStr, 
    (), String] 
    !154 = GetField(%elt18) [`3`]
    !155 = GetField(!154) [GT]
    !156 = ApplySpecial(!155) [33, showStr, 
    (), String]
    InsertFields !140 (locus: !142, alleles: !144, 0.GT: !147, 1.GT: !150, 2.GT: !153, 3.GT: !156)
  }
  ToArray(!s28)
}
!s29 = ToStream(!157) [False]
!s30 = StreamFlatMap(!s29) { (%elt19) =>
  ToStream(%elt19) [False]
}
!158 = ToArray(!s30) 
!159 = SelectFields(%16) [()]
MakeStruct(rows: !158, global: !159)

2023-11-17 18:07:59.582 : INFO: after optimize: relationalLowerer, after LowerAndExecuteShuffles: IR size 361: 

%1 = RNGStateLiteral
!c0 = I32 [0] 
!c10 = I32 [10] 
!c1 = I32 [1]
!s = StreamRange(!c0, !c10, !c1) [1, False]
!s4 = StreamMap(!s) { (%elt) =>
  !2 = Cast(%elt) [Int64]
  %3 = MakeTuple(!2, %elt) [(0 1)]
  !4 = GetTupleElement(%3) [1] 
  !5 = EncodedLiteral [Array[Int32]]
  !s2 = ToStream(!5) [False]
  !s3 = StreamMap(!s2) { (%elt2) =>
    Cast(%elt2) [Float64]
  }
  !6 = ToArray(!s3) 
  !7 = GetTupleElement(%3) [0]
  !8 = RNGSplit(%1, !7)
  !9 = ApplySeeded(!6, !8) [rand_cat, 0, Int32]
  MakeStruct(sample_idx: !4, pop: !9)
}
!10 = ToArray(!s4)
%11 = MakeStruct(cols: !10)
!12 = GetField(%11) [cols]
!s5 = ToStream(!12) [False] 
!c0_2 = I32 [0] 
!c1_2 = I32 [1]
!s6 = StreamIota(!c0_2, !c1_2) [False]
!s7 = StreamZip(!s5, !s6) [34, TakeMinLength] {
(%elt3, %elt4) =>
  !13 = Cast(%elt4) [Int64]
  InsertFields %elt3 (__col_uid: !13)
}
!14 = ToArray(!s7)
%15 = InsertFields %11 (cols: !14)
%16 = CastRename(%15) [Struct{__cols:Array[Struct{sample_idx:Int32,pop:Int32,__col_uid:Int64}]}]
!17 = Literal [Array[Struct{numberToTake:Int32,old:Tuple[Int32,Interval[Struct{locus:Locus(GRCh37),alleles:Array[String]}],Tuple[Int64,Tuple[Int32,Int32]]]}], <literal value>]
!s8 = ToStream(!17) [False] 
%18 = MakeStruct(__iruid_1052: %15, __iruid_1054: %16)
!19 = IsNA(%18)
!27 = If !19 then {
  NA [Struct{__iruid_1052:Struct{cols:Array[Struct{}]},__iruid_1054:Struct{__cols:Array[Struct{sample_idx:Int32,pop:Int32,__col_uid:Int64}]}}]
} else {
  %20 = GetField(%18) [__iruid_1052]
  !21 = IsNA(%20)
  !25 = If !21 then {
    NA [Struct{cols:Array[Struct{}]}]
  } else {
    !22 = GetField(%20) [cols]
    !s9 = ToStream(!22) [False]
    !s10 = StreamMap(!s9) { (%elt5) =>
      !23 = IsNA(%elt5)
      If !23 then {
        NA [Struct{}]
      } else {
        Literal [Struct{}, <literal value>]
      }
    }
    !24 = ToArray(!s10)
    MakeStruct(cols: !24)
  } 
  !26 = GetField(%18) [__iruid_1054]
  MakeStruct(__iruid_1052: !25, __iruid_1054: !26)
} 
!28 = NA [String]
!157 = CollectDistributedArray(!s8, !27, !28) {
(%ctx, %g) =>
  %29 = GetField(%g) [__iruid_1054]
  %30 = GetField(%ctx) [old]
  %31 = GetField(%g) [__iruid_1052]
  %32 = GetTupleElement(%30) [1]
  %33 = GetTupleElement(%30) [2]
  %34 = GetTupleElement(%33) [0]
  !c0_3 = I32 [0] 
  !c1_3 = I32 [1]
  !s11 = StreamIota(!c0_3, !c1_3) [False] 
  !35 = RNGStateLiteral
  %36 = RNGSplit(!35, %34)
  %37 = GetTupleElement(%33) [1]
  !38 = GetTupleElement(%37) [0] 
  !39 = GetTupleElement(%37) [1] 
  !c1_4 = I32 [1]
  !s12 = StreamRange(!38, !39, !c1_4) [3, False]
  !s18 = StreamMap(!s12) { (%elt6) =>
    !40 = Cast(%elt6) [Int64]
    %41 = MakeTuple(!40, %elt6) [(0 1)]
    !42 = GetTupleElement(%41) [0]
    %43 = RNGSplit(%36, !42)
    !44 = F64 [0.1] 
    !45 = F64 [0.9]
    %46 = ApplySeeded(!44, !45, %43) [rand_unif, -1, Float64]
    !47 = GetTupleElement(%41) [1]
    !48 = Cast(!47) [Int64]
    !49 = Apply(!48) [5, globalPosToLocus, 
    (), Locus(GRCh37)] 
    !50 = EncodedLiteral [Array[String]] 
    !51 = EncodedLiteral [Array[Float64]]
    !s13 = ToStream(!51) [False] 
    !c0_4 = I32 [0] 
    !c1_5 = I32 [1]
    !s14 = StreamIota(!c0_4, !c1_5) [False]
    !s15 = StreamZip(!s13, !s14) [7, TakeMinLength] {
    (%elt7, %elt8) =>
      !52 = Cast(%elt8) [Int64]
      %53 = MakeTuple(!52, %elt7) [(0 1)]
      %54 = GetTupleElement(%53) [1]
      !55 = ApplyBinaryPrimOp(%46, %54) [Multiply] 
      !56 = F64 [1.0]
      !57 = ApplyBinaryPrimOp(!56, %46) [Subtract]
      !58 = ApplyBinaryPrimOp(!57, %54) [Multiply] 
      !59 = GetTupleElement(%53) [0]
      !60 = RNGSplit(%43, !59)
      ApplySeeded(!55, !58, !60) [rand_beta, 1, Float64]
    }
    !61 = ToArray(!s15) 
    !c0_5 = I32 [0] 
    !c10_2 = I32 [10] 
    !c1_6 = I32 [1]
    !s16 = StreamRange(!c0_5, !c10_2, !c1_6) [8, False]
    !s17 = StreamMap(!s16) { (%elt9) =>
      Literal [Struct{}, <literal value>]
    }
    !62 = ToArray(!s17)
    MakeStruct(locus: !49, alleles: !50, af: !61, entries: !62)
  }
  !s19 = StreamZip(!s11, !s18) [36, TakeMinLength] {
  (%elt10, %elt11) =>
    !63 = Cast(%elt10) [Int64]
    !64 = MakeTuple(%34, !63) [(0 1)]
    InsertFields %elt11 (__row_uid: !64)
  }
  !s20 = StreamMap(!s19) { (%elt12) =>
    !65 = SelectFields(%elt12) [(locus alleles)]
    !66 = ApplySpecial(%32, !65) [-1, contains, 
    (), Boolean]
    If !66 then { %elt12 } else {
      !67 = Str ["TableGen: ..."] 
      !68 = GetTupleElement(%30) [0]
      !69 = Apply(!68) [-1, str, (), String]
      !70 = Apply(!67, !69) [-1, concat, (), String] 
      !71 = Str ["\n\tRange bo..."]
      !72 = Apply(!70, !71) [-1, concat, (), String] 
      !73 = GetTupleElement(%30) [0]
      !74 = Apply(!73) [-1, str, (), String]
      !75 = Apply(!72, !74) [-1, concat, (), String] 
      !76 = Str [": "]
      !77 = Apply(!75, !76) [-1, concat, (), String] 
      !78 = Apply(%32) [-1, str, (), String]
      !79 = Apply(!77, !78) [-1, concat, (), String] 
      !80 = Str ["\n\tInvalid ..."]
      !81 = Apply(!79, !80) [-1, concat, (), String] 
      !82 = SelectFields(%elt12) [(locus alleles)]
      !83 = Apply(!82) [-1, str, (), String]
      !84 = Apply(!81, !83) [-1, concat, (), String]
      Die(!84) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, 9]
    }
  }
  !s21 = StreamMap(!s20) { (%elt13) =>
    %85 = GetField(%elt13) [entries]
    !86 = IsNA(%85)
    If !86 then {
      !87 = Str ["missing en..."]
      Die(!87) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, -1]
    } else {
      !88 = GetField(%31) [cols]
      %89 = ArrayLen(!88)
      %90 = ArrayLen(%85)
      !91 = ApplyComparisonOp(%90, %89) [NEQWithNA]
      If !91 then {
        !92 = Str ["length mis..."] 
        !93 = Apply(%90) [-1, str, (), String]
        !94 = Apply(!92, !93) [-1, concat, (), String] 
        !95 = Str [" entries, "]
        !96 = Apply(!94, !95) [-1, concat, (), String] 
        !97 = Apply(%89) [-1, str, (), String]
        !98 = Apply(!96, !97) [-1, concat, (), String] 
        !99 = Str [" cols, at "]
        !100 = Apply(!98, !99) [-1, concat, (), String] 
        !101 = SelectFields(%elt13) [(locus alleles)]
        !102 = Apply(!101) [-1, str, (), String]
        !103 = Apply(!100, !102) [-1, concat, (), String]
        Die(!103) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, -1]
      } else { %elt13 }
    }
  }
  !s25 = StreamMap(!s21) { (%elt14) =>
    %104 = CastRename(%elt14) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],`the entries! [877f12a8827e18f61222c6c8c5fb04a8]`:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}]
    !105 = SelectFields(%104) [(locus alleles)] 
    !106 = GetField(%104) [`the entries! [877f12a8827e18f61222c6c8c5fb04a8]`]
    !s22 = ToStream(!106) [False] 
    !107 = GetField(%29) [__cols]
    !s23 = ToStream(!107) [False]
    !s24 = StreamZip(!s22, !s23) [-1, AssumeSameLength] {
    (%elt15, %elt16) =>
      %108 = GetField(%104) [__row_uid]
      !109 = GetField(%104) [af] 
      !110 = GetField(%elt16) [pop]
      %111 = ApplyIR(!109, !110) [10, indexArray, 
      (), Float64]
      !112 = F64 [1.0]
      %113 = ApplyBinaryPrimOp(!112, %111) [Subtract]
      !114 = F64 [2.0]
      !115 = Apply(%113, !114) [13, pow, (), Float64] 
      !116 = F64 [2.0]
      !117 = ApplyBinaryPrimOp(!116, %111) [Multiply]
      !118 = ApplyBinaryPrimOp(!117, %113) [Multiply] 
      !119 = F64 [2.0]
      !120 = Apply(%111, !119) [16, pow, (), Float64]
      !121 = MakeArray(!115, !118, !120) [Array[Float64]] 
      !122 = RNGStateLiteral 
      !123 = GetTupleElement(%108) [0] 
      !124 = GetTupleElement(%108) [1] 
      !125 = GetField(%elt16) [__col_uid]
      !126 = MakeTuple(!123, !124, !125) [(0 1 2)]
      !127 = RNGSplit(!122, !126)
      !128 = ApplySeeded(!121, !127) [rand_cat, 2, Int32]
      !129 = Apply(!128) [17, UnphasedDiploidGtIndexCall, 
      (), Call]
      InsertFields %elt15 (GT: !129)
    }
    !130 = ToArray(!s24)
    InsertFields !105 (the entries! [877f12a8827e18f61222c6c8c5fb04a8]: !130)
  }
  !s26 = StreamMap(!s25) { (%elt17) =>
    %131 = CastRename(%elt17) [Struct{locus:Locus(GRCh37),alleles:Array[String],entries:Array[Struct{GT:Call}]}]
    %132 = GetField(%131) [entries]
    !133 = SelectFields(%131) [(locus alleles)] 
    !c0_6 = I32 [0]
    !134 = ArrayRef(%132, !c0_6) [24] 
    !c1_7 = I32 [1]
    !135 = ArrayRef(%132, !c1_7) [25] 
    !c2 = I32 [2]
    !136 = ArrayRef(%132, !c2) [26] 
    !c3 = I32 [3]
    !137 = ArrayRef(%132, !c3) [27]
    InsertFields !133 (0: !134, 1: !135, 2: !136, 3: !137)
  } 
  !138 = GetField(%ctx) [numberToTake]
  !s27 = StreamTake(!s26, !138)
  !s28 = StreamMap(!s27) { (%elt18) =>
    %139 = SelectFields(%elt18) [(locus alleles)]
    !140 = SelectFields(%139) [()] 
    !141 = GetField(%139) [locus]
    !142 = ApplySpecial(!141) [28, showStr, 
    (), String] 
    !143 = GetField(%139) [alleles]
    !144 = ApplySpecial(!143) [29, showStr, 
    (), String] 
    !145 = GetField(%elt18) [`0`]
    !146 = GetField(!145) [GT]
    !147 = ApplySpecial(!146) [30, showStr, 
    (), String] 
    !148 = GetField(%elt18) [`1`]
    !149 = GetField(!148) [GT]
    !150 = ApplySpecial(!149) [31, showStr, 
    (), String] 
    !151 = GetField(%elt18) [`2`]
    !152 = GetField(!151) [GT]
    !153 = ApplySpecial(!152) [32, showStr, 
    (), String] 
    !154 = GetField(%elt18) [`3`]
    !155 = GetField(!154) [GT]
    !156 = ApplySpecial(!155) [33, showStr, 
    (), String]
    InsertFields !140 (locus: !142, alleles: !144, 0.GT: !147, 1.GT: !150, 2.GT: !153, 3.GT: !156)
  }
  ToArray(!s28)
}
!s29 = ToStream(!157) [False]
!s30 = StreamFlatMap(!s29) { (%elt19) =>
  ToStream(%elt19) [False]
}
!158 = ToArray(!s30) 
!159 = SelectFields(%16) [()]
MakeStruct(rows: !158, global: !159)

2023-11-17 18:07:59.587 : INFO: after LowerOrInterpretNonCompilable: IR size 361: 

%1 = RNGStateLiteral
!c0 = I32 [0] 
!c10 = I32 [10] 
!c1 = I32 [1]
!s = StreamRange(!c0, !c10, !c1) [1, False]
!s4 = StreamMap(!s) { (%elt) =>
  !2 = Cast(%elt) [Int64]
  %3 = MakeTuple(!2, %elt) [(0 1)]
  !4 = GetTupleElement(%3) [1] 
  !5 = EncodedLiteral [Array[Int32]]
  !s2 = ToStream(!5) [False]
  !s3 = StreamMap(!s2) { (%elt2) =>
    Cast(%elt2) [Float64]
  }
  !6 = ToArray(!s3) 
  !7 = GetTupleElement(%3) [0]
  !8 = RNGSplit(%1, !7)
  !9 = ApplySeeded(!6, !8) [rand_cat, 0, Int32]
  MakeStruct(sample_idx: !4, pop: !9)
}
!10 = ToArray(!s4)
%11 = MakeStruct(cols: !10)
!12 = GetField(%11) [cols]
!s5 = ToStream(!12) [False] 
!c0_2 = I32 [0] 
!c1_2 = I32 [1]
!s6 = StreamIota(!c0_2, !c1_2) [False]
!s7 = StreamZip(!s5, !s6) [34, TakeMinLength] {
(%elt3, %elt4) =>
  !13 = Cast(%elt4) [Int64]
  InsertFields %elt3 (__col_uid: !13)
}
!14 = ToArray(!s7)
%15 = InsertFields %11 (cols: !14)
%16 = CastRename(%15) [Struct{__cols:Array[Struct{sample_idx:Int32,pop:Int32,__col_uid:Int64}]}]
!17 = Literal [Array[Struct{numberToTake:Int32,old:Tuple[Int32,Interval[Struct{locus:Locus(GRCh37),alleles:Array[String]}],Tuple[Int64,Tuple[Int32,Int32]]]}], <literal value>]
!s8 = ToStream(!17) [False] 
%18 = MakeStruct(__iruid_1052: %15, __iruid_1054: %16)
!19 = IsNA(%18)
!27 = If !19 then {
  NA [Struct{__iruid_1052:Struct{cols:Array[Struct{}]},__iruid_1054:Struct{__cols:Array[Struct{sample_idx:Int32,pop:Int32,__col_uid:Int64}]}}]
} else {
  %20 = GetField(%18) [__iruid_1052]
  !21 = IsNA(%20)
  !25 = If !21 then {
    NA [Struct{cols:Array[Struct{}]}]
  } else {
    !22 = GetField(%20) [cols]
    !s9 = ToStream(!22) [False]
    !s10 = StreamMap(!s9) { (%elt5) =>
      !23 = IsNA(%elt5)
      If !23 then {
        NA [Struct{}]
      } else {
        Literal [Struct{}, <literal value>]
      }
    }
    !24 = ToArray(!s10)
    MakeStruct(cols: !24)
  } 
  !26 = GetField(%18) [__iruid_1054]
  MakeStruct(__iruid_1052: !25, __iruid_1054: !26)
} 
!28 = NA [String]
!157 = CollectDistributedArray(!s8, !27, !28) {
(%ctx, %g) =>
  %29 = GetField(%g) [__iruid_1054]
  %30 = GetField(%ctx) [old]
  %31 = GetField(%g) [__iruid_1052]
  %32 = GetTupleElement(%30) [1]
  %33 = GetTupleElement(%30) [2]
  %34 = GetTupleElement(%33) [0]
  !c0_3 = I32 [0] 
  !c1_3 = I32 [1]
  !s11 = StreamIota(!c0_3, !c1_3) [False] 
  !35 = RNGStateLiteral
  %36 = RNGSplit(!35, %34)
  %37 = GetTupleElement(%33) [1]
  !38 = GetTupleElement(%37) [0] 
  !39 = GetTupleElement(%37) [1] 
  !c1_4 = I32 [1]
  !s12 = StreamRange(!38, !39, !c1_4) [3, False]
  !s18 = StreamMap(!s12) { (%elt6) =>
    !40 = Cast(%elt6) [Int64]
    %41 = MakeTuple(!40, %elt6) [(0 1)]
    !42 = GetTupleElement(%41) [0]
    %43 = RNGSplit(%36, !42)
    !44 = F64 [0.1] 
    !45 = F64 [0.9]
    %46 = ApplySeeded(!44, !45, %43) [rand_unif, -1, Float64]
    !47 = GetTupleElement(%41) [1]
    !48 = Cast(!47) [Int64]
    !49 = Apply(!48) [5, globalPosToLocus, 
    (), Locus(GRCh37)] 
    !50 = EncodedLiteral [Array[String]] 
    !51 = EncodedLiteral [Array[Float64]]
    !s13 = ToStream(!51) [False] 
    !c0_4 = I32 [0] 
    !c1_5 = I32 [1]
    !s14 = StreamIota(!c0_4, !c1_5) [False]
    !s15 = StreamZip(!s13, !s14) [7, TakeMinLength] {
    (%elt7, %elt8) =>
      !52 = Cast(%elt8) [Int64]
      %53 = MakeTuple(!52, %elt7) [(0 1)]
      %54 = GetTupleElement(%53) [1]
      !55 = ApplyBinaryPrimOp(%46, %54) [Multiply] 
      !56 = F64 [1.0]
      !57 = ApplyBinaryPrimOp(!56, %46) [Subtract]
      !58 = ApplyBinaryPrimOp(!57, %54) [Multiply] 
      !59 = GetTupleElement(%53) [0]
      !60 = RNGSplit(%43, !59)
      ApplySeeded(!55, !58, !60) [rand_beta, 1, Float64]
    }
    !61 = ToArray(!s15) 
    !c0_5 = I32 [0] 
    !c10_2 = I32 [10] 
    !c1_6 = I32 [1]
    !s16 = StreamRange(!c0_5, !c10_2, !c1_6) [8, False]
    !s17 = StreamMap(!s16) { (%elt9) =>
      Literal [Struct{}, <literal value>]
    }
    !62 = ToArray(!s17)
    MakeStruct(locus: !49, alleles: !50, af: !61, entries: !62)
  }
  !s19 = StreamZip(!s11, !s18) [36, TakeMinLength] {
  (%elt10, %elt11) =>
    !63 = Cast(%elt10) [Int64]
    !64 = MakeTuple(%34, !63) [(0 1)]
    InsertFields %elt11 (__row_uid: !64)
  }
  !s20 = StreamMap(!s19) { (%elt12) =>
    !65 = SelectFields(%elt12) [(locus alleles)]
    !66 = ApplySpecial(%32, !65) [-1, contains, 
    (), Boolean]
    If !66 then { %elt12 } else {
      !67 = Str ["TableGen: ..."] 
      !68 = GetTupleElement(%30) [0]
      !69 = Apply(!68) [-1, str, (), String]
      !70 = Apply(!67, !69) [-1, concat, (), String] 
      !71 = Str ["\n\tRange bo..."]
      !72 = Apply(!70, !71) [-1, concat, (), String] 
      !73 = GetTupleElement(%30) [0]
      !74 = Apply(!73) [-1, str, (), String]
      !75 = Apply(!72, !74) [-1, concat, (), String] 
      !76 = Str [": "]
      !77 = Apply(!75, !76) [-1, concat, (), String] 
      !78 = Apply(%32) [-1, str, (), String]
      !79 = Apply(!77, !78) [-1, concat, (), String] 
      !80 = Str ["\n\tInvalid ..."]
      !81 = Apply(!79, !80) [-1, concat, (), String] 
      !82 = SelectFields(%elt12) [(locus alleles)]
      !83 = Apply(!82) [-1, str, (), String]
      !84 = Apply(!81, !83) [-1, concat, (), String]
      Die(!84) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, 9]
    }
  }
  !s21 = StreamMap(!s20) { (%elt13) =>
    %85 = GetField(%elt13) [entries]
    !86 = IsNA(%85)
    If !86 then {
      !87 = Str ["missing en..."]
      Die(!87) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, -1]
    } else {
      !88 = GetField(%31) [cols]
      %89 = ArrayLen(!88)
      %90 = ArrayLen(%85)
      !91 = ApplyComparisonOp(%90, %89) [NEQWithNA]
      If !91 then {
        !92 = Str ["length mis..."] 
        !93 = Apply(%90) [-1, str, (), String]
        !94 = Apply(!92, !93) [-1, concat, (), String] 
        !95 = Str [" entries, "]
        !96 = Apply(!94, !95) [-1, concat, (), String] 
        !97 = Apply(%89) [-1, str, (), String]
        !98 = Apply(!96, !97) [-1, concat, (), String] 
        !99 = Str [" cols, at "]
        !100 = Apply(!98, !99) [-1, concat, (), String] 
        !101 = SelectFields(%elt13) [(locus alleles)]
        !102 = Apply(!101) [-1, str, (), String]
        !103 = Apply(!100, !102) [-1, concat, (), String]
        Die(!103) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, -1]
      } else { %elt13 }
    }
  }
  !s25 = StreamMap(!s21) { (%elt14) =>
    %104 = CastRename(%elt14) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],`the entries! [877f12a8827e18f61222c6c8c5fb04a8]`:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}]
    !105 = SelectFields(%104) [(locus alleles)] 
    !106 = GetField(%104) [`the entries! [877f12a8827e18f61222c6c8c5fb04a8]`]
    !s22 = ToStream(!106) [False] 
    !107 = GetField(%29) [__cols]
    !s23 = ToStream(!107) [False]
    !s24 = StreamZip(!s22, !s23) [-1, AssumeSameLength] {
    (%elt15, %elt16) =>
      %108 = GetField(%104) [__row_uid]
      !109 = GetField(%104) [af] 
      !110 = GetField(%elt16) [pop]
      %111 = ApplyIR(!109, !110) [10, indexArray, 
      (), Float64]
      !112 = F64 [1.0]
      %113 = ApplyBinaryPrimOp(!112, %111) [Subtract]
      !114 = F64 [2.0]
      !115 = Apply(%113, !114) [13, pow, (), Float64] 
      !116 = F64 [2.0]
      !117 = ApplyBinaryPrimOp(!116, %111) [Multiply]
      !118 = ApplyBinaryPrimOp(!117, %113) [Multiply] 
      !119 = F64 [2.0]
      !120 = Apply(%111, !119) [16, pow, (), Float64]
      !121 = MakeArray(!115, !118, !120) [Array[Float64]] 
      !122 = RNGStateLiteral 
      !123 = GetTupleElement(%108) [0] 
      !124 = GetTupleElement(%108) [1] 
      !125 = GetField(%elt16) [__col_uid]
      !126 = MakeTuple(!123, !124, !125) [(0 1 2)]
      !127 = RNGSplit(!122, !126)
      !128 = ApplySeeded(!121, !127) [rand_cat, 2, Int32]
      !129 = Apply(!128) [17, UnphasedDiploidGtIndexCall, 
      (), Call]
      InsertFields %elt15 (GT: !129)
    }
    !130 = ToArray(!s24)
    InsertFields !105 (the entries! [877f12a8827e18f61222c6c8c5fb04a8]: !130)
  }
  !s26 = StreamMap(!s25) { (%elt17) =>
    %131 = CastRename(%elt17) [Struct{locus:Locus(GRCh37),alleles:Array[String],entries:Array[Struct{GT:Call}]}]
    %132 = GetField(%131) [entries]
    !133 = SelectFields(%131) [(locus alleles)] 
    !c0_6 = I32 [0]
    !134 = ArrayRef(%132, !c0_6) [24] 
    !c1_7 = I32 [1]
    !135 = ArrayRef(%132, !c1_7) [25] 
    !c2 = I32 [2]
    !136 = ArrayRef(%132, !c2) [26] 
    !c3 = I32 [3]
    !137 = ArrayRef(%132, !c3) [27]
    InsertFields !133 (0: !134, 1: !135, 2: !136, 3: !137)
  } 
  !138 = GetField(%ctx) [numberToTake]
  !s27 = StreamTake(!s26, !138)
  !s28 = StreamMap(!s27) { (%elt18) =>
    %139 = SelectFields(%elt18) [(locus alleles)]
    !140 = SelectFields(%139) [()] 
    !141 = GetField(%139) [locus]
    !142 = ApplySpecial(!141) [28, showStr, 
    (), String] 
    !143 = GetField(%139) [alleles]
    !144 = ApplySpecial(!143) [29, showStr, 
    (), String] 
    !145 = GetField(%elt18) [`0`]
    !146 = GetField(!145) [GT]
    !147 = ApplySpecial(!146) [30, showStr, 
    (), String] 
    !148 = GetField(%elt18) [`1`]
    !149 = GetField(!148) [GT]
    !150 = ApplySpecial(!149) [31, showStr, 
    (), String] 
    !151 = GetField(%elt18) [`2`]
    !152 = GetField(!151) [GT]
    !153 = ApplySpecial(!152) [32, showStr, 
    (), String] 
    !154 = GetField(%elt18) [`3`]
    !155 = GetField(!154) [GT]
    !156 = ApplySpecial(!155) [33, showStr, 
    (), String]
    InsertFields !140 (locus: !142, alleles: !144, 0.GT: !147, 1.GT: !150, 2.GT: !153, 3.GT: !156)
  }
  ToArray(!s28)
}
!s29 = ToStream(!157) [False]
!s30 = StreamFlatMap(!s29) { (%elt19) =>
  ToStream(%elt19) [False]
}
!158 = ToArray(!s30) 
!159 = SelectFields(%16) [()]
MakeStruct(rows: !158, global: !159)

2023-11-17 18:07:59.625 : INFO: after optimize: relationalLowerer, after LowerOrInterpretNonCompilable: IR size 361: 

%1 = RNGStateLiteral
!c0 = I32 [0] 
!c10 = I32 [10] 
!c1 = I32 [1]
!s = StreamRange(!c0, !c10, !c1) [1, False]
!s4 = StreamMap(!s) { (%elt) =>
  !2 = Cast(%elt) [Int64]
  %3 = MakeTuple(!2, %elt) [(0 1)]
  !4 = GetTupleElement(%3) [1] 
  !5 = EncodedLiteral [Array[Int32]]
  !s2 = ToStream(!5) [False]
  !s3 = StreamMap(!s2) { (%elt2) =>
    Cast(%elt2) [Float64]
  }
  !6 = ToArray(!s3) 
  !7 = GetTupleElement(%3) [0]
  !8 = RNGSplit(%1, !7)
  !9 = ApplySeeded(!6, !8) [rand_cat, 0, Int32]
  MakeStruct(sample_idx: !4, pop: !9)
}
!10 = ToArray(!s4)
%11 = MakeStruct(cols: !10)
!12 = GetField(%11) [cols]
!s5 = ToStream(!12) [False] 
!c0_2 = I32 [0] 
!c1_2 = I32 [1]
!s6 = StreamIota(!c0_2, !c1_2) [False]
!s7 = StreamZip(!s5, !s6) [34, TakeMinLength] {
(%elt3, %elt4) =>
  !13 = Cast(%elt4) [Int64]
  InsertFields %elt3 (__col_uid: !13)
}
!14 = ToArray(!s7)
%15 = InsertFields %11 (cols: !14)
%16 = CastRename(%15) [Struct{__cols:Array[Struct{sample_idx:Int32,pop:Int32,__col_uid:Int64}]}]
!17 = Literal [Array[Struct{numberToTake:Int32,old:Tuple[Int32,Interval[Struct{locus:Locus(GRCh37),alleles:Array[String]}],Tuple[Int64,Tuple[Int32,Int32]]]}], <literal value>]
!s8 = ToStream(!17) [False] 
%18 = MakeStruct(__iruid_1052: %15, __iruid_1054: %16)
!19 = IsNA(%18)
!27 = If !19 then {
  NA [Struct{__iruid_1052:Struct{cols:Array[Struct{}]},__iruid_1054:Struct{__cols:Array[Struct{sample_idx:Int32,pop:Int32,__col_uid:Int64}]}}]
} else {
  %20 = GetField(%18) [__iruid_1052]
  !21 = IsNA(%20)
  !25 = If !21 then {
    NA [Struct{cols:Array[Struct{}]}]
  } else {
    !22 = GetField(%20) [cols]
    !s9 = ToStream(!22) [False]
    !s10 = StreamMap(!s9) { (%elt5) =>
      !23 = IsNA(%elt5)
      If !23 then {
        NA [Struct{}]
      } else {
        Literal [Struct{}, <literal value>]
      }
    }
    !24 = ToArray(!s10)
    MakeStruct(cols: !24)
  } 
  !26 = GetField(%18) [__iruid_1054]
  MakeStruct(__iruid_1052: !25, __iruid_1054: !26)
} 
!28 = NA [String]
!157 = CollectDistributedArray(!s8, !27, !28) {
(%ctx, %g) =>
  %29 = GetField(%g) [__iruid_1054]
  %30 = GetField(%ctx) [old]
  %31 = GetField(%g) [__iruid_1052]
  %32 = GetTupleElement(%30) [1]
  %33 = GetTupleElement(%30) [2]
  %34 = GetTupleElement(%33) [0]
  !c0_3 = I32 [0] 
  !c1_3 = I32 [1]
  !s11 = StreamIota(!c0_3, !c1_3) [False] 
  !35 = RNGStateLiteral
  %36 = RNGSplit(!35, %34)
  %37 = GetTupleElement(%33) [1]
  !38 = GetTupleElement(%37) [0] 
  !39 = GetTupleElement(%37) [1] 
  !c1_4 = I32 [1]
  !s12 = StreamRange(!38, !39, !c1_4) [3, False]
  !s18 = StreamMap(!s12) { (%elt6) =>
    !40 = Cast(%elt6) [Int64]
    %41 = MakeTuple(!40, %elt6) [(0 1)]
    !42 = GetTupleElement(%41) [0]
    %43 = RNGSplit(%36, !42)
    !44 = F64 [0.1] 
    !45 = F64 [0.9]
    %46 = ApplySeeded(!44, !45, %43) [rand_unif, -1, Float64]
    !47 = GetTupleElement(%41) [1]
    !48 = Cast(!47) [Int64]
    !49 = Apply(!48) [5, globalPosToLocus, 
    (), Locus(GRCh37)] 
    !50 = EncodedLiteral [Array[String]] 
    !51 = EncodedLiteral [Array[Float64]]
    !s13 = ToStream(!51) [False] 
    !c0_4 = I32 [0] 
    !c1_5 = I32 [1]
    !s14 = StreamIota(!c0_4, !c1_5) [False]
    !s15 = StreamZip(!s13, !s14) [7, TakeMinLength] {
    (%elt7, %elt8) =>
      !52 = Cast(%elt8) [Int64]
      %53 = MakeTuple(!52, %elt7) [(0 1)]
      %54 = GetTupleElement(%53) [1]
      !55 = ApplyBinaryPrimOp(%46, %54) [Multiply] 
      !56 = F64 [1.0]
      !57 = ApplyBinaryPrimOp(!56, %46) [Subtract]
      !58 = ApplyBinaryPrimOp(!57, %54) [Multiply] 
      !59 = GetTupleElement(%53) [0]
      !60 = RNGSplit(%43, !59)
      ApplySeeded(!55, !58, !60) [rand_beta, 1, Float64]
    }
    !61 = ToArray(!s15) 
    !c0_5 = I32 [0] 
    !c10_2 = I32 [10] 
    !c1_6 = I32 [1]
    !s16 = StreamRange(!c0_5, !c10_2, !c1_6) [8, False]
    !s17 = StreamMap(!s16) { (%elt9) =>
      Literal [Struct{}, <literal value>]
    }
    !62 = ToArray(!s17)
    MakeStruct(locus: !49, alleles: !50, af: !61, entries: !62)
  }
  !s19 = StreamZip(!s11, !s18) [36, TakeMinLength] {
  (%elt10, %elt11) =>
    !63 = Cast(%elt10) [Int64]
    !64 = MakeTuple(%34, !63) [(0 1)]
    InsertFields %elt11 (__row_uid: !64)
  }
  !s20 = StreamMap(!s19) { (%elt12) =>
    !65 = SelectFields(%elt12) [(locus alleles)]
    !66 = ApplySpecial(%32, !65) [-1, contains, 
    (), Boolean]
    If !66 then { %elt12 } else {
      !67 = Str ["TableGen: ..."] 
      !68 = GetTupleElement(%30) [0]
      !69 = Apply(!68) [-1, str, (), String]
      !70 = Apply(!67, !69) [-1, concat, (), String] 
      !71 = Str ["\n\tRange bo..."]
      !72 = Apply(!70, !71) [-1, concat, (), String] 
      !73 = GetTupleElement(%30) [0]
      !74 = Apply(!73) [-1, str, (), String]
      !75 = Apply(!72, !74) [-1, concat, (), String] 
      !76 = Str [": "]
      !77 = Apply(!75, !76) [-1, concat, (), String] 
      !78 = Apply(%32) [-1, str, (), String]
      !79 = Apply(!77, !78) [-1, concat, (), String] 
      !80 = Str ["\n\tInvalid ..."]
      !81 = Apply(!79, !80) [-1, concat, (), String] 
      !82 = SelectFields(%elt12) [(locus alleles)]
      !83 = Apply(!82) [-1, str, (), String]
      !84 = Apply(!81, !83) [-1, concat, (), String]
      Die(!84) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, 9]
    }
  }
  !s21 = StreamMap(!s20) { (%elt13) =>
    %85 = GetField(%elt13) [entries]
    !86 = IsNA(%85)
    If !86 then {
      !87 = Str ["missing en..."]
      Die(!87) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, -1]
    } else {
      !88 = GetField(%31) [cols]
      %89 = ArrayLen(!88)
      %90 = ArrayLen(%85)
      !91 = ApplyComparisonOp(%90, %89) [NEQWithNA]
      If !91 then {
        !92 = Str ["length mis..."] 
        !93 = Apply(%90) [-1, str, (), String]
        !94 = Apply(!92, !93) [-1, concat, (), String] 
        !95 = Str [" entries, "]
        !96 = Apply(!94, !95) [-1, concat, (), String] 
        !97 = Apply(%89) [-1, str, (), String]
        !98 = Apply(!96, !97) [-1, concat, (), String] 
        !99 = Str [" cols, at "]
        !100 = Apply(!98, !99) [-1, concat, (), String] 
        !101 = SelectFields(%elt13) [(locus alleles)]
        !102 = Apply(!101) [-1, str, (), String]
        !103 = Apply(!100, !102) [-1, concat, (), String]
        Die(!103) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, -1]
      } else { %elt13 }
    }
  }
  !s25 = StreamMap(!s21) { (%elt14) =>
    %104 = CastRename(%elt14) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],`the entries! [877f12a8827e18f61222c6c8c5fb04a8]`:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}]
    !105 = SelectFields(%104) [(locus alleles)] 
    !106 = GetField(%104) [`the entries! [877f12a8827e18f61222c6c8c5fb04a8]`]
    !s22 = ToStream(!106) [False] 
    !107 = GetField(%29) [__cols]
    !s23 = ToStream(!107) [False]
    !s24 = StreamZip(!s22, !s23) [-1, AssumeSameLength] {
    (%elt15, %elt16) =>
      %108 = GetField(%104) [__row_uid]
      !109 = GetField(%104) [af] 
      !110 = GetField(%elt16) [pop]
      %111 = ApplyIR(!109, !110) [10, indexArray, 
      (), Float64]
      !112 = F64 [1.0]
      %113 = ApplyBinaryPrimOp(!112, %111) [Subtract]
      !114 = F64 [2.0]
      !115 = Apply(%113, !114) [13, pow, (), Float64] 
      !116 = F64 [2.0]
      !117 = ApplyBinaryPrimOp(!116, %111) [Multiply]
      !118 = ApplyBinaryPrimOp(!117, %113) [Multiply] 
      !119 = F64 [2.0]
      !120 = Apply(%111, !119) [16, pow, (), Float64]
      !121 = MakeArray(!115, !118, !120) [Array[Float64]] 
      !122 = RNGStateLiteral 
      !123 = GetTupleElement(%108) [0] 
      !124 = GetTupleElement(%108) [1] 
      !125 = GetField(%elt16) [__col_uid]
      !126 = MakeTuple(!123, !124, !125) [(0 1 2)]
      !127 = RNGSplit(!122, !126)
      !128 = ApplySeeded(!121, !127) [rand_cat, 2, Int32]
      !129 = Apply(!128) [17, UnphasedDiploidGtIndexCall, 
      (), Call]
      InsertFields %elt15 (GT: !129)
    }
    !130 = ToArray(!s24)
    InsertFields !105 (the entries! [877f12a8827e18f61222c6c8c5fb04a8]: !130)
  }
  !s26 = StreamMap(!s25) { (%elt17) =>
    %131 = CastRename(%elt17) [Struct{locus:Locus(GRCh37),alleles:Array[String],entries:Array[Struct{GT:Call}]}]
    %132 = GetField(%131) [entries]
    !133 = SelectFields(%131) [(locus alleles)] 
    !c0_6 = I32 [0]
    !134 = ArrayRef(%132, !c0_6) [24] 
    !c1_7 = I32 [1]
    !135 = ArrayRef(%132, !c1_7) [25] 
    !c2 = I32 [2]
    !136 = ArrayRef(%132, !c2) [26] 
    !c3 = I32 [3]
    !137 = ArrayRef(%132, !c3) [27]
    InsertFields !133 (0: !134, 1: !135, 2: !136, 3: !137)
  } 
  !138 = GetField(%ctx) [numberToTake]
  !s27 = StreamTake(!s26, !138)
  !s28 = StreamMap(!s27) { (%elt18) =>
    %139 = SelectFields(%elt18) [(locus alleles)]
    !140 = SelectFields(%139) [()] 
    !141 = GetField(%139) [locus]
    !142 = ApplySpecial(!141) [28, showStr, 
    (), String] 
    !143 = GetField(%139) [alleles]
    !144 = ApplySpecial(!143) [29, showStr, 
    (), String] 
    !145 = GetField(%elt18) [`0`]
    !146 = GetField(!145) [GT]
    !147 = ApplySpecial(!146) [30, showStr, 
    (), String] 
    !148 = GetField(%elt18) [`1`]
    !149 = GetField(!148) [GT]
    !150 = ApplySpecial(!149) [31, showStr, 
    (), String] 
    !151 = GetField(%elt18) [`2`]
    !152 = GetField(!151) [GT]
    !153 = ApplySpecial(!152) [32, showStr, 
    (), String] 
    !154 = GetField(%elt18) [`3`]
    !155 = GetField(!154) [GT]
    !156 = ApplySpecial(!155) [33, showStr, 
    (), String]
    InsertFields !140 (locus: !142, alleles: !144, 0.GT: !147, 1.GT: !150, 2.GT: !153, 3.GT: !156)
  }
  ToArray(!s28)
}
!s29 = ToStream(!157) [False]
!s30 = StreamFlatMap(!s29) { (%elt19) =>
  ToStream(%elt19) [False]
}
!158 = ToArray(!s30) 
!159 = SelectFields(%16) [()]
MakeStruct(rows: !158, global: !159)

2023-11-17 18:07:59.631 : INFO: initial IR: IR size 362: 

%1 = RNGStateLiteral
!c0 = I32 [0] 
!c10 = I32 [10] 
!c1 = I32 [1]
!s = StreamRange(!c0, !c10, !c1) [1, False]
!s4 = StreamMap(!s) { (%elt) =>
  !2 = Cast(%elt) [Int64]
  %3 = MakeTuple(!2, %elt) [(0 1)]
  !4 = GetTupleElement(%3) [1] 
  !5 = EncodedLiteral [Array[Int32]]
  !s2 = ToStream(!5) [False]
  !s3 = StreamMap(!s2) { (%elt2) =>
    Cast(%elt2) [Float64]
  }
  !6 = ToArray(!s3) 
  !7 = GetTupleElement(%3) [0]
  !8 = RNGSplit(%1, !7)
  !9 = ApplySeeded(!6, !8) [rand_cat, 0, Int32]
  MakeStruct(sample_idx: !4, pop: !9)
}
!10 = ToArray(!s4)
%11 = MakeStruct(cols: !10)
!12 = GetField(%11) [cols]
!s5 = ToStream(!12) [False] 
!c0_2 = I32 [0] 
!c1_2 = I32 [1]
!s6 = StreamIota(!c0_2, !c1_2) [False]
!s7 = StreamZip(!s5, !s6) [34, TakeMinLength] {
(%elt3, %elt4) =>
  !13 = Cast(%elt4) [Int64]
  InsertFields %elt3 (__col_uid: !13)
}
!14 = ToArray(!s7)
%15 = InsertFields %11 (cols: !14)
%16 = CastRename(%15) [Struct{__cols:Array[Struct{sample_idx:Int32,pop:Int32,__col_uid:Int64}]}]
!17 = Literal [Array[Struct{numberToTake:Int32,old:Tuple[Int32,Interval[Struct{locus:Locus(GRCh37),alleles:Array[String]}],Tuple[Int64,Tuple[Int32,Int32]]]}], <literal value>]
!s8 = ToStream(!17) [False] 
%18 = MakeStruct(__iruid_1052: %15, __iruid_1054: %16)
!19 = IsNA(%18)
!27 = If !19 then {
  NA [Struct{__iruid_1052:Struct{cols:Array[Struct{}]},__iruid_1054:Struct{__cols:Array[Struct{sample_idx:Int32,pop:Int32,__col_uid:Int64}]}}]
} else {
  %20 = GetField(%18) [__iruid_1052]
  !21 = IsNA(%20)
  !25 = If !21 then {
    NA [Struct{cols:Array[Struct{}]}]
  } else {
    !22 = GetField(%20) [cols]
    !s9 = ToStream(!22) [False]
    !s10 = StreamMap(!s9) { (%elt5) =>
      !23 = IsNA(%elt5)
      If !23 then {
        NA [Struct{}]
      } else {
        Literal [Struct{}, <literal value>]
      }
    }
    !24 = ToArray(!s10)
    MakeStruct(cols: !24)
  } 
  !26 = GetField(%18) [__iruid_1054]
  MakeStruct(__iruid_1052: !25, __iruid_1054: !26)
} 
!28 = NA [String]
!157 = CollectDistributedArray(!s8, !27, !28) {
(%ctx, %g) =>
  %29 = GetField(%g) [__iruid_1054]
  %30 = GetField(%ctx) [old]
  %31 = GetField(%g) [__iruid_1052]
  %32 = GetTupleElement(%30) [1]
  %33 = GetTupleElement(%30) [2]
  %34 = GetTupleElement(%33) [0]
  !c0_3 = I32 [0] 
  !c1_3 = I32 [1]
  !s11 = StreamIota(!c0_3, !c1_3) [False] 
  !35 = RNGStateLiteral
  %36 = RNGSplit(!35, %34)
  %37 = GetTupleElement(%33) [1]
  !38 = GetTupleElement(%37) [0] 
  !39 = GetTupleElement(%37) [1] 
  !c1_4 = I32 [1]
  !s12 = StreamRange(!38, !39, !c1_4) [3, False]
  !s18 = StreamMap(!s12) { (%elt6) =>
    !40 = Cast(%elt6) [Int64]
    %41 = MakeTuple(!40, %elt6) [(0 1)]
    !42 = GetTupleElement(%41) [0]
    %43 = RNGSplit(%36, !42)
    !44 = F64 [0.1] 
    !45 = F64 [0.9]
    %46 = ApplySeeded(!44, !45, %43) [rand_unif, -1, Float64]
    !47 = GetTupleElement(%41) [1]
    !48 = Cast(!47) [Int64]
    !49 = Apply(!48) [5, globalPosToLocus, 
    (), Locus(GRCh37)] 
    !50 = EncodedLiteral [Array[String]] 
    !51 = EncodedLiteral [Array[Float64]]
    !s13 = ToStream(!51) [False] 
    !c0_4 = I32 [0] 
    !c1_5 = I32 [1]
    !s14 = StreamIota(!c0_4, !c1_5) [False]
    !s15 = StreamZip(!s13, !s14) [7, TakeMinLength] {
    (%elt7, %elt8) =>
      !52 = Cast(%elt8) [Int64]
      %53 = MakeTuple(!52, %elt7) [(0 1)]
      %54 = GetTupleElement(%53) [1]
      !55 = ApplyBinaryPrimOp(%46, %54) [Multiply] 
      !56 = F64 [1.0]
      !57 = ApplyBinaryPrimOp(!56, %46) [Subtract]
      !58 = ApplyBinaryPrimOp(!57, %54) [Multiply] 
      !59 = GetTupleElement(%53) [0]
      !60 = RNGSplit(%43, !59)
      ApplySeeded(!55, !58, !60) [rand_beta, 1, Float64]
    }
    !61 = ToArray(!s15) 
    !c0_5 = I32 [0] 
    !c10_2 = I32 [10] 
    !c1_6 = I32 [1]
    !s16 = StreamRange(!c0_5, !c10_2, !c1_6) [8, False]
    !s17 = StreamMap(!s16) { (%elt9) =>
      Literal [Struct{}, <literal value>]
    }
    !62 = ToArray(!s17)
    MakeStruct(locus: !49, alleles: !50, af: !61, entries: !62)
  }
  !s19 = StreamZip(!s11, !s18) [36, TakeMinLength] {
  (%elt10, %elt11) =>
    !63 = Cast(%elt10) [Int64]
    !64 = MakeTuple(%34, !63) [(0 1)]
    InsertFields %elt11 (__row_uid: !64)
  }
  !s20 = StreamMap(!s19) { (%elt12) =>
    !65 = SelectFields(%elt12) [(locus alleles)]
    !66 = ApplySpecial(%32, !65) [-1, contains, 
    (), Boolean]
    If !66 then { %elt12 } else {
      !67 = Str ["TableGen: ..."] 
      !68 = GetTupleElement(%30) [0]
      !69 = Apply(!68) [-1, str, (), String]
      !70 = Apply(!67, !69) [-1, concat, (), String] 
      !71 = Str ["\n\tRange bo..."]
      !72 = Apply(!70, !71) [-1, concat, (), String] 
      !73 = GetTupleElement(%30) [0]
      !74 = Apply(!73) [-1, str, (), String]
      !75 = Apply(!72, !74) [-1, concat, (), String] 
      !76 = Str [": "]
      !77 = Apply(!75, !76) [-1, concat, (), String] 
      !78 = Apply(%32) [-1, str, (), String]
      !79 = Apply(!77, !78) [-1, concat, (), String] 
      !80 = Str ["\n\tInvalid ..."]
      !81 = Apply(!79, !80) [-1, concat, (), String] 
      !82 = SelectFields(%elt12) [(locus alleles)]
      !83 = Apply(!82) [-1, str, (), String]
      !84 = Apply(!81, !83) [-1, concat, (), String]
      Die(!84) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, 9]
    }
  }
  !s21 = StreamMap(!s20) { (%elt13) =>
    %85 = GetField(%elt13) [entries]
    !86 = IsNA(%85)
    If !86 then {
      !87 = Str ["missing en..."]
      Die(!87) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, -1]
    } else {
      !88 = GetField(%31) [cols]
      %89 = ArrayLen(!88)
      %90 = ArrayLen(%85)
      !91 = ApplyComparisonOp(%90, %89) [NEQWithNA]
      If !91 then {
        !92 = Str ["length mis..."] 
        !93 = Apply(%90) [-1, str, (), String]
        !94 = Apply(!92, !93) [-1, concat, (), String] 
        !95 = Str [" entries, "]
        !96 = Apply(!94, !95) [-1, concat, (), String] 
        !97 = Apply(%89) [-1, str, (), String]
        !98 = Apply(!96, !97) [-1, concat, (), String] 
        !99 = Str [" cols, at "]
        !100 = Apply(!98, !99) [-1, concat, (), String] 
        !101 = SelectFields(%elt13) [(locus alleles)]
        !102 = Apply(!101) [-1, str, (), String]
        !103 = Apply(!100, !102) [-1, concat, (), String]
        Die(!103) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, -1]
      } else { %elt13 }
    }
  }
  !s25 = StreamMap(!s21) { (%elt14) =>
    %104 = CastRename(%elt14) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],`the entries! [877f12a8827e18f61222c6c8c5fb04a8]`:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}]
    !105 = SelectFields(%104) [(locus alleles)] 
    !106 = GetField(%104) [`the entries! [877f12a8827e18f61222c6c8c5fb04a8]`]
    !s22 = ToStream(!106) [False] 
    !107 = GetField(%29) [__cols]
    !s23 = ToStream(!107) [False]
    !s24 = StreamZip(!s22, !s23) [-1, AssumeSameLength] {
    (%elt15, %elt16) =>
      %108 = GetField(%104) [__row_uid]
      !109 = GetField(%104) [af] 
      !110 = GetField(%elt16) [pop]
      %111 = ApplyIR(!109, !110) [10, indexArray, 
      (), Float64]
      !112 = F64 [1.0]
      %113 = ApplyBinaryPrimOp(!112, %111) [Subtract]
      !114 = F64 [2.0]
      !115 = Apply(%113, !114) [13, pow, (), Float64] 
      !116 = F64 [2.0]
      !117 = ApplyBinaryPrimOp(!116, %111) [Multiply]
      !118 = ApplyBinaryPrimOp(!117, %113) [Multiply] 
      !119 = F64 [2.0]
      !120 = Apply(%111, !119) [16, pow, (), Float64]
      !121 = MakeArray(!115, !118, !120) [Array[Float64]] 
      !122 = RNGStateLiteral 
      !123 = GetTupleElement(%108) [0] 
      !124 = GetTupleElement(%108) [1] 
      !125 = GetField(%elt16) [__col_uid]
      !126 = MakeTuple(!123, !124, !125) [(0 1 2)]
      !127 = RNGSplit(!122, !126)
      !128 = ApplySeeded(!121, !127) [rand_cat, 2, Int32]
      !129 = Apply(!128) [17, UnphasedDiploidGtIndexCall, 
      (), Call]
      InsertFields %elt15 (GT: !129)
    }
    !130 = ToArray(!s24)
    InsertFields !105 (the entries! [877f12a8827e18f61222c6c8c5fb04a8]: !130)
  }
  !s26 = StreamMap(!s25) { (%elt17) =>
    %131 = CastRename(%elt17) [Struct{locus:Locus(GRCh37),alleles:Array[String],entries:Array[Struct{GT:Call}]}]
    %132 = GetField(%131) [entries]
    !133 = SelectFields(%131) [(locus alleles)] 
    !c0_6 = I32 [0]
    !134 = ArrayRef(%132, !c0_6) [24] 
    !c1_7 = I32 [1]
    !135 = ArrayRef(%132, !c1_7) [25] 
    !c2 = I32 [2]
    !136 = ArrayRef(%132, !c2) [26] 
    !c3 = I32 [3]
    !137 = ArrayRef(%132, !c3) [27]
    InsertFields !133 (0: !134, 1: !135, 2: !136, 3: !137)
  } 
  !138 = GetField(%ctx) [numberToTake]
  !s27 = StreamTake(!s26, !138)
  !s28 = StreamMap(!s27) { (%elt18) =>
    %139 = SelectFields(%elt18) [(locus alleles)]
    !140 = SelectFields(%139) [()] 
    !141 = GetField(%139) [locus]
    !142 = ApplySpecial(!141) [28, showStr, 
    (), String] 
    !143 = GetField(%139) [alleles]
    !144 = ApplySpecial(!143) [29, showStr, 
    (), String] 
    !145 = GetField(%elt18) [`0`]
    !146 = GetField(!145) [GT]
    !147 = ApplySpecial(!146) [30, showStr, 
    (), String] 
    !148 = GetField(%elt18) [`1`]
    !149 = GetField(!148) [GT]
    !150 = ApplySpecial(!149) [31, showStr, 
    (), String] 
    !151 = GetField(%elt18) [`2`]
    !152 = GetField(!151) [GT]
    !153 = ApplySpecial(!152) [32, showStr, 
    (), String] 
    !154 = GetField(%elt18) [`3`]
    !155 = GetField(!154) [GT]
    !156 = ApplySpecial(!155) [33, showStr, 
    (), String]
    InsertFields !140 (locus: !142, alleles: !144, 0.GT: !147, 1.GT: !150, 2.GT: !153, 3.GT: !156)
  }
  ToArray(!s28)
}
!s29 = ToStream(!157) [False]
!s30 = StreamFlatMap(!s29) { (%elt19) =>
  ToStream(%elt19) [False]
}
!158 = ToArray(!s30) 
!159 = SelectFields(%16) [()]
!160 = MakeStruct(rows: !158, global: !159)
MakeTuple(!160) [(0)]

2023-11-17 18:07:59.670 : INFO: after optimize: compileLowerer, initial IR: IR size 362: 

%1 = RNGStateLiteral
!c0 = I32 [0] 
!c10 = I32 [10] 
!c1 = I32 [1]
!s = StreamRange(!c0, !c10, !c1) [1, False]
!s4 = StreamMap(!s) { (%elt) =>
  !2 = Cast(%elt) [Int64]
  %3 = MakeTuple(!2, %elt) [(0 1)]
  !4 = GetTupleElement(%3) [1] 
  !5 = EncodedLiteral [Array[Int32]]
  !s2 = ToStream(!5) [False]
  !s3 = StreamMap(!s2) { (%elt2) =>
    Cast(%elt2) [Float64]
  }
  !6 = ToArray(!s3) 
  !7 = GetTupleElement(%3) [0]
  !8 = RNGSplit(%1, !7)
  !9 = ApplySeeded(!6, !8) [rand_cat, 0, Int32]
  MakeStruct(sample_idx: !4, pop: !9)
}
!10 = ToArray(!s4)
%11 = MakeStruct(cols: !10)
!12 = GetField(%11) [cols]
!s5 = ToStream(!12) [False] 
!c0_2 = I32 [0] 
!c1_2 = I32 [1]
!s6 = StreamIota(!c0_2, !c1_2) [False]
!s7 = StreamZip(!s5, !s6) [34, TakeMinLength] {
(%elt3, %elt4) =>
  !13 = Cast(%elt4) [Int64]
  InsertFields %elt3 (__col_uid: !13)
}
!14 = ToArray(!s7)
%15 = InsertFields %11 (cols: !14)
%16 = CastRename(%15) [Struct{__cols:Array[Struct{sample_idx:Int32,pop:Int32,__col_uid:Int64}]}]
!17 = Literal [Array[Struct{numberToTake:Int32,old:Tuple[Int32,Interval[Struct{locus:Locus(GRCh37),alleles:Array[String]}],Tuple[Int64,Tuple[Int32,Int32]]]}], <literal value>]
!s8 = ToStream(!17) [False] 
%18 = MakeStruct(__iruid_1052: %15, __iruid_1054: %16)
!19 = IsNA(%18)
!27 = If !19 then {
  NA [Struct{__iruid_1052:Struct{cols:Array[Struct{}]},__iruid_1054:Struct{__cols:Array[Struct{sample_idx:Int32,pop:Int32,__col_uid:Int64}]}}]
} else {
  %20 = GetField(%18) [__iruid_1052]
  !21 = IsNA(%20)
  !25 = If !21 then {
    NA [Struct{cols:Array[Struct{}]}]
  } else {
    !22 = GetField(%20) [cols]
    !s9 = ToStream(!22) [False]
    !s10 = StreamMap(!s9) { (%elt5) =>
      !23 = IsNA(%elt5)
      If !23 then {
        NA [Struct{}]
      } else {
        Literal [Struct{}, <literal value>]
      }
    }
    !24 = ToArray(!s10)
    MakeStruct(cols: !24)
  } 
  !26 = GetField(%18) [__iruid_1054]
  MakeStruct(__iruid_1052: !25, __iruid_1054: !26)
} 
!28 = NA [String]
!157 = CollectDistributedArray(!s8, !27, !28) {
(%ctx, %g) =>
  %29 = GetField(%g) [__iruid_1054]
  %30 = GetField(%ctx) [old]
  %31 = GetField(%g) [__iruid_1052]
  %32 = GetTupleElement(%30) [1]
  %33 = GetTupleElement(%30) [2]
  %34 = GetTupleElement(%33) [0]
  !c0_3 = I32 [0] 
  !c1_3 = I32 [1]
  !s11 = StreamIota(!c0_3, !c1_3) [False] 
  !35 = RNGStateLiteral
  %36 = RNGSplit(!35, %34)
  %37 = GetTupleElement(%33) [1]
  !38 = GetTupleElement(%37) [0] 
  !39 = GetTupleElement(%37) [1] 
  !c1_4 = I32 [1]
  !s12 = StreamRange(!38, !39, !c1_4) [3, False]
  !s18 = StreamMap(!s12) { (%elt6) =>
    !40 = Cast(%elt6) [Int64]
    %41 = MakeTuple(!40, %elt6) [(0 1)]
    !42 = GetTupleElement(%41) [0]
    %43 = RNGSplit(%36, !42)
    !44 = F64 [0.1] 
    !45 = F64 [0.9]
    %46 = ApplySeeded(!44, !45, %43) [rand_unif, -1, Float64]
    !47 = GetTupleElement(%41) [1]
    !48 = Cast(!47) [Int64]
    !49 = Apply(!48) [5, globalPosToLocus, 
    (), Locus(GRCh37)] 
    !50 = EncodedLiteral [Array[String]] 
    !51 = EncodedLiteral [Array[Float64]]
    !s13 = ToStream(!51) [False] 
    !c0_4 = I32 [0] 
    !c1_5 = I32 [1]
    !s14 = StreamIota(!c0_4, !c1_5) [False]
    !s15 = StreamZip(!s13, !s14) [7, TakeMinLength] {
    (%elt7, %elt8) =>
      !52 = Cast(%elt8) [Int64]
      %53 = MakeTuple(!52, %elt7) [(0 1)]
      %54 = GetTupleElement(%53) [1]
      !55 = ApplyBinaryPrimOp(%46, %54) [Multiply] 
      !56 = F64 [1.0]
      !57 = ApplyBinaryPrimOp(!56, %46) [Subtract]
      !58 = ApplyBinaryPrimOp(!57, %54) [Multiply] 
      !59 = GetTupleElement(%53) [0]
      !60 = RNGSplit(%43, !59)
      ApplySeeded(!55, !58, !60) [rand_beta, 1, Float64]
    }
    !61 = ToArray(!s15) 
    !c0_5 = I32 [0] 
    !c10_2 = I32 [10] 
    !c1_6 = I32 [1]
    !s16 = StreamRange(!c0_5, !c10_2, !c1_6) [8, False]
    !s17 = StreamMap(!s16) { (%elt9) =>
      Literal [Struct{}, <literal value>]
    }
    !62 = ToArray(!s17)
    MakeStruct(locus: !49, alleles: !50, af: !61, entries: !62)
  }
  !s19 = StreamZip(!s11, !s18) [36, TakeMinLength] {
  (%elt10, %elt11) =>
    !63 = Cast(%elt10) [Int64]
    !64 = MakeTuple(%34, !63) [(0 1)]
    InsertFields %elt11 (__row_uid: !64)
  }
  !s20 = StreamMap(!s19) { (%elt12) =>
    !65 = SelectFields(%elt12) [(locus alleles)]
    !66 = ApplySpecial(%32, !65) [-1, contains, 
    (), Boolean]
    If !66 then { %elt12 } else {
      !67 = Str ["TableGen: ..."] 
      !68 = GetTupleElement(%30) [0]
      !69 = Apply(!68) [-1, str, (), String]
      !70 = Apply(!67, !69) [-1, concat, (), String] 
      !71 = Str ["\n\tRange bo..."]
      !72 = Apply(!70, !71) [-1, concat, (), String] 
      !73 = GetTupleElement(%30) [0]
      !74 = Apply(!73) [-1, str, (), String]
      !75 = Apply(!72, !74) [-1, concat, (), String] 
      !76 = Str [": "]
      !77 = Apply(!75, !76) [-1, concat, (), String] 
      !78 = Apply(%32) [-1, str, (), String]
      !79 = Apply(!77, !78) [-1, concat, (), String] 
      !80 = Str ["\n\tInvalid ..."]
      !81 = Apply(!79, !80) [-1, concat, (), String] 
      !82 = SelectFields(%elt12) [(locus alleles)]
      !83 = Apply(!82) [-1, str, (), String]
      !84 = Apply(!81, !83) [-1, concat, (), String]
      Die(!84) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, 9]
    }
  }
  !s21 = StreamMap(!s20) { (%elt13) =>
    %85 = GetField(%elt13) [entries]
    !86 = IsNA(%85)
    If !86 then {
      !87 = Str ["missing en..."]
      Die(!87) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, -1]
    } else {
      !88 = GetField(%31) [cols]
      %89 = ArrayLen(!88)
      %90 = ArrayLen(%85)
      !91 = ApplyComparisonOp(%90, %89) [NEQWithNA]
      If !91 then {
        !92 = Str ["length mis..."] 
        !93 = Apply(%90) [-1, str, (), String]
        !94 = Apply(!92, !93) [-1, concat, (), String] 
        !95 = Str [" entries, "]
        !96 = Apply(!94, !95) [-1, concat, (), String] 
        !97 = Apply(%89) [-1, str, (), String]
        !98 = Apply(!96, !97) [-1, concat, (), String] 
        !99 = Str [" cols, at "]
        !100 = Apply(!98, !99) [-1, concat, (), String] 
        !101 = SelectFields(%elt13) [(locus alleles)]
        !102 = Apply(!101) [-1, str, (), String]
        !103 = Apply(!100, !102) [-1, concat, (), String]
        Die(!103) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, -1]
      } else { %elt13 }
    }
  }
  !s25 = StreamMap(!s21) { (%elt14) =>
    %104 = CastRename(%elt14) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],`the entries! [877f12a8827e18f61222c6c8c5fb04a8]`:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}]
    !105 = SelectFields(%104) [(locus alleles)] 
    !106 = GetField(%104) [`the entries! [877f12a8827e18f61222c6c8c5fb04a8]`]
    !s22 = ToStream(!106) [False] 
    !107 = GetField(%29) [__cols]
    !s23 = ToStream(!107) [False]
    !s24 = StreamZip(!s22, !s23) [-1, AssumeSameLength] {
    (%elt15, %elt16) =>
      %108 = GetField(%104) [__row_uid]
      !109 = GetField(%104) [af] 
      !110 = GetField(%elt16) [pop]
      %111 = ApplyIR(!109, !110) [10, indexArray, 
      (), Float64]
      !112 = F64 [1.0]
      %113 = ApplyBinaryPrimOp(!112, %111) [Subtract]
      !114 = F64 [2.0]
      !115 = Apply(%113, !114) [13, pow, (), Float64] 
      !116 = F64 [2.0]
      !117 = ApplyBinaryPrimOp(!116, %111) [Multiply]
      !118 = ApplyBinaryPrimOp(!117, %113) [Multiply] 
      !119 = F64 [2.0]
      !120 = Apply(%111, !119) [16, pow, (), Float64]
      !121 = MakeArray(!115, !118, !120) [Array[Float64]] 
      !122 = RNGStateLiteral 
      !123 = GetTupleElement(%108) [0] 
      !124 = GetTupleElement(%108) [1] 
      !125 = GetField(%elt16) [__col_uid]
      !126 = MakeTuple(!123, !124, !125) [(0 1 2)]
      !127 = RNGSplit(!122, !126)
      !128 = ApplySeeded(!121, !127) [rand_cat, 2, Int32]
      !129 = Apply(!128) [17, UnphasedDiploidGtIndexCall, 
      (), Call]
      InsertFields %elt15 (GT: !129)
    }
    !130 = ToArray(!s24)
    InsertFields !105 (the entries! [877f12a8827e18f61222c6c8c5fb04a8]: !130)
  }
  !s26 = StreamMap(!s25) { (%elt17) =>
    %131 = CastRename(%elt17) [Struct{locus:Locus(GRCh37),alleles:Array[String],entries:Array[Struct{GT:Call}]}]
    %132 = GetField(%131) [entries]
    !133 = SelectFields(%131) [(locus alleles)] 
    !c0_6 = I32 [0]
    !134 = ArrayRef(%132, !c0_6) [24] 
    !c1_7 = I32 [1]
    !135 = ArrayRef(%132, !c1_7) [25] 
    !c2 = I32 [2]
    !136 = ArrayRef(%132, !c2) [26] 
    !c3 = I32 [3]
    !137 = ArrayRef(%132, !c3) [27]
    InsertFields !133 (0: !134, 1: !135, 2: !136, 3: !137)
  } 
  !138 = GetField(%ctx) [numberToTake]
  !s27 = StreamTake(!s26, !138)
  !s28 = StreamMap(!s27) { (%elt18) =>
    %139 = SelectFields(%elt18) [(locus alleles)]
    !140 = SelectFields(%139) [()] 
    !141 = GetField(%139) [locus]
    !142 = ApplySpecial(!141) [28, showStr, 
    (), String] 
    !143 = GetField(%139) [alleles]
    !144 = ApplySpecial(!143) [29, showStr, 
    (), String] 
    !145 = GetField(%elt18) [`0`]
    !146 = GetField(!145) [GT]
    !147 = ApplySpecial(!146) [30, showStr, 
    (), String] 
    !148 = GetField(%elt18) [`1`]
    !149 = GetField(!148) [GT]
    !150 = ApplySpecial(!149) [31, showStr, 
    (), String] 
    !151 = GetField(%elt18) [`2`]
    !152 = GetField(!151) [GT]
    !153 = ApplySpecial(!152) [32, showStr, 
    (), String] 
    !154 = GetField(%elt18) [`3`]
    !155 = GetField(!154) [GT]
    !156 = ApplySpecial(!155) [33, showStr, 
    (), String]
    InsertFields !140 (locus: !142, alleles: !144, 0.GT: !147, 1.GT: !150, 2.GT: !153, 3.GT: !156)
  }
  ToArray(!s28)
}
!s29 = ToStream(!157) [False]
!s30 = StreamFlatMap(!s29) { (%elt19) =>
  ToStream(%elt19) [False]
}
!158 = ToArray(!s30) 
!159 = SelectFields(%16) [()]
!160 = MakeStruct(rows: !158, global: !159)
MakeTuple(!160) [(0)]

2023-11-17 18:07:59.675 : INFO: after InlineApplyIR: IR size 374: 

%1 = RNGStateLiteral
!c0 = I32 [0] 
!c10 = I32 [10] 
!c1 = I32 [1]
!s = StreamRange(!c0, !c10, !c1) [1, False]
!s4 = StreamMap(!s) { (%elt) =>
  !2 = Cast(%elt) [Int64]
  %3 = MakeTuple(!2, %elt) [(0 1)]
  !4 = GetTupleElement(%3) [1] 
  !5 = EncodedLiteral [Array[Int32]]
  !s2 = ToStream(!5) [False]
  !s3 = StreamMap(!s2) { (%elt2) =>
    Cast(%elt2) [Float64]
  }
  !6 = ToArray(!s3) 
  !7 = GetTupleElement(%3) [0]
  !8 = RNGSplit(%1, !7)
  !9 = ApplySeeded(!6, !8) [rand_cat, 0, Int32]
  MakeStruct(sample_idx: !4, pop: !9)
}
!10 = ToArray(!s4)
%11 = MakeStruct(cols: !10)
!12 = GetField(%11) [cols]
!s5 = ToStream(!12) [False] 
!c0_2 = I32 [0] 
!c1_2 = I32 [1]
!s6 = StreamIota(!c0_2, !c1_2) [False]
!s7 = StreamZip(!s5, !s6) [34, TakeMinLength] {
(%elt3, %elt4) =>
  !13 = Cast(%elt4) [Int64]
  InsertFields %elt3 (__col_uid: !13)
}
!14 = ToArray(!s7)
%15 = InsertFields %11 (cols: !14)
%16 = CastRename(%15) [Struct{__cols:Array[Struct{sample_idx:Int32,pop:Int32,__col_uid:Int64}]}]
!17 = Literal [Array[Struct{numberToTake:Int32,old:Tuple[Int32,Interval[Struct{locus:Locus(GRCh37),alleles:Array[String]}],Tuple[Int64,Tuple[Int32,Int32]]]}], <literal value>]
!s8 = ToStream(!17) [False] 
%18 = MakeStruct(__iruid_1052: %15, __iruid_1054: %16)
!19 = IsNA(%18)
!27 = If !19 then {
  NA [Struct{__iruid_1052:Struct{cols:Array[Struct{}]},__iruid_1054:Struct{__cols:Array[Struct{sample_idx:Int32,pop:Int32,__col_uid:Int64}]}}]
} else {
  %20 = GetField(%18) [__iruid_1052]
  !21 = IsNA(%20)
  !25 = If !21 then {
    NA [Struct{cols:Array[Struct{}]}]
  } else {
    !22 = GetField(%20) [cols]
    !s9 = ToStream(!22) [False]
    !s10 = StreamMap(!s9) { (%elt5) =>
      !23 = IsNA(%elt5)
      If !23 then {
        NA [Struct{}]
      } else {
        Literal [Struct{}, <literal value>]
      }
    }
    !24 = ToArray(!s10)
    MakeStruct(cols: !24)
  } 
  !26 = GetField(%18) [__iruid_1054]
  MakeStruct(__iruid_1052: !25, __iruid_1054: !26)
} 
!28 = NA [String]
!160 = CollectDistributedArray(!s8, !27, !28) {
(%ctx, %g) =>
  %29 = GetField(%g) [__iruid_1054]
  %30 = GetField(%ctx) [old]
  %31 = GetField(%g) [__iruid_1052]
  %32 = GetTupleElement(%30) [1]
  %33 = GetTupleElement(%30) [2]
  %34 = GetTupleElement(%33) [0]
  !c0_3 = I32 [0] 
  !c1_3 = I32 [1]
  !s11 = StreamIota(!c0_3, !c1_3) [False] 
  !35 = RNGStateLiteral
  %36 = RNGSplit(!35, %34)
  %37 = GetTupleElement(%33) [1]
  !38 = GetTupleElement(%37) [0] 
  !39 = GetTupleElement(%37) [1] 
  !c1_4 = I32 [1]
  !s12 = StreamRange(!38, !39, !c1_4) [3, False]
  !s18 = StreamMap(!s12) { (%elt6) =>
    !40 = Cast(%elt6) [Int64]
    %41 = MakeTuple(!40, %elt6) [(0 1)]
    !42 = GetTupleElement(%41) [0]
    %43 = RNGSplit(%36, !42)
    !44 = F64 [0.1] 
    !45 = F64 [0.9]
    %46 = ApplySeeded(!44, !45, %43) [rand_unif, -1, Float64]
    !47 = GetTupleElement(%41) [1]
    !48 = Cast(!47) [Int64]
    !49 = Apply(!48) [5, globalPosToLocus, 
    (), Locus(GRCh37)] 
    !50 = EncodedLiteral [Array[String]] 
    !51 = EncodedLiteral [Array[Float64]]
    !s13 = ToStream(!51) [False] 
    !c0_4 = I32 [0] 
    !c1_5 = I32 [1]
    !s14 = StreamIota(!c0_4, !c1_5) [False]
    !s15 = StreamZip(!s13, !s14) [7, TakeMinLength] {
    (%elt7, %elt8) =>
      !52 = Cast(%elt8) [Int64]
      %53 = MakeTuple(!52, %elt7) [(0 1)]
      %54 = GetTupleElement(%53) [1]
      !55 = ApplyBinaryPrimOp(%46, %54) [Multiply] 
      !56 = F64 [1.0]
      !57 = ApplyBinaryPrimOp(!56, %46) [Subtract]
      !58 = ApplyBinaryPrimOp(!57, %54) [Multiply] 
      !59 = GetTupleElement(%53) [0]
      !60 = RNGSplit(%43, !59)
      ApplySeeded(!55, !58, !60) [rand_beta, 1, Float64]
    }
    !61 = ToArray(!s15) 
    !c0_5 = I32 [0] 
    !c10_2 = I32 [10] 
    !c1_6 = I32 [1]
    !s16 = StreamRange(!c0_5, !c10_2, !c1_6) [8, False]
    !s17 = StreamMap(!s16) { (%elt9) =>
      Literal [Struct{}, <literal value>]
    }
    !62 = ToArray(!s17)
    MakeStruct(locus: !49, alleles: !50, af: !61, entries: !62)
  }
  !s19 = StreamZip(!s11, !s18) [36, TakeMinLength] {
  (%elt10, %elt11) =>
    !63 = Cast(%elt10) [Int64]
    !64 = MakeTuple(%34, !63) [(0 1)]
    InsertFields %elt11 (__row_uid: !64)
  }
  !s20 = StreamMap(!s19) { (%elt12) =>
    !65 = SelectFields(%elt12) [(locus alleles)]
    !66 = ApplySpecial(%32, !65) [-1, contains, 
    (), Boolean]
    If !66 then { %elt12 } else {
      !67 = Str ["TableGen: ..."] 
      !68 = GetTupleElement(%30) [0]
      !69 = Apply(!68) [-1, str, (), String]
      !70 = Apply(!67, !69) [-1, concat, (), String] 
      !71 = Str ["\n\tRange bo..."]
      !72 = Apply(!70, !71) [-1, concat, (), String] 
      !73 = GetTupleElement(%30) [0]
      !74 = Apply(!73) [-1, str, (), String]
      !75 = Apply(!72, !74) [-1, concat, (), String] 
      !76 = Str [": "]
      !77 = Apply(!75, !76) [-1, concat, (), String] 
      !78 = Apply(%32) [-1, str, (), String]
      !79 = Apply(!77, !78) [-1, concat, (), String] 
      !80 = Str ["\n\tInvalid ..."]
      !81 = Apply(!79, !80) [-1, concat, (), String] 
      !82 = SelectFields(%elt12) [(locus alleles)]
      !83 = Apply(!82) [-1, str, (), String]
      !84 = Apply(!81, !83) [-1, concat, (), String]
      Die(!84) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, 9]
    }
  }
  !s21 = StreamMap(!s20) { (%elt13) =>
    %85 = GetField(%elt13) [entries]
    !86 = IsNA(%85)
    If !86 then {
      !87 = Str ["missing en..."]
      Die(!87) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, -1]
    } else {
      !88 = GetField(%31) [cols]
      %89 = ArrayLen(!88)
      %90 = ArrayLen(%85)
      !91 = ApplyComparisonOp(%90, %89) [NEQWithNA]
      If !91 then {
        !92 = Str ["length mis..."] 
        !93 = Apply(%90) [-1, str, (), String]
        !94 = Apply(!92, !93) [-1, concat, (), String] 
        !95 = Str [" entries, "]
        !96 = Apply(!94, !95) [-1, concat, (), String] 
        !97 = Apply(%89) [-1, str, (), String]
        !98 = Apply(!96, !97) [-1, concat, (), String] 
        !99 = Str [" cols, at "]
        !100 = Apply(!98, !99) [-1, concat, (), String] 
        !101 = SelectFields(%elt13) [(locus alleles)]
        !102 = Apply(!101) [-1, str, (), String]
        !103 = Apply(!100, !102) [-1, concat, (), String]
        Die(!103) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, -1]
      } else { %elt13 }
    }
  }
  !s25 = StreamMap(!s21) { (%elt14) =>
    %104 = CastRename(%elt14) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],`the entries! [877f12a8827e18f61222c6c8c5fb04a8]`:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}]
    !105 = SelectFields(%104) [(locus alleles)] 
    !106 = GetField(%104) [`the entries! [877f12a8827e18f61222c6c8c5fb04a8]`]
    !s22 = ToStream(!106) [False] 
    !107 = GetField(%29) [__cols]
    !s23 = ToStream(!107) [False]
    !s24 = StreamZip(!s22, !s23) [-1, AssumeSameLength] {
    (%elt15, %elt16) =>
      %108 = GetField(%104) [__row_uid]
      %109 = GetField(%104) [af]
      %110 = GetField(%elt16) [pop]
      !c0_6 = I32 [0]
      !111 = ApplyComparisonOp(%110, !c0_6) [LT]
      !113 = If !111 then {
        !112 = ArrayLen(%109)
        ApplyBinaryPrimOp(!112, %110) [Add]
      } else { %110 }
      %114 = ArrayRef(%109, !113) [10]
      !115 = F64 [1.0]
      %116 = ApplyBinaryPrimOp(!115, %114) [Subtract]
      !117 = F64 [2.0]
      !118 = Apply(%116, !117) [13, pow, (), Float64] 
      !119 = F64 [2.0]
      !120 = ApplyBinaryPrimOp(!119, %114) [Multiply]
      !121 = ApplyBinaryPrimOp(!120, %116) [Multiply] 
      !122 = F64 [2.0]
      !123 = Apply(%114, !122) [16, pow, (), Float64]
      !124 = MakeArray(!118, !121, !123) [Array[Float64]] 
      !125 = RNGStateLiteral 
      !126 = GetTupleElement(%108) [0] 
      !127 = GetTupleElement(%108) [1] 
      !128 = GetField(%elt16) [__col_uid]
      !129 = MakeTuple(!126, !127, !128) [(0 1 2)]
      !130 = RNGSplit(!125, !129)
      !131 = ApplySeeded(!124, !130) [rand_cat, 2, Int32]
      !132 = Apply(!131) [17, UnphasedDiploidGtIndexCall, 
      (), Call]
      InsertFields %elt15 (GT: !132)
    }
    !133 = ToArray(!s24)
    InsertFields !105 (the entries! [877f12a8827e18f61222c6c8c5fb04a8]: !133)
  }
  !s26 = StreamMap(!s25) { (%elt17) =>
    %134 = CastRename(%elt17) [Struct{locus:Locus(GRCh37),alleles:Array[String],entries:Array[Struct{GT:Call}]}]
    %135 = GetField(%134) [entries]
    !136 = SelectFields(%134) [(locus alleles)] 
    !c0_7 = I32 [0]
    !137 = ArrayRef(%135, !c0_7) [24] 
    !c1_7 = I32 [1]
    !138 = ArrayRef(%135, !c1_7) [25] 
    !c2 = I32 [2]
    !139 = ArrayRef(%135, !c2) [26] 
    !c3 = I32 [3]
    !140 = ArrayRef(%135, !c3) [27]
    InsertFields !136 (0: !137, 1: !138, 2: !139, 3: !140)
  } 
  !141 = GetField(%ctx) [numberToTake]
  !s27 = StreamTake(!s26, !141)
  !s28 = StreamMap(!s27) { (%elt18) =>
    %142 = SelectFields(%elt18) [(locus alleles)]
    !143 = SelectFields(%142) [()] 
    !144 = GetField(%142) [locus]
    !145 = ApplySpecial(!144) [28, showStr, 
    (), String] 
    !146 = GetField(%142) [alleles]
    !147 = ApplySpecial(!146) [29, showStr, 
    (), String] 
    !148 = GetField(%elt18) [`0`]
    !149 = GetField(!148) [GT]
    !150 = ApplySpecial(!149) [30, showStr, 
    (), String] 
    !151 = GetField(%elt18) [`1`]
    !152 = GetField(!151) [GT]
    !153 = ApplySpecial(!152) [31, showStr, 
    (), String] 
    !154 = GetField(%elt18) [`2`]
    !155 = GetField(!154) [GT]
    !156 = ApplySpecial(!155) [32, showStr, 
    (), String] 
    !157 = GetField(%elt18) [`3`]
    !158 = GetField(!157) [GT]
    !159 = ApplySpecial(!158) [33, showStr, 
    (), String]
    InsertFields !143 (locus: !145, alleles: !147, 0.GT: !150, 1.GT: !153, 2.GT: !156, 3.GT: !159)
  }
  ToArray(!s28)
}
!s29 = ToStream(!160) [False]
!s30 = StreamFlatMap(!s29) { (%elt19) =>
  ToStream(%elt19) [False]
}
!161 = ToArray(!s30) 
!162 = SelectFields(%16) [()]
!163 = MakeStruct(rows: !161, global: !162)
MakeTuple(!163) [(0)]

2023-11-17 18:07:59.713 : INFO: after optimize: compileLowerer, after InlineApplyIR: IR size 374: 

%1 = RNGStateLiteral
!c0 = I32 [0] 
!c10 = I32 [10] 
!c1 = I32 [1]
!s = StreamRange(!c0, !c10, !c1) [1, False]
!s4 = StreamMap(!s) { (%elt) =>
  !2 = Cast(%elt) [Int64]
  %3 = MakeTuple(!2, %elt) [(0 1)]
  !4 = GetTupleElement(%3) [1] 
  !5 = EncodedLiteral [Array[Int32]]
  !s2 = ToStream(!5) [False]
  !s3 = StreamMap(!s2) { (%elt2) =>
    Cast(%elt2) [Float64]
  }
  !6 = ToArray(!s3) 
  !7 = GetTupleElement(%3) [0]
  !8 = RNGSplit(%1, !7)
  !9 = ApplySeeded(!6, !8) [rand_cat, 0, Int32]
  MakeStruct(sample_idx: !4, pop: !9)
}
!10 = ToArray(!s4)
%11 = MakeStruct(cols: !10)
!12 = GetField(%11) [cols]
!s5 = ToStream(!12) [False] 
!c0_2 = I32 [0] 
!c1_2 = I32 [1]
!s6 = StreamIota(!c0_2, !c1_2) [False]
!s7 = StreamZip(!s5, !s6) [34, TakeMinLength] {
(%elt3, %elt4) =>
  !13 = Cast(%elt4) [Int64]
  InsertFields %elt3 (__col_uid: !13)
}
!14 = ToArray(!s7)
%15 = InsertFields %11 (cols: !14)
%16 = CastRename(%15) [Struct{__cols:Array[Struct{sample_idx:Int32,pop:Int32,__col_uid:Int64}]}]
!17 = Literal [Array[Struct{numberToTake:Int32,old:Tuple[Int32,Interval[Struct{locus:Locus(GRCh37),alleles:Array[String]}],Tuple[Int64,Tuple[Int32,Int32]]]}], <literal value>]
!s8 = ToStream(!17) [False] 
%18 = MakeStruct(__iruid_1052: %15, __iruid_1054: %16)
!19 = IsNA(%18)
!27 = If !19 then {
  NA [Struct{__iruid_1052:Struct{cols:Array[Struct{}]},__iruid_1054:Struct{__cols:Array[Struct{sample_idx:Int32,pop:Int32,__col_uid:Int64}]}}]
} else {
  %20 = GetField(%18) [__iruid_1052]
  !21 = IsNA(%20)
  !25 = If !21 then {
    NA [Struct{cols:Array[Struct{}]}]
  } else {
    !22 = GetField(%20) [cols]
    !s9 = ToStream(!22) [False]
    !s10 = StreamMap(!s9) { (%elt5) =>
      !23 = IsNA(%elt5)
      If !23 then {
        NA [Struct{}]
      } else {
        Literal [Struct{}, <literal value>]
      }
    }
    !24 = ToArray(!s10)
    MakeStruct(cols: !24)
  } 
  !26 = GetField(%18) [__iruid_1054]
  MakeStruct(__iruid_1052: !25, __iruid_1054: !26)
} 
!28 = NA [String]
!160 = CollectDistributedArray(!s8, !27, !28) {
(%ctx, %g) =>
  %29 = GetField(%g) [__iruid_1054]
  %30 = GetField(%ctx) [old]
  %31 = GetField(%g) [__iruid_1052]
  %32 = GetTupleElement(%30) [1]
  %33 = GetTupleElement(%30) [2]
  %34 = GetTupleElement(%33) [0]
  !c0_3 = I32 [0] 
  !c1_3 = I32 [1]
  !s11 = StreamIota(!c0_3, !c1_3) [False] 
  !35 = RNGStateLiteral
  %36 = RNGSplit(!35, %34)
  %37 = GetTupleElement(%33) [1]
  !38 = GetTupleElement(%37) [0] 
  !39 = GetTupleElement(%37) [1] 
  !c1_4 = I32 [1]
  !s12 = StreamRange(!38, !39, !c1_4) [3, False]
  !s18 = StreamMap(!s12) { (%elt6) =>
    !40 = Cast(%elt6) [Int64]
    %41 = MakeTuple(!40, %elt6) [(0 1)]
    !42 = GetTupleElement(%41) [0]
    %43 = RNGSplit(%36, !42)
    !44 = F64 [0.1] 
    !45 = F64 [0.9]
    %46 = ApplySeeded(!44, !45, %43) [rand_unif, -1, Float64]
    !47 = GetTupleElement(%41) [1]
    !48 = Cast(!47) [Int64]
    !49 = Apply(!48) [5, globalPosToLocus, 
    (), Locus(GRCh37)] 
    !50 = EncodedLiteral [Array[String]] 
    !51 = EncodedLiteral [Array[Float64]]
    !s13 = ToStream(!51) [False] 
    !c0_4 = I32 [0] 
    !c1_5 = I32 [1]
    !s14 = StreamIota(!c0_4, !c1_5) [False]
    !s15 = StreamZip(!s13, !s14) [7, TakeMinLength] {
    (%elt7, %elt8) =>
      !52 = Cast(%elt8) [Int64]
      %53 = MakeTuple(!52, %elt7) [(0 1)]
      %54 = GetTupleElement(%53) [1]
      !55 = ApplyBinaryPrimOp(%46, %54) [Multiply] 
      !56 = F64 [1.0]
      !57 = ApplyBinaryPrimOp(!56, %46) [Subtract]
      !58 = ApplyBinaryPrimOp(!57, %54) [Multiply] 
      !59 = GetTupleElement(%53) [0]
      !60 = RNGSplit(%43, !59)
      ApplySeeded(!55, !58, !60) [rand_beta, 1, Float64]
    }
    !61 = ToArray(!s15) 
    !c0_5 = I32 [0] 
    !c10_2 = I32 [10] 
    !c1_6 = I32 [1]
    !s16 = StreamRange(!c0_5, !c10_2, !c1_6) [8, False]
    !s17 = StreamMap(!s16) { (%elt9) =>
      Literal [Struct{}, <literal value>]
    }
    !62 = ToArray(!s17)
    MakeStruct(locus: !49, alleles: !50, af: !61, entries: !62)
  }
  !s19 = StreamZip(!s11, !s18) [36, TakeMinLength] {
  (%elt10, %elt11) =>
    !63 = Cast(%elt10) [Int64]
    !64 = MakeTuple(%34, !63) [(0 1)]
    InsertFields %elt11 (__row_uid: !64)
  }
  !s20 = StreamMap(!s19) { (%elt12) =>
    !65 = SelectFields(%elt12) [(locus alleles)]
    !66 = ApplySpecial(%32, !65) [-1, contains, 
    (), Boolean]
    If !66 then { %elt12 } else {
      !67 = Str ["TableGen: ..."] 
      !68 = GetTupleElement(%30) [0]
      !69 = Apply(!68) [-1, str, (), String]
      !70 = Apply(!67, !69) [-1, concat, (), String] 
      !71 = Str ["\n\tRange bo..."]
      !72 = Apply(!70, !71) [-1, concat, (), String] 
      !73 = GetTupleElement(%30) [0]
      !74 = Apply(!73) [-1, str, (), String]
      !75 = Apply(!72, !74) [-1, concat, (), String] 
      !76 = Str [": "]
      !77 = Apply(!75, !76) [-1, concat, (), String] 
      !78 = Apply(%32) [-1, str, (), String]
      !79 = Apply(!77, !78) [-1, concat, (), String] 
      !80 = Str ["\n\tInvalid ..."]
      !81 = Apply(!79, !80) [-1, concat, (), String] 
      !82 = SelectFields(%elt12) [(locus alleles)]
      !83 = Apply(!82) [-1, str, (), String]
      !84 = Apply(!81, !83) [-1, concat, (), String]
      Die(!84) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, 9]
    }
  }
  !s21 = StreamMap(!s20) { (%elt13) =>
    %85 = GetField(%elt13) [entries]
    !86 = IsNA(%85)
    If !86 then {
      !87 = Str ["missing en..."]
      Die(!87) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, -1]
    } else {
      !88 = GetField(%31) [cols]
      %89 = ArrayLen(!88)
      %90 = ArrayLen(%85)
      !91 = ApplyComparisonOp(%90, %89) [NEQWithNA]
      If !91 then {
        !92 = Str ["length mis..."] 
        !93 = Apply(%90) [-1, str, (), String]
        !94 = Apply(!92, !93) [-1, concat, (), String] 
        !95 = Str [" entries, "]
        !96 = Apply(!94, !95) [-1, concat, (), String] 
        !97 = Apply(%89) [-1, str, (), String]
        !98 = Apply(!96, !97) [-1, concat, (), String] 
        !99 = Str [" cols, at "]
        !100 = Apply(!98, !99) [-1, concat, (), String] 
        !101 = SelectFields(%elt13) [(locus alleles)]
        !102 = Apply(!101) [-1, str, (), String]
        !103 = Apply(!100, !102) [-1, concat, (), String]
        Die(!103) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, -1]
      } else { %elt13 }
    }
  }
  !s25 = StreamMap(!s21) { (%elt14) =>
    %104 = CastRename(%elt14) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],`the entries! [877f12a8827e18f61222c6c8c5fb04a8]`:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}]
    !105 = SelectFields(%104) [(locus alleles)] 
    !106 = GetField(%104) [`the entries! [877f12a8827e18f61222c6c8c5fb04a8]`]
    !s22 = ToStream(!106) [False] 
    !107 = GetField(%29) [__cols]
    !s23 = ToStream(!107) [False]
    !s24 = StreamZip(!s22, !s23) [-1, AssumeSameLength] {
    (%elt15, %elt16) =>
      %108 = GetField(%104) [__row_uid]
      %109 = GetField(%104) [af]
      %110 = GetField(%elt16) [pop]
      !c0_6 = I32 [0]
      !111 = ApplyComparisonOp(%110, !c0_6) [LT]
      !113 = If !111 then {
        !112 = ArrayLen(%109)
        ApplyBinaryPrimOp(!112, %110) [Add]
      } else { %110 }
      %114 = ArrayRef(%109, !113) [10]
      !115 = F64 [1.0]
      %116 = ApplyBinaryPrimOp(!115, %114) [Subtract]
      !117 = F64 [2.0]
      !118 = Apply(%116, !117) [13, pow, (), Float64] 
      !119 = F64 [2.0]
      !120 = ApplyBinaryPrimOp(!119, %114) [Multiply]
      !121 = ApplyBinaryPrimOp(!120, %116) [Multiply] 
      !122 = F64 [2.0]
      !123 = Apply(%114, !122) [16, pow, (), Float64]
      !124 = MakeArray(!118, !121, !123) [Array[Float64]] 
      !125 = RNGStateLiteral 
      !126 = GetTupleElement(%108) [0] 
      !127 = GetTupleElement(%108) [1] 
      !128 = GetField(%elt16) [__col_uid]
      !129 = MakeTuple(!126, !127, !128) [(0 1 2)]
      !130 = RNGSplit(!125, !129)
      !131 = ApplySeeded(!124, !130) [rand_cat, 2, Int32]
      !132 = Apply(!131) [17, UnphasedDiploidGtIndexCall, 
      (), Call]
      InsertFields %elt15 (GT: !132)
    }
    !133 = ToArray(!s24)
    InsertFields !105 (the entries! [877f12a8827e18f61222c6c8c5fb04a8]: !133)
  }
  !s26 = StreamMap(!s25) { (%elt17) =>
    %134 = CastRename(%elt17) [Struct{locus:Locus(GRCh37),alleles:Array[String],entries:Array[Struct{GT:Call}]}]
    %135 = GetField(%134) [entries]
    !136 = SelectFields(%134) [(locus alleles)] 
    !c0_7 = I32 [0]
    !137 = ArrayRef(%135, !c0_7) [24] 
    !c1_7 = I32 [1]
    !138 = ArrayRef(%135, !c1_7) [25] 
    !c2 = I32 [2]
    !139 = ArrayRef(%135, !c2) [26] 
    !c3 = I32 [3]
    !140 = ArrayRef(%135, !c3) [27]
    InsertFields !136 (0: !137, 1: !138, 2: !139, 3: !140)
  } 
  !141 = GetField(%ctx) [numberToTake]
  !s27 = StreamTake(!s26, !141)
  !s28 = StreamMap(!s27) { (%elt18) =>
    %142 = SelectFields(%elt18) [(locus alleles)]
    !143 = SelectFields(%142) [()] 
    !144 = GetField(%142) [locus]
    !145 = ApplySpecial(!144) [28, showStr, 
    (), String] 
    !146 = GetField(%142) [alleles]
    !147 = ApplySpecial(!146) [29, showStr, 
    (), String] 
    !148 = GetField(%elt18) [`0`]
    !149 = GetField(!148) [GT]
    !150 = ApplySpecial(!149) [30, showStr, 
    (), String] 
    !151 = GetField(%elt18) [`1`]
    !152 = GetField(!151) [GT]
    !153 = ApplySpecial(!152) [31, showStr, 
    (), String] 
    !154 = GetField(%elt18) [`2`]
    !155 = GetField(!154) [GT]
    !156 = ApplySpecial(!155) [32, showStr, 
    (), String] 
    !157 = GetField(%elt18) [`3`]
    !158 = GetField(!157) [GT]
    !159 = ApplySpecial(!158) [33, showStr, 
    (), String]
    InsertFields !143 (locus: !145, alleles: !147, 0.GT: !150, 1.GT: !153, 2.GT: !156, 3.GT: !159)
  }
  ToArray(!s28)
}
!s29 = ToStream(!160) [False]
!s30 = StreamFlatMap(!s29) { (%elt19) =>
  ToStream(%elt19) [False]
}
!161 = ToArray(!s30) 
!162 = SelectFields(%16) [()]
!163 = MakeStruct(rows: !161, global: !162)
MakeTuple(!163) [(0)]

2023-11-17 18:07:59.728 : INFO: after LowerArrayAggsToRunAggs: IR size 374: 

%1 = RNGStateLiteral
!c0 = I32 [0] 
!c10 = I32 [10] 
!c1 = I32 [1]
!s = StreamRange(!c0, !c10, !c1) [1, False]
!s4 = StreamMap(!s) { (%elt) =>
  !2 = Cast(%elt) [Int64]
  %3 = MakeTuple(!2, %elt) [(0 1)]
  !4 = GetTupleElement(%3) [1] 
  !5 = EncodedLiteral [Array[Int32]]
  !s2 = ToStream(!5) [False]
  !s3 = StreamMap(!s2) { (%elt2) =>
    Cast(%elt2) [Float64]
  }
  !6 = ToArray(!s3) 
  !7 = GetTupleElement(%3) [0]
  !8 = RNGSplit(%1, !7)
  !9 = ApplySeeded(!6, !8) [rand_cat, 0, Int32]
  MakeStruct(sample_idx: !4, pop: !9)
}
!10 = ToArray(!s4)
%11 = MakeStruct(cols: !10)
!12 = GetField(%11) [cols]
!s5 = ToStream(!12) [False] 
!c0_2 = I32 [0] 
!c1_2 = I32 [1]
!s6 = StreamIota(!c0_2, !c1_2) [False]
!s7 = StreamZip(!s5, !s6) [34, TakeMinLength] {
(%elt3, %elt4) =>
  !13 = Cast(%elt4) [Int64]
  InsertFields %elt3 (__col_uid: !13)
}
!14 = ToArray(!s7)
%15 = InsertFields %11 (cols: !14)
%16 = CastRename(%15) [Struct{__cols:Array[Struct{sample_idx:Int32,pop:Int32,__col_uid:Int64}]}]
!17 = Literal [Array[Struct{numberToTake:Int32,old:Tuple[Int32,Interval[Struct{locus:Locus(GRCh37),alleles:Array[String]}],Tuple[Int64,Tuple[Int32,Int32]]]}], <literal value>]
!s8 = ToStream(!17) [False] 
%18 = MakeStruct(__iruid_1052: %15, __iruid_1054: %16)
!19 = IsNA(%18)
!27 = If !19 then {
  NA [Struct{__iruid_1052:Struct{cols:Array[Struct{}]},__iruid_1054:Struct{__cols:Array[Struct{sample_idx:Int32,pop:Int32,__col_uid:Int64}]}}]
} else {
  %20 = GetField(%18) [__iruid_1052]
  !21 = IsNA(%20)
  !25 = If !21 then {
    NA [Struct{cols:Array[Struct{}]}]
  } else {
    !22 = GetField(%20) [cols]
    !s9 = ToStream(!22) [False]
    !s10 = StreamMap(!s9) { (%elt5) =>
      !23 = IsNA(%elt5)
      If !23 then {
        NA [Struct{}]
      } else {
        Literal [Struct{}, <literal value>]
      }
    }
    !24 = ToArray(!s10)
    MakeStruct(cols: !24)
  } 
  !26 = GetField(%18) [__iruid_1054]
  MakeStruct(__iruid_1052: !25, __iruid_1054: !26)
} 
!28 = NA [String]
!160 = CollectDistributedArray(!s8, !27, !28) {
(%ctx, %g) =>
  %29 = GetField(%g) [__iruid_1054]
  %30 = GetField(%ctx) [old]
  %31 = GetField(%g) [__iruid_1052]
  %32 = GetTupleElement(%30) [1]
  %33 = GetTupleElement(%30) [2]
  %34 = GetTupleElement(%33) [0]
  !c0_3 = I32 [0] 
  !c1_3 = I32 [1]
  !s11 = StreamIota(!c0_3, !c1_3) [False] 
  !35 = RNGStateLiteral
  %36 = RNGSplit(!35, %34)
  %37 = GetTupleElement(%33) [1]
  !38 = GetTupleElement(%37) [0] 
  !39 = GetTupleElement(%37) [1] 
  !c1_4 = I32 [1]
  !s12 = StreamRange(!38, !39, !c1_4) [3, False]
  !s18 = StreamMap(!s12) { (%elt6) =>
    !40 = Cast(%elt6) [Int64]
    %41 = MakeTuple(!40, %elt6) [(0 1)]
    !42 = GetTupleElement(%41) [0]
    %43 = RNGSplit(%36, !42)
    !44 = F64 [0.1] 
    !45 = F64 [0.9]
    %46 = ApplySeeded(!44, !45, %43) [rand_unif, -1, Float64]
    !47 = GetTupleElement(%41) [1]
    !48 = Cast(!47) [Int64]
    !49 = Apply(!48) [5, globalPosToLocus, 
    (), Locus(GRCh37)] 
    !50 = EncodedLiteral [Array[String]] 
    !51 = EncodedLiteral [Array[Float64]]
    !s13 = ToStream(!51) [False] 
    !c0_4 = I32 [0] 
    !c1_5 = I32 [1]
    !s14 = StreamIota(!c0_4, !c1_5) [False]
    !s15 = StreamZip(!s13, !s14) [7, TakeMinLength] {
    (%elt7, %elt8) =>
      !52 = Cast(%elt8) [Int64]
      %53 = MakeTuple(!52, %elt7) [(0 1)]
      %54 = GetTupleElement(%53) [1]
      !55 = ApplyBinaryPrimOp(%46, %54) [Multiply] 
      !56 = F64 [1.0]
      !57 = ApplyBinaryPrimOp(!56, %46) [Subtract]
      !58 = ApplyBinaryPrimOp(!57, %54) [Multiply] 
      !59 = GetTupleElement(%53) [0]
      !60 = RNGSplit(%43, !59)
      ApplySeeded(!55, !58, !60) [rand_beta, 1, Float64]
    }
    !61 = ToArray(!s15) 
    !c0_5 = I32 [0] 
    !c10_2 = I32 [10] 
    !c1_6 = I32 [1]
    !s16 = StreamRange(!c0_5, !c10_2, !c1_6) [8, False]
    !s17 = StreamMap(!s16) { (%elt9) =>
      Literal [Struct{}, <literal value>]
    }
    !62 = ToArray(!s17)
    MakeStruct(locus: !49, alleles: !50, af: !61, entries: !62)
  }
  !s19 = StreamZip(!s11, !s18) [36, TakeMinLength] {
  (%elt10, %elt11) =>
    !63 = Cast(%elt10) [Int64]
    !64 = MakeTuple(%34, !63) [(0 1)]
    InsertFields %elt11 (__row_uid: !64)
  }
  !s20 = StreamMap(!s19) { (%elt12) =>
    !65 = SelectFields(%elt12) [(locus alleles)]
    !66 = ApplySpecial(%32, !65) [-1, contains, 
    (), Boolean]
    If !66 then { %elt12 } else {
      !67 = Str ["TableGen: ..."] 
      !68 = GetTupleElement(%30) [0]
      !69 = Apply(!68) [-1, str, (), String]
      !70 = Apply(!67, !69) [-1, concat, (), String] 
      !71 = Str ["\n\tRange bo..."]
      !72 = Apply(!70, !71) [-1, concat, (), String] 
      !73 = GetTupleElement(%30) [0]
      !74 = Apply(!73) [-1, str, (), String]
      !75 = Apply(!72, !74) [-1, concat, (), String] 
      !76 = Str [": "]
      !77 = Apply(!75, !76) [-1, concat, (), String] 
      !78 = Apply(%32) [-1, str, (), String]
      !79 = Apply(!77, !78) [-1, concat, (), String] 
      !80 = Str ["\n\tInvalid ..."]
      !81 = Apply(!79, !80) [-1, concat, (), String] 
      !82 = SelectFields(%elt12) [(locus alleles)]
      !83 = Apply(!82) [-1, str, (), String]
      !84 = Apply(!81, !83) [-1, concat, (), String]
      Die(!84) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, 9]
    }
  }
  !s21 = StreamMap(!s20) { (%elt13) =>
    %85 = GetField(%elt13) [entries]
    !86 = IsNA(%85)
    If !86 then {
      !87 = Str ["missing en..."]
      Die(!87) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, -1]
    } else {
      !88 = GetField(%31) [cols]
      %89 = ArrayLen(!88)
      %90 = ArrayLen(%85)
      !91 = ApplyComparisonOp(%90, %89) [NEQWithNA]
      If !91 then {
        !92 = Str ["length mis..."] 
        !93 = Apply(%90) [-1, str, (), String]
        !94 = Apply(!92, !93) [-1, concat, (), String] 
        !95 = Str [" entries, "]
        !96 = Apply(!94, !95) [-1, concat, (), String] 
        !97 = Apply(%89) [-1, str, (), String]
        !98 = Apply(!96, !97) [-1, concat, (), String] 
        !99 = Str [" cols, at "]
        !100 = Apply(!98, !99) [-1, concat, (), String] 
        !101 = SelectFields(%elt13) [(locus alleles)]
        !102 = Apply(!101) [-1, str, (), String]
        !103 = Apply(!100, !102) [-1, concat, (), String]
        Die(!103) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, -1]
      } else { %elt13 }
    }
  }
  !s25 = StreamMap(!s21) { (%elt14) =>
    %104 = CastRename(%elt14) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],`the entries! [877f12a8827e18f61222c6c8c5fb04a8]`:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}]
    !105 = SelectFields(%104) [(locus alleles)] 
    !106 = GetField(%104) [`the entries! [877f12a8827e18f61222c6c8c5fb04a8]`]
    !s22 = ToStream(!106) [False] 
    !107 = GetField(%29) [__cols]
    !s23 = ToStream(!107) [False]
    !s24 = StreamZip(!s22, !s23) [-1, AssumeSameLength] {
    (%elt15, %elt16) =>
      %108 = GetField(%104) [__row_uid]
      %109 = GetField(%104) [af]
      %110 = GetField(%elt16) [pop]
      !c0_6 = I32 [0]
      !111 = ApplyComparisonOp(%110, !c0_6) [LT]
      !113 = If !111 then {
        !112 = ArrayLen(%109)
        ApplyBinaryPrimOp(!112, %110) [Add]
      } else { %110 }
      %114 = ArrayRef(%109, !113) [10]
      !115 = F64 [1.0]
      %116 = ApplyBinaryPrimOp(!115, %114) [Subtract]
      !117 = F64 [2.0]
      !118 = Apply(%116, !117) [13, pow, (), Float64] 
      !119 = F64 [2.0]
      !120 = ApplyBinaryPrimOp(!119, %114) [Multiply]
      !121 = ApplyBinaryPrimOp(!120, %116) [Multiply] 
      !122 = F64 [2.0]
      !123 = Apply(%114, !122) [16, pow, (), Float64]
      !124 = MakeArray(!118, !121, !123) [Array[Float64]] 
      !125 = RNGStateLiteral 
      !126 = GetTupleElement(%108) [0] 
      !127 = GetTupleElement(%108) [1] 
      !128 = GetField(%elt16) [__col_uid]
      !129 = MakeTuple(!126, !127, !128) [(0 1 2)]
      !130 = RNGSplit(!125, !129)
      !131 = ApplySeeded(!124, !130) [rand_cat, 2, Int32]
      !132 = Apply(!131) [17, UnphasedDiploidGtIndexCall, 
      (), Call]
      InsertFields %elt15 (GT: !132)
    }
    !133 = ToArray(!s24)
    InsertFields !105 (the entries! [877f12a8827e18f61222c6c8c5fb04a8]: !133)
  }
  !s26 = StreamMap(!s25) { (%elt17) =>
    %134 = CastRename(%elt17) [Struct{locus:Locus(GRCh37),alleles:Array[String],entries:Array[Struct{GT:Call}]}]
    %135 = GetField(%134) [entries]
    !136 = SelectFields(%134) [(locus alleles)] 
    !c0_7 = I32 [0]
    !137 = ArrayRef(%135, !c0_7) [24] 
    !c1_7 = I32 [1]
    !138 = ArrayRef(%135, !c1_7) [25] 
    !c2 = I32 [2]
    !139 = ArrayRef(%135, !c2) [26] 
    !c3 = I32 [3]
    !140 = ArrayRef(%135, !c3) [27]
    InsertFields !136 (0: !137, 1: !138, 2: !139, 3: !140)
  } 
  !141 = GetField(%ctx) [numberToTake]
  !s27 = StreamTake(!s26, !141)
  !s28 = StreamMap(!s27) { (%elt18) =>
    %142 = SelectFields(%elt18) [(locus alleles)]
    !143 = SelectFields(%142) [()] 
    !144 = GetField(%142) [locus]
    !145 = ApplySpecial(!144) [28, showStr, 
    (), String] 
    !146 = GetField(%142) [alleles]
    !147 = ApplySpecial(!146) [29, showStr, 
    (), String] 
    !148 = GetField(%elt18) [`0`]
    !149 = GetField(!148) [GT]
    !150 = ApplySpecial(!149) [30, showStr, 
    (), String] 
    !151 = GetField(%elt18) [`1`]
    !152 = GetField(!151) [GT]
    !153 = ApplySpecial(!152) [31, showStr, 
    (), String] 
    !154 = GetField(%elt18) [`2`]
    !155 = GetField(!154) [GT]
    !156 = ApplySpecial(!155) [32, showStr, 
    (), String] 
    !157 = GetField(%elt18) [`3`]
    !158 = GetField(!157) [GT]
    !159 = ApplySpecial(!158) [33, showStr, 
    (), String]
    InsertFields !143 (locus: !145, alleles: !147, 0.GT: !150, 1.GT: !153, 2.GT: !156, 3.GT: !159)
  }
  ToArray(!s28)
}
!s29 = ToStream(!160) [False]
!s30 = StreamFlatMap(!s29) { (%elt19) =>
  ToStream(%elt19) [False]
}
!161 = ToArray(!s30) 
!162 = SelectFields(%16) [()]
!163 = MakeStruct(rows: !161, global: !162)
MakeTuple(!163) [(0)]

2023-11-17 18:07:59.774 : INFO: after optimize: compileLowerer, after LowerArrayAggsToRunAggs: IR size 374: 

%1 = RNGStateLiteral
!c0 = I32 [0] 
!c10 = I32 [10] 
!c1 = I32 [1]
!s = StreamRange(!c0, !c10, !c1) [1, False]
!s4 = StreamMap(!s) { (%elt) =>
  !2 = Cast(%elt) [Int64]
  %3 = MakeTuple(!2, %elt) [(0 1)]
  !4 = GetTupleElement(%3) [1] 
  !5 = EncodedLiteral [Array[Int32]]
  !s2 = ToStream(!5) [False]
  !s3 = StreamMap(!s2) { (%elt2) =>
    Cast(%elt2) [Float64]
  }
  !6 = ToArray(!s3) 
  !7 = GetTupleElement(%3) [0]
  !8 = RNGSplit(%1, !7)
  !9 = ApplySeeded(!6, !8) [rand_cat, 0, Int32]
  MakeStruct(sample_idx: !4, pop: !9)
}
!10 = ToArray(!s4)
%11 = MakeStruct(cols: !10)
!12 = GetField(%11) [cols]
!s5 = ToStream(!12) [False] 
!c0_2 = I32 [0] 
!c1_2 = I32 [1]
!s6 = StreamIota(!c0_2, !c1_2) [False]
!s7 = StreamZip(!s5, !s6) [34, TakeMinLength] {
(%elt3, %elt4) =>
  !13 = Cast(%elt4) [Int64]
  InsertFields %elt3 (__col_uid: !13)
}
!14 = ToArray(!s7)
%15 = InsertFields %11 (cols: !14)
%16 = CastRename(%15) [Struct{__cols:Array[Struct{sample_idx:Int32,pop:Int32,__col_uid:Int64}]}]
!17 = Literal [Array[Struct{numberToTake:Int32,old:Tuple[Int32,Interval[Struct{locus:Locus(GRCh37),alleles:Array[String]}],Tuple[Int64,Tuple[Int32,Int32]]]}], <literal value>]
!s8 = ToStream(!17) [False] 
%18 = MakeStruct(__iruid_1052: %15, __iruid_1054: %16)
!19 = IsNA(%18)
!27 = If !19 then {
  NA [Struct{__iruid_1052:Struct{cols:Array[Struct{}]},__iruid_1054:Struct{__cols:Array[Struct{sample_idx:Int32,pop:Int32,__col_uid:Int64}]}}]
} else {
  %20 = GetField(%18) [__iruid_1052]
  !21 = IsNA(%20)
  !25 = If !21 then {
    NA [Struct{cols:Array[Struct{}]}]
  } else {
    !22 = GetField(%20) [cols]
    !s9 = ToStream(!22) [False]
    !s10 = StreamMap(!s9) { (%elt5) =>
      !23 = IsNA(%elt5)
      If !23 then {
        NA [Struct{}]
      } else {
        Literal [Struct{}, <literal value>]
      }
    }
    !24 = ToArray(!s10)
    MakeStruct(cols: !24)
  } 
  !26 = GetField(%18) [__iruid_1054]
  MakeStruct(__iruid_1052: !25, __iruid_1054: !26)
} 
!28 = NA [String]
!160 = CollectDistributedArray(!s8, !27, !28) {
(%ctx, %g) =>
  %29 = GetField(%g) [__iruid_1054]
  %30 = GetField(%ctx) [old]
  %31 = GetField(%g) [__iruid_1052]
  %32 = GetTupleElement(%30) [1]
  %33 = GetTupleElement(%30) [2]
  %34 = GetTupleElement(%33) [0]
  !c0_3 = I32 [0] 
  !c1_3 = I32 [1]
  !s11 = StreamIota(!c0_3, !c1_3) [False] 
  !35 = RNGStateLiteral
  %36 = RNGSplit(!35, %34)
  %37 = GetTupleElement(%33) [1]
  !38 = GetTupleElement(%37) [0] 
  !39 = GetTupleElement(%37) [1] 
  !c1_4 = I32 [1]
  !s12 = StreamRange(!38, !39, !c1_4) [3, False]
  !s18 = StreamMap(!s12) { (%elt6) =>
    !40 = Cast(%elt6) [Int64]
    %41 = MakeTuple(!40, %elt6) [(0 1)]
    !42 = GetTupleElement(%41) [0]
    %43 = RNGSplit(%36, !42)
    !44 = F64 [0.1] 
    !45 = F64 [0.9]
    %46 = ApplySeeded(!44, !45, %43) [rand_unif, -1, Float64]
    !47 = GetTupleElement(%41) [1]
    !48 = Cast(!47) [Int64]
    !49 = Apply(!48) [5, globalPosToLocus, 
    (), Locus(GRCh37)] 
    !50 = EncodedLiteral [Array[String]] 
    !51 = EncodedLiteral [Array[Float64]]
    !s13 = ToStream(!51) [False] 
    !c0_4 = I32 [0] 
    !c1_5 = I32 [1]
    !s14 = StreamIota(!c0_4, !c1_5) [False]
    !s15 = StreamZip(!s13, !s14) [7, TakeMinLength] {
    (%elt7, %elt8) =>
      !52 = Cast(%elt8) [Int64]
      %53 = MakeTuple(!52, %elt7) [(0 1)]
      %54 = GetTupleElement(%53) [1]
      !55 = ApplyBinaryPrimOp(%46, %54) [Multiply] 
      !56 = F64 [1.0]
      !57 = ApplyBinaryPrimOp(!56, %46) [Subtract]
      !58 = ApplyBinaryPrimOp(!57, %54) [Multiply] 
      !59 = GetTupleElement(%53) [0]
      !60 = RNGSplit(%43, !59)
      ApplySeeded(!55, !58, !60) [rand_beta, 1, Float64]
    }
    !61 = ToArray(!s15) 
    !c0_5 = I32 [0] 
    !c10_2 = I32 [10] 
    !c1_6 = I32 [1]
    !s16 = StreamRange(!c0_5, !c10_2, !c1_6) [8, False]
    !s17 = StreamMap(!s16) { (%elt9) =>
      Literal [Struct{}, <literal value>]
    }
    !62 = ToArray(!s17)
    MakeStruct(locus: !49, alleles: !50, af: !61, entries: !62)
  }
  !s19 = StreamZip(!s11, !s18) [36, TakeMinLength] {
  (%elt10, %elt11) =>
    !63 = Cast(%elt10) [Int64]
    !64 = MakeTuple(%34, !63) [(0 1)]
    InsertFields %elt11 (__row_uid: !64)
  }
  !s20 = StreamMap(!s19) { (%elt12) =>
    !65 = SelectFields(%elt12) [(locus alleles)]
    !66 = ApplySpecial(%32, !65) [-1, contains, 
    (), Boolean]
    If !66 then { %elt12 } else {
      !67 = Str ["TableGen: ..."] 
      !68 = GetTupleElement(%30) [0]
      !69 = Apply(!68) [-1, str, (), String]
      !70 = Apply(!67, !69) [-1, concat, (), String] 
      !71 = Str ["\n\tRange bo..."]
      !72 = Apply(!70, !71) [-1, concat, (), String] 
      !73 = GetTupleElement(%30) [0]
      !74 = Apply(!73) [-1, str, (), String]
      !75 = Apply(!72, !74) [-1, concat, (), String] 
      !76 = Str [": "]
      !77 = Apply(!75, !76) [-1, concat, (), String] 
      !78 = Apply(%32) [-1, str, (), String]
      !79 = Apply(!77, !78) [-1, concat, (), String] 
      !80 = Str ["\n\tInvalid ..."]
      !81 = Apply(!79, !80) [-1, concat, (), String] 
      !82 = SelectFields(%elt12) [(locus alleles)]
      !83 = Apply(!82) [-1, str, (), String]
      !84 = Apply(!81, !83) [-1, concat, (), String]
      Die(!84) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, 9]
    }
  }
  !s21 = StreamMap(!s20) { (%elt13) =>
    %85 = GetField(%elt13) [entries]
    !86 = IsNA(%85)
    If !86 then {
      !87 = Str ["missing en..."]
      Die(!87) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, -1]
    } else {
      !88 = GetField(%31) [cols]
      %89 = ArrayLen(!88)
      %90 = ArrayLen(%85)
      !91 = ApplyComparisonOp(%90, %89) [NEQWithNA]
      If !91 then {
        !92 = Str ["length mis..."] 
        !93 = Apply(%90) [-1, str, (), String]
        !94 = Apply(!92, !93) [-1, concat, (), String] 
        !95 = Str [" entries, "]
        !96 = Apply(!94, !95) [-1, concat, (), String] 
        !97 = Apply(%89) [-1, str, (), String]
        !98 = Apply(!96, !97) [-1, concat, (), String] 
        !99 = Str [" cols, at "]
        !100 = Apply(!98, !99) [-1, concat, (), String] 
        !101 = SelectFields(%elt13) [(locus alleles)]
        !102 = Apply(!101) [-1, str, (), String]
        !103 = Apply(!100, !102) [-1, concat, (), String]
        Die(!103) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],entries:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}, -1]
      } else { %elt13 }
    }
  }
  !s25 = StreamMap(!s21) { (%elt14) =>
    %104 = CastRename(%elt14) [Struct{locus:Locus(GRCh37),alleles:Array[String],af:Array[Float64],`the entries! [877f12a8827e18f61222c6c8c5fb04a8]`:Array[Struct{}],__row_uid:Tuple[Int64,Int64]}]
    !105 = SelectFields(%104) [(locus alleles)] 
    !106 = GetField(%104) [`the entries! [877f12a8827e18f61222c6c8c5fb04a8]`]
    !s22 = ToStream(!106) [False] 
    !107 = GetField(%29) [__cols]
    !s23 = ToStream(!107) [False]
    !s24 = StreamZip(!s22, !s23) [-1, AssumeSameLength] {
    (%elt15, %elt16) =>
      %108 = GetField(%104) [__row_uid]
      %109 = GetField(%104) [af]
      %110 = GetField(%elt16) [pop]
      !c0_6 = I32 [0]
      !111 = ApplyComparisonOp(%110, !c0_6) [LT]
      !113 = If !111 then {
        !112 = ArrayLen(%109)
        ApplyBinaryPrimOp(!112, %110) [Add]
      } else { %110 }
      %114 = ArrayRef(%109, !113) [10]
      !115 = F64 [1.0]
      %116 = ApplyBinaryPrimOp(!115, %114) [Subtract]
      !117 = F64 [2.0]
      !118 = Apply(%116, !117) [13, pow, (), Float64] 
      !119 = F64 [2.0]
      !120 = ApplyBinaryPrimOp(!119, %114) [Multiply]
      !121 = ApplyBinaryPrimOp(!120, %116) [Multiply] 
      !122 = F64 [2.0]
      !123 = Apply(%114, !122) [16, pow, (), Float64]
      !124 = MakeArray(!118, !121, !123) [Array[Float64]] 
      !125 = RNGStateLiteral 
      !126 = GetTupleElement(%108) [0] 
      !127 = GetTupleElement(%108) [1] 
      !128 = GetField(%elt16) [__col_uid]
      !129 = MakeTuple(!126, !127, !128) [(0 1 2)]
      !130 = RNGSplit(!125, !129)
      !131 = ApplySeeded(!124, !130) [rand_cat, 2, Int32]
      !132 = Apply(!131) [17, UnphasedDiploidGtIndexCall, 
      (), Call]
      InsertFields %elt15 (GT: !132)
    }
    !133 = ToArray(!s24)
    InsertFields !105 (the entries! [877f12a8827e18f61222c6c8c5fb04a8]: !133)
  }
  !s26 = StreamMap(!s25) { (%elt17) =>
    %134 = CastRename(%elt17) [Struct{locus:Locus(GRCh37),alleles:Array[String],entries:Array[Struct{GT:Call}]}]
    %135 = GetField(%134) [entries]
    !136 = SelectFields(%134) [(locus alleles)] 
    !c0_7 = I32 [0]
    !137 = ArrayRef(%135, !c0_7) [24] 
    !c1_7 = I32 [1]
    !138 = ArrayRef(%135, !c1_7) [25] 
    !c2 = I32 [2]
    !139 = ArrayRef(%135, !c2) [26] 
    !c3 = I32 [3]
    !140 = ArrayRef(%135, !c3) [27]
    InsertFields !136 (0: !137, 1: !138, 2: !139, 3: !140)
  } 
  !141 = GetField(%ctx) [numberToTake]
  !s27 = StreamTake(!s26, !141)
  !s28 = StreamMap(!s27) { (%elt18) =>
    %142 = SelectFields(%elt18) [(locus alleles)]
    !143 = SelectFields(%142) [()] 
    !144 = GetField(%142) [locus]
    !145 = ApplySpecial(!144) [28, showStr, 
    (), String] 
    !146 = GetField(%142) [alleles]
    !147 = ApplySpecial(!146) [29, showStr, 
    (), String] 
    !148 = GetField(%elt18) [`0`]
    !149 = GetField(!148) [GT]
    !150 = ApplySpecial(!149) [30, showStr, 
    (), String] 
    !151 = GetField(%elt18) [`1`]
    !152 = GetField(!151) [GT]
    !153 = ApplySpecial(!152) [31, showStr, 
    (), String] 
    !154 = GetField(%elt18) [`2`]
    !155 = GetField(!154) [GT]
    !156 = ApplySpecial(!155) [32, showStr, 
    (), String] 
    !157 = GetField(%elt18) [`3`]
    !158 = GetField(!157) [GT]
    !159 = ApplySpecial(!158) [33, showStr, 
    (), String]
    InsertFields !143 (locus: !145, alleles: !147, 0.GT: !150, 1.GT: !153, 2.GT: !156, 3.GT: !159)
  }
  ToArray(!s28)
}
!s29 = ToStream(!160) [False]
!s30 = StreamFlatMap(!s29) { (%elt19) =>
  ToStream(%elt19) [False]
}
!161 = ToArray(!s30) 
!162 = SelectFields(%16) [()]
!163 = MakeStruct(rows: !161, global: !162)
MakeTuple(!163) [(0)]

2023-11-17 18:07:59.891 : INFO: encoder cache hit
2023-11-17 18:07:59.894 : INFO: instruction count: 3: __C1022HailClassLoaderContainer.<init>
2023-11-17 18:07:59.895 : INFO: instruction count: 3: __C1022HailClassLoaderContainer.<clinit>
2023-11-17 18:07:59.895 : INFO: instruction count: 3: __C1024FSContainer.<init>
2023-11-17 18:07:59.895 : INFO: instruction count: 3: __C1024FSContainer.<clinit>
2023-11-17 18:07:59.933 : INFO: instruction count: 3: __C1026collect_distributed_array_table_collect.<init>
2023-11-17 18:07:59.934 : INFO: instruction count: 129: __C1026collect_distributed_array_table_collect.apply
2023-11-17 18:07:59.934 : INFO: instruction count: 17: __C1026collect_distributed_array_table_collect.apply
2023-11-17 18:07:59.934 : INFO: instruction count: 27: __C1026collect_distributed_array_table_collect.__m1028DECODE_r_struct_of_r_struct_of_r_int32ANDr_struct_of_r_int32ANDr_struct_of_r_struct_of_r_struct_of_r_binaryANDr_int32ENDANDr_array_of_r_binaryENDANDr_struct_of_r_struct_of_r_binaryANDr_int32ENDANDr_array_of_r_binaryENDANDr_boolANDr_boolENDANDr_struct_of_r_int64ANDr_struct_of_r_int32ANDr_int32ENDENDENDENDEND_TO_SBaseStructPointer
2023-11-17 18:07:59.934 : INFO: instruction count: 26: __C1026collect_distributed_array_table_collect.__m1029INPLACE_DECODE_r_struct_of_r_int32ANDr_struct_of_r_int32ANDr_struct_of_r_struct_of_r_struct_of_r_binaryANDr_int32ENDANDr_array_of_r_binaryENDANDr_struct_of_r_struct_of_r_binaryANDr_int32ENDANDr_array_of_r_binaryENDANDr_boolANDr_boolENDANDr_struct_of_r_int64ANDr_struct_of_r_int32ANDr_int32ENDENDENDEND_TO_r_struct_of_r_int32ANDr_tuple_of_r_int32ANDr_interval_of_r_struct_of_r_locusANDr_array_of_r_stringENDANDr_tuple_of_r_int64ANDr_tuple_of_r_int32ANDr_int32ENDENDENDEND
2023-11-17 18:07:59.934 : INFO: instruction count: 10: __C1026collect_distributed_array_table_collect.__m1030INPLACE_DECODE_r_int32_TO_r_int32
2023-11-17 18:07:59.935 : INFO: instruction count: 35: __C1026collect_distributed_array_table_collect.__m1031INPLACE_DECODE_r_struct_of_r_int32ANDr_struct_of_r_struct_of_r_struct_of_r_binaryANDr_int32ENDANDr_array_of_r_binaryENDANDr_struct_of_r_struct_of_r_binaryANDr_int32ENDANDr_array_of_r_binaryENDANDr_boolANDr_boolENDANDr_struct_of_r_int64ANDr_struct_of_r_int32ANDr_int32ENDENDEND_TO_r_tuple_of_r_int32ANDr_interval_of_r_struct_of_r_locusANDr_array_of_r_stringENDANDr_tuple_of_r_int64ANDr_tuple_of_r_int32ANDr_int32ENDENDEND
2023-11-17 18:07:59.935 : INFO: instruction count: 44: __C1026collect_distributed_array_table_collect.__m1032INPLACE_DECODE_r_struct_of_r_struct_of_r_struct_of_r_binaryANDr_int32ENDANDr_array_of_r_binaryENDANDr_struct_of_r_struct_of_r_binaryANDr_int32ENDANDr_array_of_r_binaryENDANDr_boolANDr_boolEND_TO_r_interval_of_r_struct_of_r_locusANDr_array_of_r_stringEND
2023-11-17 18:07:59.935 : INFO: instruction count: 26: __C1026collect_distributed_array_table_collect.__m1033INPLACE_DECODE_r_struct_of_r_struct_of_r_binaryANDr_int32ENDANDr_array_of_r_binaryEND_TO_r_struct_of_r_locusANDr_array_of_r_stringEND
2023-11-17 18:07:59.935 : INFO: instruction count: 26: __C1026collect_distributed_array_table_collect.__m1034INPLACE_DECODE_r_struct_of_r_binaryANDr_int32END_TO_r_locus
2023-11-17 18:07:59.935 : INFO: instruction count: 31: __C1026collect_distributed_array_table_collect.__m1035INPLACE_DECODE_r_binary_TO_r_string
2023-11-17 18:07:59.935 : INFO: instruction count: 62: __C1026collect_distributed_array_table_collect.__m1036INPLACE_DECODE_r_array_of_r_binary_TO_r_array_of_r_string
2023-11-17 18:07:59.935 : INFO: instruction count: 10: __C1026collect_distributed_array_table_collect.__m1037INPLACE_DECODE_r_bool_TO_r_bool
2023-11-17 18:07:59.935 : INFO: instruction count: 26: __C1026collect_distributed_array_table_collect.__m1038INPLACE_DECODE_r_struct_of_r_int64ANDr_struct_of_r_int32ANDr_int32ENDEND_TO_r_tuple_of_r_int64ANDr_tuple_of_r_int32ANDr_int32ENDEND
2023-11-17 18:07:59.935 : INFO: instruction count: 10: __C1026collect_distributed_array_table_collect.__m1039INPLACE_DECODE_r_int64_TO_r_int64
2023-11-17 18:07:59.935 : INFO: instruction count: 26: __C1026collect_distributed_array_table_collect.__m1040INPLACE_DECODE_r_struct_of_r_int32ANDr_int32END_TO_r_tuple_of_r_int32ANDr_int32END
2023-11-17 18:07:59.935 : INFO: instruction count: 58: __C1026collect_distributed_array_table_collect.__m1042DECODE_r_struct_of_o_struct_of_o_struct_of_r_array_of_o_struct_of_ENDENDANDr_struct_of_r_array_of_r_struct_of_r_int32ANDr_int32ANDr_int64ENDENDENDEND_TO_SBaseStructPointer
2023-11-17 18:07:59.935 : INFO: instruction count: 57: __C1026collect_distributed_array_table_collect.__m1043INPLACE_DECODE_o_struct_of_o_struct_of_r_array_of_o_struct_of_ENDENDANDr_struct_of_r_array_of_r_struct_of_r_int32ANDr_int32ANDr_int64ENDENDEND_TO_o_struct_of_o_struct_of_r_array_of_o_struct_of_ENDENDANDr_struct_of_r_array_of_r_struct_of_r_int32ANDr_int32ANDr_int64ENDENDEND
2023-11-17 18:07:59.935 : INFO: instruction count: 17: __C1026collect_distributed_array_table_collect.__m1044INPLACE_DECODE_o_struct_of_r_array_of_o_struct_of_ENDEND_TO_o_struct_of_r_array_of_o_struct_of_ENDEND
2023-11-17 18:07:59.935 : INFO: instruction count: 213: __C1026collect_distributed_array_table_collect.__m1045INPLACE_DECODE_r_array_of_o_struct_of_END_TO_r_array_of_o_struct_of_END
2023-11-17 18:07:59.935 : INFO: instruction count: 8: __C1026collect_distributed_array_table_collect.__m1046INPLACE_DECODE_o_struct_of_END_TO_o_struct_of_END
2023-11-17 18:07:59.935 : INFO: instruction count: 17: __C1026collect_distributed_array_table_collect.__m1047INPLACE_DECODE_r_struct_of_r_array_of_r_struct_of_r_int32ANDr_int32ANDr_int64ENDEND_TO_r_struct_of_r_array_of_r_struct_of_r_int32ANDr_int32ANDr_int64ENDEND
2023-11-17 18:07:59.936 : INFO: instruction count: 62: __C1026collect_distributed_array_table_collect.__m1048INPLACE_DECODE_r_array_of_r_struct_of_r_int32ANDr_int32ANDr_int64END_TO_r_array_of_r_struct_of_r_int32ANDr_int32ANDr_int64END
2023-11-17 18:07:59.936 : INFO: instruction count: 35: __C1026collect_distributed_array_table_collect.__m1049INPLACE_DECODE_r_struct_of_r_int32ANDr_int32ANDr_int64END_TO_r_struct_of_r_int32ANDr_int32ANDr_int64END
2023-11-17 18:07:59.936 : INFO: instruction count: 322: __C1026collect_distributed_array_table_collect.__m1052split_ToArray
2023-11-17 18:07:59.936 : INFO: instruction count: 80: __C1026collect_distributed_array_table_collect.__m1087globalPosToLocus
2023-11-17 18:07:59.936 : INFO: instruction count: 450: __C1026collect_distributed_array_table_collect.__m1093split_ToArray
2023-11-17 18:07:59.937 : INFO: instruction count: 177: __C1026collect_distributed_array_table_collect.__m1116split_ToArray
2023-11-17 18:07:59.937 : INFO: instruction count: 368: __C1026collect_distributed_array_table_collect.__m1154split_If
2023-11-17 18:07:59.937 : INFO: instruction count: 125: __C1026collect_distributed_array_table_collect.__m1156ord_compareNonnull
2023-11-17 18:07:59.937 : INFO: instruction count: 15: __C1026collect_distributed_array_table_collect.__m1157ord_compare
2023-11-17 18:07:59.937 : INFO: instruction count: 74: __C1026collect_distributed_array_table_collect.__m1158ord_compareNonnull
2023-11-17 18:07:59.937 : INFO: instruction count: 9: __C1026collect_distributed_array_table_collect.__m1159ord_compareNonnull
2023-11-17 18:07:59.938 : INFO: instruction count: 89: __C1026collect_distributed_array_table_collect.__m1160ord_compareNonnull
2023-11-17 18:07:59.938 : INFO: instruction count: 15: __C1026collect_distributed_array_table_collect.__m1161ord_compare
2023-11-17 18:07:59.938 : INFO: instruction count: 135: __C1026collect_distributed_array_table_collect.__m1162ord_compareNonnull
2023-11-17 18:07:59.938 : INFO: instruction count: 18: __C1026collect_distributed_array_table_collect.__m1163ord_compare
2023-11-17 18:07:59.939 : INFO: instruction count: 18: __C1026collect_distributed_array_table_collect.__m1164str
2023-11-17 18:07:59.939 : INFO: instruction count: 29: __C1026collect_distributed_array_table_collect.__m1167concat
2023-11-17 18:07:59.939 : INFO: instruction count: 29: __C1026collect_distributed_array_table_collect.__m1168concat
2023-11-17 18:07:59.939 : INFO: instruction count: 9: __C1026collect_distributed_array_table_collect.__m1169concat
2023-11-17 18:07:59.939 : INFO: instruction count: 24: __C1026collect_distributed_array_table_collect.__m1170str
2023-11-17 18:07:59.939 : INFO: instruction count: 48: __C1026collect_distributed_array_table_collect.__m1171str
2023-11-17 18:07:59.939 : INFO: instruction count: 380: __C1026collect_distributed_array_table_collect.__m1203split_If
2023-11-17 18:07:59.939 : INFO: instruction count: 18: __C1026collect_distributed_array_table_collect.__m1208ord_equiv
2023-11-17 18:07:59.939 : INFO: instruction count: 14: __C1026collect_distributed_array_table_collect.__m1209ord_equivNonnull
2023-11-17 18:07:59.940 : INFO: instruction count: 260: __C1026collect_distributed_array_table_collect.__m1252split_ToArray
2023-11-17 18:07:59.940 : INFO: instruction count: 444: __C1026collect_distributed_array_table_collect.__m1273split_Let
2023-11-17 18:07:59.940 : INFO: instruction count: 11: __C1026collect_distributed_array_table_collect.__m1275ord_lt
2023-11-17 18:07:59.940 : INFO: instruction count: 14: __C1026collect_distributed_array_table_collect.__m1276ord_ltNonnull
2023-11-17 18:07:59.940 : INFO: instruction count: 35: __C1026collect_distributed_array_table_collect.__m1277arrayref_bounds_check
2023-11-17 18:07:59.940 : INFO: instruction count: 9: __C1026collect_distributed_array_table_collect.__m1282pow
2023-11-17 18:07:59.940 : INFO: instruction count: 8: __C1026collect_distributed_array_table_collect.__m1283UnphasedDiploidGtIndexCall
2023-11-17 18:07:59.941 : INFO: instruction count: 380: __C1026collect_distributed_array_table_collect.__m1384split_InsertFields
2023-11-17 18:07:59.941 : INFO: instruction count: 25: __C1026collect_distributed_array_table_collect.__m1421ENCODE_SBaseStructPointer_TO_r_struct_of_r_array_of_r_struct_of_r_binaryANDr_binaryANDr_binaryANDr_binaryANDr_binaryANDr_binaryENDEND
2023-11-17 18:07:59.941 : INFO: instruction count: 35: __C1026collect_distributed_array_table_collect.__m1422ENCODE_SIndexablePointer_TO_r_array_of_r_struct_of_r_binaryANDr_binaryANDr_binaryANDr_binaryANDr_binaryANDr_binaryEND
2023-11-17 18:07:59.941 : INFO: instruction count: 73: __C1026collect_distributed_array_table_collect.__m1423ENCODE_SBaseStructPointer_TO_r_struct_of_r_binaryANDr_binaryANDr_binaryANDr_binaryANDr_binaryANDr_binaryEND
2023-11-17 18:07:59.941 : INFO: instruction count: 16: __C1026collect_distributed_array_table_collect.__m1424ENCODE_SStringPointer_TO_r_binary
2023-11-17 18:07:59.941 : INFO: instruction count: 15: __C1026collect_distributed_array_table_collect.setPartitionIndex
2023-11-17 18:07:59.941 : INFO: instruction count: 4: __C1026collect_distributed_array_table_collect.addPartitionRegion
2023-11-17 18:07:59.941 : INFO: instruction count: 4: __C1026collect_distributed_array_table_collect.setPool
2023-11-17 18:07:59.941 : INFO: instruction count: 3: __C1026collect_distributed_array_table_collect.addHailClassLoader
2023-11-17 18:07:59.941 : INFO: instruction count: 3: __C1026collect_distributed_array_table_collect.addFS
2023-11-17 18:07:59.942 : INFO: instruction count: 4: __C1026collect_distributed_array_table_collect.addTaskContext
2023-11-17 18:07:59.942 : INFO: instruction count: 43: __C1026collect_distributed_array_table_collect.addReferenceGenomes
2023-11-17 18:07:59.942 : INFO: instruction count: 3: __C1026collect_distributed_array_table_collect.setObjects
2023-11-17 18:07:59.942 : INFO: instruction count: 210: __C1026collect_distributed_array_table_collect.addAndDecodeLiterals
2023-11-17 18:07:59.942 : INFO: instruction count: 99: __C1026collect_distributed_array_table_collect.__m1429DECODE_r_struct_of_r_binaryANDr_binaryANDr_struct_of_ENDANDr_binaryANDr_binaryANDr_binaryANDr_binaryANDr_binaryANDr_binaryEND_TO_SBaseStructPointer
2023-11-17 18:07:59.942 : INFO: instruction count: 8: __C1026collect_distributed_array_table_collect.__m1430INPLACE_DECODE_r_struct_of_END_TO_r_struct_of_END
2023-11-17 18:07:59.942 : INFO: instruction count: 217: __C1026collect_distributed_array_table_collect.__m1431DECODE_o_array_of_o_binary_TO_SIndexablePointer
2023-11-17 18:07:59.942 : INFO: instruction count: 31: __C1026collect_distributed_array_table_collect.__m1433INPLACE_DECODE_o_binary_TO_o_string
2023-11-17 18:07:59.942 : INFO: instruction count: 217: __C1026collect_distributed_array_table_collect.__m1434DECODE_o_array_of_o_float64_TO_SIndexablePointer
2023-11-17 18:07:59.942 : INFO: instruction count: 10: __C1026collect_distributed_array_table_collect.__m1435INPLACE_DECODE_o_float64_TO_o_float64
2023-11-17 18:07:59.943 : INFO: instruction count: 728: __C1026collect_distributed_array_table_collect.__m1052split_ToArray_region22_22
2023-11-17 18:07:59.943 : INFO: instruction count: 723: __C1026collect_distributed_array_table_collect.__m1052split_ToArray_region21_21
2023-11-17 18:07:59.943 : INFO: instruction count: 325: __C1026collect_distributed_array_table_collect.__m1052split_ToArray_region21_24
2023-11-17 18:07:59.943 : INFO: instruction count: 271: __C1026collect_distributed_array_table_collect.__m1052split_ToArray_region89_96
2023-11-17 18:07:59.943 : INFO: instruction count: 159: __C1026collect_distributed_array_table_collect.__m1052split_ToArray_region25_32
2023-11-17 18:07:59.943 : INFO: instruction count: 124: __C1026collect_distributed_array_table_collect.__m1052split_ToArray_region49_56
2023-11-17 18:07:59.943 : INFO: instruction count: 432: __C1026collect_distributed_array_table_collect.__m1052split_ToArray_region19_100
2023-11-17 18:07:59.943 : INFO: instruction count: 685: __C1026collect_distributed_array_table_collect.__m1273split_Let_region33_33
2023-11-17 18:07:59.944 : INFO: instruction count: 620: __C1026collect_distributed_array_table_collect.__m1273split_Let_region32_48
2023-11-17 18:07:59.944 : INFO: instruction count: 3: __C1437__m1052split_ToArraySpills.<init>
2023-11-17 18:07:59.944 : INFO: instruction count: 3: __C1474__m1273split_LetSpills.<init>
2023-11-17 18:07:59.945 : INFO: instruction count: 3: __C1088Tuple3.<init>
2023-11-17 18:07:59.945 : INFO: instruction count: 12: __C1088Tuple3.<init>
2023-11-17 18:07:59.945 : INFO: instruction count: 3: __C1089RGContainer_GRCh37.<init>
2023-11-17 18:07:59.945 : INFO: instruction count: 3: __C1089RGContainer_GRCh37.<clinit>
2023-11-17 18:07:59.946 : INFO: instruction count: 3: __C1165staticWrapperClass_1.<init>
2023-11-17 18:07:59.946 : INFO: instruction count: 3: __C1432Tuple3.<init>
2023-11-17 18:07:59.946 : INFO: instruction count: 12: __C1432Tuple3.<init>
2023-11-17 18:07:59.971 : INFO: encoder cache miss (3 hits, 8 misses, 0.273)
2023-11-17 18:07:59.975 : INFO: instruction count: 3: __C1569HailClassLoaderContainer.<init>
2023-11-17 18:07:59.975 : INFO: instruction count: 3: __C1569HailClassLoaderContainer.<clinit>
2023-11-17 18:07:59.975 : INFO: instruction count: 3: __C1571FSContainer.<init>
2023-11-17 18:07:59.975 : INFO: instruction count: 3: __C1571FSContainer.<clinit>
2023-11-17 18:07:59.977 : INFO: instruction count: 3: __C1573etypeEncode.<init>
2023-11-17 18:07:59.977 : INFO: instruction count: 7: __C1573etypeEncode.apply
2023-11-17 18:07:59.977 : INFO: instruction count: 33: __C1573etypeEncode.__m1575ENCODE_SBaseStructPointer_TO_r_struct_of_r_struct_of_ENDANDr_array_of_r_struct_of_r_int32ANDr_struct_of_r_int32ANDr_struct_of_r_struct_of_r_struct_of_r_binaryANDr_int32ENDANDr_array_of_r_binaryENDANDr_struct_of_r_struct_of_r_binaryANDr_int32ENDANDr_array_of_r_binaryENDANDr_boolANDr_boolENDANDr_struct_of_r_int64ANDr_struct_of_r_int32ANDr_int32ENDENDENDENDEND
2023-11-17 18:07:59.977 : INFO: instruction count: 1: __C1573etypeEncode.__m1576ENCODE_SBaseStructPointer_TO_r_struct_of_END
2023-11-17 18:07:59.977 : INFO: instruction count: 35: __C1573etypeEncode.__m1577ENCODE_SIndexablePointer_TO_r_array_of_r_struct_of_r_int32ANDr_struct_of_r_int32ANDr_struct_of_r_struct_of_r_struct_of_r_binaryANDr_int32ENDANDr_array_of_r_binaryENDANDr_struct_of_r_struct_of_r_binaryANDr_int32ENDANDr_array_of_r_binaryENDANDr_boolANDr_boolENDANDr_struct_of_r_int64ANDr_struct_of_r_int32ANDr_int32ENDENDENDEND
2023-11-17 18:07:59.977 : INFO: instruction count: 21: __C1573etypeEncode.__m1578ENCODE_SBaseStructPointer_TO_r_struct_of_r_int32ANDr_struct_of_r_int32ANDr_struct_of_r_struct_of_r_struct_of_r_binaryANDr_int32ENDANDr_array_of_r_binaryENDANDr_struct_of_r_struct_of_r_binaryANDr_int32ENDANDr_array_of_r_binaryENDANDr_boolANDr_boolENDANDr_struct_of_r_int64ANDr_struct_of_r_int32ANDr_int32ENDENDENDEND
2023-11-17 18:07:59.977 : INFO: instruction count: 4: __C1573etypeEncode.__m1579ENCODE_SInt32$_TO_r_int32
2023-11-17 18:07:59.977 : INFO: instruction count: 47: __C1573etypeEncode.__m1580ENCODE_SBaseStructPointer_TO_r_struct_of_r_int32ANDr_struct_of_r_struct_of_r_struct_of_r_binaryANDr_int32ENDANDr_array_of_r_binaryENDANDr_struct_of_r_struct_of_r_binaryANDr_int32ENDANDr_array_of_r_binaryENDANDr_boolANDr_boolENDANDr_struct_of_r_int64ANDr_struct_of_r_int32ANDr_int32ENDENDEND
2023-11-17 18:07:59.978 : INFO: instruction count: 41: __C1573etypeEncode.__m1581ENCODE_SIntervalPointer_TO_r_struct_of_r_struct_of_r_struct_of_r_binaryANDr_int32ENDANDr_array_of_r_binaryENDANDr_struct_of_r_struct_of_r_binaryANDr_int32ENDANDr_array_of_r_binaryENDANDr_boolANDr_boolEND
2023-11-17 18:07:59.978 : INFO: instruction count: 51: __C1573etypeEncode.__m1582ENCODE_SBaseStructPointer_TO_r_struct_of_r_struct_of_r_binaryANDr_int32ENDANDr_array_of_r_binaryEND
2023-11-17 18:07:59.978 : INFO: instruction count: 25: __C1573etypeEncode.__m1583ENCODE_SCanonicalLocusPointer_TO_r_struct_of_r_binaryANDr_int32END
2023-11-17 18:07:59.978 : INFO: instruction count: 16: __C1573etypeEncode.__m1584ENCODE_SStringPointer_TO_r_binary
2023-11-17 18:07:59.978 : INFO: instruction count: 39: __C1573etypeEncode.__m1585ENCODE_SIndexablePointer_TO_r_array_of_r_binary
2023-11-17 18:07:59.978 : INFO: instruction count: 4: __C1573etypeEncode.__m1586ENCODE_SBoolean$_TO_r_bool
2023-11-17 18:07:59.978 : INFO: instruction count: 21: __C1573etypeEncode.__m1587ENCODE_SBaseStructPointer_TO_r_struct_of_r_int64ANDr_struct_of_r_int32ANDr_int32ENDEND
2023-11-17 18:07:59.978 : INFO: instruction count: 4: __C1573etypeEncode.__m1588ENCODE_SInt64$_TO_r_int64
2023-11-17 18:07:59.978 : INFO: instruction count: 25: __C1573etypeEncode.__m1589ENCODE_SBaseStructPointer_TO_r_struct_of_r_int32ANDr_int32END
2023-11-17 18:07:59.981 : INFO: instruction count: 3: __C921HailClassLoaderContainer.<init>
2023-11-17 18:07:59.981 : INFO: instruction count: 3: __C921HailClassLoaderContainer.<clinit>
2023-11-17 18:07:59.981 : INFO: instruction count: 3: __C923FSContainer.<init>
2023-11-17 18:07:59.981 : INFO: instruction count: 3: __C923FSContainer.<clinit>
2023-11-17 18:08:00.001 : INFO: instruction count: 3: __C925Compiled.<init>
2023-11-17 18:08:00.001 : INFO: instruction count: 169: __C925Compiled.apply
2023-11-17 18:08:00.002 : INFO: instruction count: 447: __C925Compiled.__m931split_ToArray
2023-11-17 18:08:00.002 : INFO: instruction count: 263: __C925Compiled.__m940split_ToArray
2023-11-17 18:08:00.002 : INFO: instruction count: 206: __C925Compiled.__m958split_ToArray
2023-11-17 18:08:00.002 : INFO: instruction count: 547: __C925Compiled.__m986split_ToArray
2023-11-17 18:08:00.003 : INFO: instruction count: 200: __C925Compiled.__m1011split_ToArray
2023-11-17 18:08:00.003 : INFO: instruction count: 4: __C925Compiled.setBackend
2023-11-17 18:08:00.003 : INFO: instruction count: 9: __C925Compiled.__m1498ENCODE_SBaseStructPointer_TO_r_struct_of_r_struct_of_r_int32ANDr_struct_of_r_int32ANDr_struct_of_r_struct_of_r_struct_of_r_binaryANDr_int32ENDANDr_array_of_r_binaryENDANDr_struct_of_r_struct_of_r_binaryANDr_int32ENDANDr_array_of_r_binaryENDANDr_boolANDr_boolENDANDr_struct_of_r_int64ANDr_struct_of_r_int32ANDr_int32ENDENDENDENDEND
2023-11-17 18:08:00.003 : INFO: instruction count: 21: __C925Compiled.__m1499ENCODE_SBaseStructPointer_TO_r_struct_of_r_int32ANDr_struct_of_r_int32ANDr_struct_of_r_struct_of_r_struct_of_r_binaryANDr_int32ENDANDr_array_of_r_binaryENDANDr_struct_of_r_struct_of_r_binaryANDr_int32ENDANDr_array_of_r_binaryENDANDr_boolANDr_boolENDANDr_struct_of_r_int64ANDr_struct_of_r_int32ANDr_int32ENDENDENDEND
2023-11-17 18:08:00.003 : INFO: instruction count: 4: __C925Compiled.__m1500ENCODE_SInt32$_TO_r_int32
2023-11-17 18:08:00.003 : INFO: instruction count: 47: __C925Compiled.__m1501ENCODE_SBaseStructPointer_TO_r_struct_of_r_int32ANDr_struct_of_r_struct_of_r_struct_of_r_binaryANDr_int32ENDANDr_array_of_r_binaryENDANDr_struct_of_r_struct_of_r_binaryANDr_int32ENDANDr_array_of_r_binaryENDANDr_boolANDr_boolENDANDr_struct_of_r_int64ANDr_struct_of_r_int32ANDr_int32ENDENDEND
2023-11-17 18:08:00.003 : INFO: instruction count: 41: __C925Compiled.__m1502ENCODE_SIntervalPointer_TO_r_struct_of_r_struct_of_r_struct_of_r_binaryANDr_int32ENDANDr_array_of_r_binaryENDANDr_struct_of_r_struct_of_r_binaryANDr_int32ENDANDr_array_of_r_binaryENDANDr_boolANDr_boolEND
2023-11-17 18:08:00.003 : INFO: instruction count: 51: __C925Compiled.__m1503ENCODE_SBaseStructPointer_TO_r_struct_of_r_struct_of_r_binaryANDr_int32ENDANDr_array_of_r_binaryEND
2023-11-17 18:08:00.003 : INFO: instruction count: 25: __C925Compiled.__m1504ENCODE_SCanonicalLocusPointer_TO_r_struct_of_r_binaryANDr_int32END
2023-11-17 18:08:00.003 : INFO: instruction count: 16: __C925Compiled.__m1505ENCODE_SStringPointer_TO_r_binary
2023-11-17 18:08:00.003 : INFO: instruction count: 39: __C925Compiled.__m1506ENCODE_SIndexablePointer_TO_r_array_of_r_binary
2023-11-17 18:08:00.003 : INFO: instruction count: 4: __C925Compiled.__m1507ENCODE_SBoolean$_TO_r_bool
2023-11-17 18:08:00.003 : INFO: instruction count: 21: __C925Compiled.__m1508ENCODE_SBaseStructPointer_TO_r_struct_of_r_int64ANDr_struct_of_r_int32ANDr_int32ENDEND
2023-11-17 18:08:00.003 : INFO: instruction count: 4: __C925Compiled.__m1509ENCODE_SInt64$_TO_r_int64
2023-11-17 18:08:00.003 : INFO: instruction count: 25: __C925Compiled.__m1510ENCODE_SBaseStructPointer_TO_r_struct_of_r_int32ANDr_int32END
2023-11-17 18:08:00.003 : INFO: instruction count: 32: __C925Compiled.__m1511ENCODE_SBaseStructPointer_TO_r_struct_of_o_struct_of_o_struct_of_r_array_of_o_struct_of_ENDENDANDr_struct_of_r_array_of_r_struct_of_r_int32ANDr_int32ANDr_int64ENDENDENDEND
2023-11-17 18:08:00.003 : INFO: instruction count: 40: __C925Compiled.__m1512ENCODE_SBaseStructPointer_TO_o_struct_of_o_struct_of_r_array_of_o_struct_of_ENDENDANDr_struct_of_r_array_of_r_struct_of_r_int32ANDr_int32ANDr_int64ENDENDEND
2023-11-17 18:08:00.003 : INFO: instruction count: 36: __C925Compiled.__m1513ENCODE_SBaseStructPointer_TO_o_struct_of_r_array_of_o_struct_of_ENDEND
2023-11-17 18:08:00.004 : INFO: instruction count: 111: __C925Compiled.__m1514ENCODE_SIndexablePointer_TO_r_array_of_o_struct_of_END
2023-11-17 18:08:00.004 : INFO: instruction count: 1: __C925Compiled.__m1515ENCODE_SBaseStructPointer_TO_o_struct_of_END
2023-11-17 18:08:00.004 : INFO: instruction count: 25: __C925Compiled.__m1516ENCODE_SBaseStructPointer_TO_r_struct_of_r_array_of_r_struct_of_r_int32ANDr_int32ANDr_int64ENDEND
2023-11-17 18:08:00.004 : INFO: instruction count: 35: __C925Compiled.__m1517ENCODE_SIndexablePointer_TO_r_array_of_r_struct_of_r_int32ANDr_int32ANDr_int64END
2023-11-17 18:08:00.004 : INFO: instruction count: 37: __C925Compiled.__m1518ENCODE_SBaseStructPointer_TO_r_struct_of_r_int32ANDr_int32ANDr_int64END
2023-11-17 18:08:00.004 : INFO: instruction count: 27: __C925Compiled.__m1521DECODE_r_struct_of_r_array_of_r_struct_of_r_binaryANDr_binaryANDr_binaryANDr_binaryANDr_binaryANDr_binaryENDEND_TO_SBaseStructPointer
2023-11-17 18:08:00.004 : INFO: instruction count: 62: __C925Compiled.__m1522INPLACE_DECODE_r_array_of_r_struct_of_r_binaryANDr_binaryANDr_binaryANDr_binaryANDr_binaryANDr_binaryEND_TO_r_array_of_r_struct_of_r_stringANDr_stringANDr_stringANDr_stringANDr_stringANDr_stringEND
2023-11-17 18:08:00.004 : INFO: instruction count: 62: __C925Compiled.__m1523INPLACE_DECODE_r_struct_of_r_binaryANDr_binaryANDr_binaryANDr_binaryANDr_binaryANDr_binaryEND_TO_r_struct_of_r_stringANDr_stringANDr_stringANDr_stringANDr_stringANDr_stringEND
2023-11-17 18:08:00.004 : INFO: instruction count: 31: __C925Compiled.__m1524INPLACE_DECODE_r_binary_TO_r_string
2023-11-17 18:08:00.004 : INFO: instruction count: 12: __C925Compiled.__m1543setup_jab
2023-11-17 18:08:00.004 : INFO: instruction count: 9: __C925Compiled.setPartitionIndex
2023-11-17 18:08:00.004 : INFO: instruction count: 4: __C925Compiled.addPartitionRegion
2023-11-17 18:08:00.004 : INFO: instruction count: 4: __C925Compiled.setPool
2023-11-17 18:08:00.004 : INFO: instruction count: 3: __C925Compiled.addHailClassLoader
2023-11-17 18:08:00.004 : INFO: instruction count: 3: __C925Compiled.addFS
2023-11-17 18:08:00.004 : INFO: instruction count: 4: __C925Compiled.addTaskContext
2023-11-17 18:08:00.004 : INFO: instruction count: 3: __C925Compiled.setObjects
2023-11-17 18:08:00.004 : INFO: instruction count: 102: __C925Compiled.addAndDecodeLiterals
2023-11-17 18:08:00.004 : INFO: instruction count: 36: __C925Compiled.__m1552DECODE_r_struct_of_r_struct_of_ENDANDr_array_of_r_struct_of_r_int32ANDr_struct_of_r_int32ANDr_struct_of_r_struct_of_r_struct_of_r_binaryANDr_int32ENDANDr_array_of_r_binaryENDANDr_struct_of_r_struct_of_r_binaryANDr_int32ENDANDr_array_of_r_binaryENDANDr_boolANDr_boolENDANDr_struct_of_r_int64ANDr_struct_of_r_int32ANDr_int32ENDENDENDENDEND_TO_SBaseStructPointer
2023-11-17 18:08:00.004 : INFO: instruction count: 8: __C925Compiled.__m1553INPLACE_DECODE_r_struct_of_END_TO_r_struct_of_END
2023-11-17 18:08:00.005 : INFO: instruction count: 62: __C925Compiled.__m1554INPLACE_DECODE_r_array_of_r_struct_of_r_int32ANDr_struct_of_r_int32ANDr_struct_of_r_struct_of_r_struct_of_r_binaryANDr_int32ENDANDr_array_of_r_binaryENDANDr_struct_of_r_struct_of_r_binaryANDr_int32ENDANDr_array_of_r_binaryENDANDr_boolANDr_boolENDANDr_struct_of_r_int64ANDr_struct_of_r_int32ANDr_int32ENDENDENDEND_TO_r_array_of_r_struct_of_r_int32ANDr_tuple_of_r_int32ANDr_interval_of_r_struct_of_r_locusANDr_array_of_r_stringENDANDr_tuple_of_r_int64ANDr_tuple_of_r_int32ANDr_int32ENDENDENDEND
2023-11-17 18:08:00.005 : INFO: instruction count: 26: __C925Compiled.__m1555INPLACE_DECODE_r_struct_of_r_int32ANDr_struct_of_r_int32ANDr_struct_of_r_struct_of_r_struct_of_r_binaryANDr_int32ENDANDr_array_of_r_binaryENDANDr_struct_of_r_struct_of_r_binaryANDr_int32ENDANDr_array_of_r_binaryENDANDr_boolANDr_boolENDANDr_struct_of_r_int64ANDr_struct_of_r_int32ANDr_int32ENDENDENDEND_TO_r_struct_of_r_int32ANDr_tuple_of_r_int32ANDr_interval_of_r_struct_of_r_locusANDr_array_of_r_stringENDANDr_tuple_of_r_int64ANDr_tuple_of_r_int32ANDr_int32ENDENDENDEND
2023-11-17 18:08:00.005 : INFO: instruction count: 10: __C925Compiled.__m1556INPLACE_DECODE_r_int32_TO_r_int32
2023-11-17 18:08:00.005 : INFO: instruction count: 35: __C925Compiled.__m1557INPLACE_DECODE_r_struct_of_r_int32ANDr_struct_of_r_struct_of_r_struct_of_r_binaryANDr_int32ENDANDr_array_of_r_binaryENDANDr_struct_of_r_struct_of_r_binaryANDr_int32ENDANDr_array_of_r_binaryENDANDr_boolANDr_boolENDANDr_struct_of_r_int64ANDr_struct_of_r_int32ANDr_int32ENDENDEND_TO_r_tuple_of_r_int32ANDr_interval_of_r_struct_of_r_locusANDr_array_of_r_stringENDANDr_tuple_of_r_int64ANDr_tuple_of_r_int32ANDr_int32ENDENDEND
2023-11-17 18:08:00.005 : INFO: instruction count: 44: __C925Compiled.__m1558INPLACE_DECODE_r_struct_of_r_struct_of_r_struct_of_r_binaryANDr_int32ENDANDr_array_of_r_binaryENDANDr_struct_of_r_struct_of_r_binaryANDr_int32ENDANDr_array_of_r_binaryENDANDr_boolANDr_boolEND_TO_r_interval_of_r_struct_of_r_locusANDr_array_of_r_stringEND
2023-11-17 18:08:00.005 : INFO: instruction count: 26: __C925Compiled.__m1559INPLACE_DECODE_r_struct_of_r_struct_of_r_binaryANDr_int32ENDANDr_array_of_r_binaryEND_TO_r_struct_of_r_locusANDr_array_of_r_stringEND
2023-11-17 18:08:00.005 : INFO: instruction count: 26: __C925Compiled.__m1560INPLACE_DECODE_r_struct_of_r_binaryANDr_int32END_TO_r_locus
2023-11-17 18:08:00.005 : INFO: instruction count: 62: __C925Compiled.__m1561INPLACE_DECODE_r_array_of_r_binary_TO_r_array_of_r_string
2023-11-17 18:08:00.005 : INFO: instruction count: 10: __C925Compiled.__m1562INPLACE_DECODE_r_bool_TO_r_bool
2023-11-17 18:08:00.005 : INFO: instruction count: 26: __C925Compiled.__m1563INPLACE_DECODE_r_struct_of_r_int64ANDr_struct_of_r_int32ANDr_int32ENDEND_TO_r_tuple_of_r_int64ANDr_tuple_of_r_int32ANDr_int32ENDEND
2023-11-17 18:08:00.005 : INFO: instruction count: 10: __C925Compiled.__m1564INPLACE_DECODE_r_int64_TO_r_int64
2023-11-17 18:08:00.005 : INFO: instruction count: 26: __C925Compiled.__m1565INPLACE_DECODE_r_struct_of_r_int32ANDr_int32END_TO_r_tuple_of_r_int32ANDr_int32END
2023-11-17 18:08:00.005 : INFO: instruction count: 217: __C925Compiled.__m1566DECODE_o_array_of_o_int32_TO_SIndexablePointer
2023-11-17 18:08:00.005 : INFO: instruction count: 10: __C925Compiled.__m1568INPLACE_DECODE_o_int32_TO_o_int32
2023-11-17 18:08:00.005 : INFO: instruction count: 760: __C925Compiled.__m931split_ToArray_region10_10
2023-11-17 18:08:00.005 : INFO: instruction count: 528: __C925Compiled.__m931split_ToArray_region10_11
2023-11-17 18:08:00.006 : INFO: instruction count: 337: __C925Compiled.__m986split_ToArray_region2_16
2023-11-17 18:08:00.006 : INFO: instruction count: 3: __C1591__m931split_ToArraySpills.<init>
2023-11-17 18:08:00.006 : INFO: instruction count: 3: __C1613__m986split_ToArraySpills.<init>
2023-11-17 18:08:00.006 : INFO: instruction count: 3: __C1519staticWrapperClass_1.<init>
2023-11-17 18:08:00.006 : INFO: instruction count: 3: __C1567Tuple3.<init>
2023-11-17 18:08:00.006 : INFO: instruction count: 12: __C1567Tuple3.<init>
2023-11-17 18:08:00.012 : INFO: [collectDArray|table_collect]: executing 1 tasks, contexts size = 76.00 B, globals size = 176.00 B
2023-11-17 18:08:00.049 : INFO: RegionPool: initialized for thread 85: Executor task launch worker for task 0.0 in stage 1.0 (TID 4)
2023-11-17 18:08:00.066 : INFO: TaskReport: stage=1, partition=0, attempt=0, peakBytes=65536, peakBytesReadable=64.00 KiB, chunks requested=0, cache hits=0
2023-11-17 18:08:00.066 : INFO: RegionPool: FREE: 64.0K allocated (64.0K blocks / 0 chunks), regions.size = 1, 0 current java objects, thread 85: Executor task launch worker for task 0.0 in stage 1.0 (TID 4)
2023-11-17 18:08:00.068 : INFO: [collectDArray|table_collect]: executed 1 tasks in 56.069ms
2023-11-17 18:08:00.068 : INFO: encoder cache miss (3 hits, 9 misses, 0.250)
2023-11-17 18:08:00.070 : INFO: instruction count: 3: __C1623HailClassLoaderContainer.<init>
2023-11-17 18:08:00.070 : INFO: instruction count: 3: __C1623HailClassLoaderContainer.<clinit>
2023-11-17 18:08:00.070 : INFO: instruction count: 3: __C1625FSContainer.<init>
2023-11-17 18:08:00.070 : INFO: instruction count: 3: __C1625FSContainer.<clinit>
2023-11-17 18:08:00.071 : INFO: instruction count: 3: __C1627etypeEncode.<init>
2023-11-17 18:08:00.071 : INFO: instruction count: 7: __C1627etypeEncode.apply
2023-11-17 18:08:00.071 : INFO: instruction count: 33: __C1627etypeEncode.__m1629ENCODE_SBaseStructPointer_TO_r_struct_of_r_array_of_r_struct_of_r_binaryANDr_binaryANDr_binaryANDr_binaryANDr_binaryANDr_binaryENDANDr_struct_of_ENDEND
2023-11-17 18:08:00.071 : INFO: instruction count: 35: __C1627etypeEncode.__m1630ENCODE_SIndexablePointer_TO_r_array_of_r_struct_of_r_binaryANDr_binaryANDr_binaryANDr_binaryANDr_binaryANDr_binaryEND
2023-11-17 18:08:00.071 : INFO: instruction count: 73: __C1627etypeEncode.__m1631ENCODE_SBaseStructPointer_TO_r_struct_of_r_binaryANDr_binaryANDr_binaryANDr_binaryANDr_binaryANDr_binaryEND
2023-11-17 18:08:00.071 : INFO: instruction count: 16: __C1627etypeEncode.__m1632ENCODE_SStringPointer_TO_r_binary
2023-11-17 18:08:00.071 : INFO: instruction count: 1: __C1627etypeEncode.__m1633ENCODE_SBaseStructPointer_TO_r_struct_of_END
2023-11-17 18:08:00.072 : INFO: took 2.765s
2023-11-17 18:08:00.072 : INFO: after LowerOrInterpretNonCompilable: IR size 1: 

EncodedLiteral [Struct{rows:Array[Struct{locus:String,alleles:String,`0.GT`:String,`1.GT`:String,`2.GT`:String,`3.GT`:String}],global:Struct{}}]

2023-11-17 18:08:00.072 : INFO: after optimize: relationalLowerer, after LowerOrInterpretNonCompilable: IR size 1: 

EncodedLiteral [Struct{rows:Array[Struct{locus:String,alleles:String,`0.GT`:String,`1.GT`:String,`2.GT`:String,`3.GT`:String}],global:Struct{}}]

2023-11-17 18:08:00.073 : INFO: after EvalRelationalLets: IR size 2: 

!1 = EncodedLiteral [Struct{rows:Array[Struct{locus:String,alleles:String,`0.GT`:String,`1.GT`:String,`2.GT`:String,`3.GT`:String}],global:Struct{}}]
GetField(!1) [rows]

2023-11-17 18:08:00.073 : INFO: after LowerAndExecuteShuffles: IR size 2: 

!1 = EncodedLiteral [Struct{rows:Array[Struct{locus:String,alleles:String,`0.GT`:String,`1.GT`:String,`2.GT`:String,`3.GT`:String}],global:Struct{}}]
GetField(!1) [rows]

2023-11-17 18:08:00.073 : INFO: decoder cache miss (5 hits, 4 misses, 0.556
2023-11-17 18:08:00.074 : INFO: instruction count: 3: __C1634HailClassLoaderContainer.<init>
2023-11-17 18:08:00.074 : INFO: instruction count: 3: __C1634HailClassLoaderContainer.<clinit>
2023-11-17 18:08:00.074 : INFO: instruction count: 3: __C1636FSContainer.<init>
2023-11-17 18:08:00.074 : INFO: instruction count: 3: __C1636FSContainer.<clinit>
2023-11-17 18:08:00.075 : INFO: instruction count: 3: __C1638etypeDecode.<init>
2023-11-17 18:08:00.075 : INFO: instruction count: 7: __C1638etypeDecode.apply
2023-11-17 18:08:00.075 : INFO: instruction count: 36: __C1638etypeDecode.__m1640DECODE_r_struct_of_r_array_of_r_struct_of_r_binaryANDr_binaryANDr_binaryANDr_binaryANDr_binaryANDr_binaryENDANDr_struct_of_ENDEND_TO_SBaseStructPointer
2023-11-17 18:08:00.075 : INFO: instruction count: 62: __C1638etypeDecode.__m1641INPLACE_DECODE_r_array_of_r_struct_of_r_binaryANDr_binaryANDr_binaryANDr_binaryANDr_binaryANDr_binaryEND_TO_r_array_of_r_struct_of_r_stringANDr_stringANDr_stringANDr_stringANDr_stringANDr_stringEND
2023-11-17 18:08:00.075 : INFO: instruction count: 62: __C1638etypeDecode.__m1642INPLACE_DECODE_r_struct_of_r_binaryANDr_binaryANDr_binaryANDr_binaryANDr_binaryANDr_binaryEND_TO_r_struct_of_r_stringANDr_stringANDr_stringANDr_stringANDr_stringANDr_stringEND
2023-11-17 18:08:00.075 : INFO: instruction count: 31: __C1638etypeDecode.__m1643INPLACE_DECODE_r_binary_TO_r_string
2023-11-17 18:08:00.075 : INFO: instruction count: 8: __C1638etypeDecode.__m1644INPLACE_DECODE_r_struct_of_END_TO_r_struct_of_END
2023-11-17 18:08:00.077 : INFO: after optimize: relationalLowerer, after LowerAndExecuteShuffles: IR size 1: 

Literal [Array[Struct{locus:String,alleles:String,`0.GT`:String,`1.GT`:String,`2.GT`:String,`3.GT`:String}], <literal value>]

2023-11-17 18:08:00.077 : INFO: after LowerOrInterpretNonCompilable: IR size 1: 

Literal [Array[Struct{locus:String,alleles:String,`0.GT`:String,`1.GT`:String,`2.GT`:String,`3.GT`:String}], <literal value>]

2023-11-17 18:08:00.077 : INFO: after optimize: relationalLowerer, after LowerOrInterpretNonCompilable: IR size 1: 

Literal [Array[Struct{locus:String,alleles:String,`0.GT`:String,`1.GT`:String,`2.GT`:String,`3.GT`:String}], <literal value>]

2023-11-17 18:08:00.077 : INFO: initial IR: IR size 2: 

!1 = Literal [Array[Struct{locus:String,alleles:String,`0.GT`:String,`1.GT`:String,`2.GT`:String,`3.GT`:String}], <literal value>]
MakeTuple(!1) [(0)]

2023-11-17 18:08:00.078 : INFO: after optimize: compileLowerer, initial IR: IR size 1: 

Literal [Tuple[Array[Struct{locus:String,alleles:String,`0.GT`:String,`1.GT`:String,`2.GT`:String,`3.GT`:String}]], <literal value>]

2023-11-17 18:08:00.078 : INFO: after InlineApplyIR: IR size 1: 

Literal [Tuple[Array[Struct{locus:String,alleles:String,`0.GT`:String,`1.GT`:String,`2.GT`:String,`3.GT`:String}]], <literal value>]

2023-11-17 18:08:00.078 : INFO: after optimize: compileLowerer, after InlineApplyIR: IR size 1: 

Literal [Tuple[Array[Struct{locus:String,alleles:String,`0.GT`:String,`1.GT`:String,`2.GT`:String,`3.GT`:String}]], <literal value>]

2023-11-17 18:08:00.078 : INFO: after LowerArrayAggsToRunAggs: IR size 1: 

Literal [Tuple[Array[Struct{locus:String,alleles:String,`0.GT`:String,`1.GT`:String,`2.GT`:String,`3.GT`:String}]], <literal value>]

2023-11-17 18:08:00.078 : INFO: after optimize: compileLowerer, after LowerArrayAggsToRunAggs: IR size 1: 

Literal [Tuple[Array[Struct{locus:String,alleles:String,`0.GT`:String,`1.GT`:String,`2.GT`:String,`3.GT`:String}]], <literal value>]

2023-11-17 18:08:00.081 : INFO: encoder cache miss (3 hits, 10 misses, 0.231)
2023-11-17 18:08:00.083 : INFO: instruction count: 3: __C1660HailClassLoaderContainer.<init>
2023-11-17 18:08:00.083 : INFO: instruction count: 3: __C1660HailClassLoaderContainer.<clinit>
2023-11-17 18:08:00.083 : INFO: instruction count: 3: __C1662FSContainer.<init>
2023-11-17 18:08:00.083 : INFO: instruction count: 3: __C1662FSContainer.<clinit>
2023-11-17 18:08:00.083 : INFO: instruction count: 3: __C1664etypeEncode.<init>
2023-11-17 18:08:00.083 : INFO: instruction count: 7: __C1664etypeEncode.apply
2023-11-17 18:08:00.083 : INFO: instruction count: 9: __C1664etypeEncode.__m1666ENCODE_SBaseStructPointer_TO_r_struct_of_r_struct_of_r_array_of_r_struct_of_r_binaryANDr_binaryANDr_binaryANDr_binaryANDr_binaryANDr_binaryENDENDEND
2023-11-17 18:08:00.083 : INFO: instruction count: 25: __C1664etypeEncode.__m1667ENCODE_SBaseStructPointer_TO_r_struct_of_r_array_of_r_struct_of_r_binaryANDr_binaryANDr_binaryANDr_binaryANDr_binaryANDr_binaryENDEND
2023-11-17 18:08:00.083 : INFO: instruction count: 35: __C1664etypeEncode.__m1668ENCODE_SIndexablePointer_TO_r_array_of_r_struct_of_r_binaryANDr_binaryANDr_binaryANDr_binaryANDr_binaryANDr_binaryEND
2023-11-17 18:08:00.084 : INFO: instruction count: 73: __C1664etypeEncode.__m1669ENCODE_SBaseStructPointer_TO_r_struct_of_r_binaryANDr_binaryANDr_binaryANDr_binaryANDr_binaryANDr_binaryEND
2023-11-17 18:08:00.084 : INFO: instruction count: 16: __C1664etypeEncode.__m1670ENCODE_SStringPointer_TO_r_binary
2023-11-17 18:08:00.087 : INFO: instruction count: 3: __C1645HailClassLoaderContainer.<init>
2023-11-17 18:08:00.087 : INFO: instruction count: 3: __C1645HailClassLoaderContainer.<clinit>
2023-11-17 18:08:00.087 : INFO: instruction count: 3: __C1647FSContainer.<init>
2023-11-17 18:08:00.087 : INFO: instruction count: 3: __C1647FSContainer.<clinit>
2023-11-17 18:08:00.087 : INFO: instruction count: 3: __C1649Compiled.<init>
2023-11-17 18:08:00.087 : INFO: instruction count: 7: __C1649Compiled.apply
2023-11-17 18:08:00.088 : INFO: instruction count: 9: __C1649Compiled.setPartitionIndex
2023-11-17 18:08:00.088 : INFO: instruction count: 4: __C1649Compiled.addPartitionRegion
2023-11-17 18:08:00.088 : INFO: instruction count: 4: __C1649Compiled.setPool
2023-11-17 18:08:00.088 : INFO: instruction count: 3: __C1649Compiled.addHailClassLoader
2023-11-17 18:08:00.088 : INFO: instruction count: 3: __C1649Compiled.addFS
2023-11-17 18:08:00.088 : INFO: instruction count: 4: __C1649Compiled.addTaskContext
2023-11-17 18:08:00.088 : INFO: instruction count: 52: __C1649Compiled.addAndDecodeLiterals
2023-11-17 18:08:00.088 : INFO: instruction count: 27: __C1649Compiled.__m1655DECODE_r_struct_of_r_struct_of_r_array_of_r_struct_of_r_binaryANDr_binaryANDr_binaryANDr_binaryANDr_binaryANDr_binaryENDENDEND_TO_SBaseStructPointer
2023-11-17 18:08:00.088 : INFO: instruction count: 17: __C1649Compiled.__m1656INPLACE_DECODE_r_struct_of_r_array_of_r_struct_of_r_binaryANDr_binaryANDr_binaryANDr_binaryANDr_binaryANDr_binaryENDEND_TO_r_tuple_of_r_array_of_r_struct_of_r_stringANDr_stringANDr_stringANDr_stringANDr_stringANDr_stringENDEND
2023-11-17 18:08:00.088 : INFO: instruction count: 62: __C1649Compiled.__m1657INPLACE_DECODE_r_array_of_r_struct_of_r_binaryANDr_binaryANDr_binaryANDr_binaryANDr_binaryANDr_binaryEND_TO_r_array_of_r_struct_of_r_stringANDr_stringANDr_stringANDr_stringANDr_stringANDr_stringEND
2023-11-17 18:08:00.088 : INFO: instruction count: 62: __C1649Compiled.__m1658INPLACE_DECODE_r_struct_of_r_binaryANDr_binaryANDr_binaryANDr_binaryANDr_binaryANDr_binaryEND_TO_r_struct_of_r_stringANDr_stringANDr_stringANDr_stringANDr_stringANDr_stringEND
2023-11-17 18:08:00.088 : INFO: instruction count: 31: __C1649Compiled.__m1659INPLACE_DECODE_r_binary_TO_r_string
2023-11-17 18:08:00.090 : INFO: encoder cache miss (3 hits, 11 misses, 0.214)
2023-11-17 18:08:00.091 : INFO: instruction count: 3: __C1671HailClassLoaderContainer.<init>
2023-11-17 18:08:00.091 : INFO: instruction count: 3: __C1671HailClassLoaderContainer.<clinit>
2023-11-17 18:08:00.091 : INFO: instruction count: 3: __C1673FSContainer.<init>
2023-11-17 18:08:00.091 : INFO: instruction count: 3: __C1673FSContainer.<clinit>
2023-11-17 18:08:00.092 : INFO: instruction count: 3: __C1675etypeEncode.<init>
2023-11-17 18:08:00.092 : INFO: instruction count: 19: __C1675etypeEncode.apply
2023-11-17 18:08:00.092 : INFO: instruction count: 74: __C1675etypeEncode.__m1677ENCODE_SIndexablePointer_TO_o_array_of_o_struct_of_o_binaryANDo_binaryANDo_binaryANDo_binaryANDo_binaryANDo_binaryEND
2023-11-17 18:08:00.092 : INFO: instruction count: 101: __C1675etypeEncode.__m1678ENCODE_SBaseStructPointer_TO_o_struct_of_o_binaryANDo_binaryANDo_binaryANDo_binaryANDo_binaryANDo_binaryEND
2023-11-17 18:08:00.092 : INFO: instruction count: 16: __C1675etypeEncode.__m1679ENCODE_SStringPointer_TO_o_binary
2023-11-17 18:08:00.093 : INFO: RegionPool: initialized for thread 78: Thread-20
2023-11-17 18:08:00.093 : INFO: TaskReport: stage=0, partition=0, attempt=0, peakBytes=0, peakBytesReadable=0.00 B, chunks requested=0, cache hits=0
2023-11-17 18:08:00.093 : INFO: RegionPool: FREE: 0 allocated (0 blocks / 0 chunks), regions.size = 0, 0 current java objects, thread 78: Thread-20
2023-11-17 18:08:00.093 : INFO: RegionPool: FREE: 448.0K allocated (448.0K blocks / 0 chunks), regions.size = 7, 0 current java objects, thread 78: Thread-20
2023-11-17 18:08:00.093 : INFO: timing SparkBackend.execute total 3.088s self 0.195ms children 3.088s %children 99.99%
2023-11-17 18:08:00.093 : INFO: timing SparkBackend.execute/execute total 3.088s self 71.524ms children 3.016s %children 97.68%
2023-11-17 18:08:00.093 : INFO: timing SparkBackend.execute/execute/SemanticHash total 7.174ms self 0.024ms children 7.150ms %children 99.66%
2023-11-17 18:08:00.093 : INFO: timing SparkBackend.execute/execute/SemanticHash/NormalizeNames total 6.760ms self 6.760ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.093 : INFO: timing SparkBackend.execute/execute/SemanticHash/Hash total 0.390ms self 0.390ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.094 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, initial IR total 73.145ms self 0.008ms children 73.137ms %children 99.99%
2023-11-17 18:08:00.094 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, initial IR/Verify total 0.166ms self 0.166ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.094 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, initial IR/LoweringTransformation total 72.811ms self 0.029ms children 72.782ms %children 99.96%
2023-11-17 18:08:00.094 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize total 72.782ms self 0.111ms children 72.671ms %children 99.85%
2023-11-17 18:08:00.094 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/FoldConstants total 2.509ms self 2.509ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.094 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.164ms self 0.164ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.094 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/NormalizeNames total 4.349ms self 4.349ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.094 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/Simplify total 9.708ms self 9.708ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.094 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/ForwardLets total 8.663ms self 8.663ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.094 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/ForwardRelationalLets total 0.773ms self 0.773ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.094 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/PruneDeadFields total 11.858ms self 11.858ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.094 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/FoldConstants total 0.561ms self 0.561ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.094 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.075ms self 0.075ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.094 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/NormalizeNames total 2.511ms self 2.511ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.094 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/Simplify total 1.291ms self 1.291ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.094 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/ForwardLets total 5.859ms self 5.859ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.094 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/ForwardRelationalLets total 0.212ms self 0.212ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.094 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/PruneDeadFields total 8.010ms self 8.010ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.094 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/FoldConstants total 0.548ms self 0.548ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.094 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.078ms self 0.078ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.094 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/NormalizeNames total 2.121ms self 2.121ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.094 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/Simplify total 1.145ms self 1.145ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.094 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/ForwardLets total 4.911ms self 4.911ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.094 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/ForwardRelationalLets total 0.185ms self 0.185ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.094 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/PruneDeadFields total 7.138ms self 7.138ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.094 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, initial IR/Verify total 0.161ms self 0.161ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.094 : INFO: timing SparkBackend.execute/execute/LowerMatrixToTable total 4.729ms self 0.008ms children 4.721ms %children 99.84%
2023-11-17 18:08:00.094 : INFO: timing SparkBackend.execute/execute/LowerMatrixToTable/Verify total 0.122ms self 0.122ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.094 : INFO: timing SparkBackend.execute/execute/LowerMatrixToTable/LoweringTransformation total 4.267ms self 4.267ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.094 : INFO: timing SparkBackend.execute/execute/LowerMatrixToTable/Verify total 0.332ms self 0.332ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.094 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerMatrixToTable total 68.204ms self 0.006ms children 68.198ms %children 99.99%
2023-11-17 18:08:00.094 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerMatrixToTable/Verify total 0.041ms self 0.041ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.094 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation total 68.000ms self 0.023ms children 67.977ms %children 99.97%
2023-11-17 18:08:00.094 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize total 67.977ms self 0.085ms children 67.891ms %children 99.87%
2023-11-17 18:08:00.094 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/FoldConstants total 0.514ms self 0.514ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.094 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.111ms self 0.111ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.094 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/NormalizeNames total 4.906ms self 4.906ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.094 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/Simplify total 7.037ms self 7.037ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.094 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/ForwardLets total 5.411ms self 5.411ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.094 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/ForwardRelationalLets total 0.249ms self 0.249ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.094 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/PruneDeadFields total 11.832ms self 11.832ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.094 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/FoldConstants total 0.819ms self 0.819ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.094 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.083ms self 0.083ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.095 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/NormalizeNames total 2.064ms self 2.064ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.095 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/Simplify total 1.360ms self 1.360ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.095 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/ForwardLets total 6.236ms self 6.236ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.095 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/ForwardRelationalLets total 0.337ms self 0.337ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.095 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/PruneDeadFields total 8.513ms self 8.513ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.095 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/FoldConstants total 1.042ms self 1.042ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.095 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.145ms self 0.145ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.095 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/NormalizeNames total 1.944ms self 1.944ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.095 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/Simplify total 1.221ms self 1.221ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.095 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/ForwardLets total 5.335ms self 5.335ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.095 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/ForwardRelationalLets total 0.285ms self 0.285ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.095 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/PruneDeadFields total 8.448ms self 8.448ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.095 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerMatrixToTable/Verify total 0.157ms self 0.157ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.095 : INFO: timing SparkBackend.execute/execute/LiftRelationalValuesToRelationalLets total 0.695ms self 0.005ms children 0.690ms %children 99.31%
2023-11-17 18:08:00.095 : INFO: timing SparkBackend.execute/execute/LiftRelationalValuesToRelationalLets/Verify total 0.041ms self 0.041ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.095 : INFO: timing SparkBackend.execute/execute/LiftRelationalValuesToRelationalLets/LoweringTransformation total 0.549ms self 0.549ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.095 : INFO: timing SparkBackend.execute/execute/LiftRelationalValuesToRelationalLets/Verify total 0.101ms self 0.101ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.095 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets total 2.846s self 0.004ms children 2.846s %children 100.00%
2023-11-17 18:08:00.095 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/Verify total 0.029ms self 0.029ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.095 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation total 2.846s self 21.665ms children 2.824s %children 99.24%
2023-11-17 18:08:00.095 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerAndExecuteShuffles total 0.585ms self 0.022ms children 0.563ms %children 96.30%
2023-11-17 18:08:00.095 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerAndExecuteShuffles/Verify total 0.149ms self 0.149ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.095 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerAndExecuteShuffles/LoweringTransformation total 0.371ms self 0.371ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.095 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerAndExecuteShuffles/Verify total 0.043ms self 0.043ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.095 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles total 57.003ms self 0.006ms children 56.997ms %children 99.99%
2023-11-17 18:08:00.095 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/Verify total 0.023ms self 0.023ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.095 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation total 56.848ms self 0.018ms children 56.831ms %children 99.97%
2023-11-17 18:08:00.095 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize total 56.831ms self 0.083ms children 56.748ms %children 99.85%
2023-11-17 18:08:00.095 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/FoldConstants total 0.276ms self 0.276ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.095 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.107ms self 0.107ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.095 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/NormalizeNames total 2.216ms self 2.216ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.095 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/Simplify total 1.505ms self 1.505ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.095 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/ForwardLets total 7.362ms self 7.362ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.095 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/ForwardRelationalLets total 0.232ms self 0.232ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.095 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/PruneDeadFields total 8.051ms self 8.051ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.095 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/FoldConstants total 0.637ms self 0.637ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.095 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.124ms self 0.124ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.095 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/NormalizeNames total 2.497ms self 2.497ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.095 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/Simplify total 1.561ms self 1.561ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.095 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/ForwardLets total 4.870ms self 4.870ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.096 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/ForwardRelationalLets total 0.206ms self 0.206ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.096 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/PruneDeadFields total 8.848ms self 8.848ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.096 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/FoldConstants total 0.901ms self 0.901ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.096 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.103ms self 0.103ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.096 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/NormalizeNames total 2.671ms self 2.671ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.096 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/Simplify total 1.608ms self 1.608ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.096 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/ForwardLets total 4.685ms self 4.685ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.096 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/ForwardRelationalLets total 0.322ms self 0.322ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.096 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/PruneDeadFields total 7.963ms self 7.963ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.096 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/Verify total 0.125ms self 0.125ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.096 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable total 2.766s self 0.010ms children 2.766s %children 100.00%
2023-11-17 18:08:00.096 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/Verify total 0.022ms self 0.022ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.096 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation total 2.766s self 93.783ms children 2.673s %children 96.61%
2023-11-17 18:08:00.096 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate total 2.044s self 93.098ms children 1.951s %children 95.44%
2023-11-17 18:08:00.096 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, initial IR total 232.619ms self 0.007ms children 232.611ms %children 100.00%
2023-11-17 18:08:00.096 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, initial IR/Verify total 0.047ms self 0.047ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.096 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, initial IR/LoweringTransformation total 232.343ms self 0.025ms children 232.318ms %children 99.99%
2023-11-17 18:08:00.096 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize total 232.318ms self 0.072ms children 232.246ms %children 99.97%
2023-11-17 18:08:00.096 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/FoldConstants total 32.006ms self 29.719ms children 2.287ms %children 7.15%
2023-11-17 18:08:00.096 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/FoldConstants/InlineApplyIR total 0.037ms self 0.004ms children 0.033ms %children 88.08%
2023-11-17 18:08:00.096 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/FoldConstants/InlineApplyIR/Verify total 0.011ms self 0.011ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.096 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/FoldConstants/InlineApplyIR/LoweringTransformation total 0.019ms self 0.019ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.096 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/FoldConstants/InlineApplyIR/Verify total 0.003ms self 0.003ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.096 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/FoldConstants/LowerArrayAggsToRunAggs total 1.969ms self 0.005ms children 1.964ms %children 99.76%
2023-11-17 18:08:00.096 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/FoldConstants/LowerArrayAggsToRunAggs/Verify total 0.003ms self 0.003ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.096 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/FoldConstants/LowerArrayAggsToRunAggs/LoweringTransformation total 1.954ms self 1.954ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.096 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/FoldConstants/LowerArrayAggsToRunAggs/Verify total 0.007ms self 0.007ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.096 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/FoldConstants/EmitContext.analyze total 0.281ms self 0.281ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.096 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.338ms self 0.338ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.096 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/NormalizeNames total 13.120ms self 13.120ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.096 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/Simplify total 23.737ms self 23.737ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.096 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/ForwardLets total 17.241ms self 17.241ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.096 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/ForwardRelationalLets total 0.952ms self 0.952ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.096 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/PruneDeadFields total 94.282ms self 94.282ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.096 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/FoldConstants total 3.160ms self 3.160ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.096 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.181ms self 0.181ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.096 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/NormalizeNames total 4.132ms self 4.132ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.096 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/Simplify total 2.312ms self 2.312ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.096 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/ForwardLets total 9.436ms self 9.436ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.096 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/ForwardRelationalLets total 0.334ms self 0.334ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.096 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/PruneDeadFields total 8.300ms self 8.300ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.097 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/FoldConstants total 1.712ms self 1.712ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.097 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.141ms self 0.141ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.097 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/NormalizeNames total 3.436ms self 3.436ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.097 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/Simplify total 2.124ms self 2.124ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.097 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/ForwardLets total 6.445ms self 6.445ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.097 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/ForwardRelationalLets total 0.358ms self 0.358ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.097 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/PruneDeadFields total 8.499ms self 8.499ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.097 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, initial IR/Verify total 0.221ms self 0.221ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.097 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/LowerMatrixToTable total 0.319ms self 0.005ms children 0.314ms %children 98.44%
2023-11-17 18:08:00.097 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/LowerMatrixToTable/Verify total 0.038ms self 0.038ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.097 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/LowerMatrixToTable/LoweringTransformation total 0.250ms self 0.250ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.097 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/LowerMatrixToTable/Verify total 0.026ms self 0.026ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.097 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, after LowerMatrixToTable total 58.456ms self 0.008ms children 58.448ms %children 99.99%
2023-11-17 18:08:00.097 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, after LowerMatrixToTable/Verify total 0.024ms self 0.024ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.097 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation total 58.217ms self 0.027ms children 58.190ms %children 99.95%
2023-11-17 18:08:00.097 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize total 58.190ms self 0.073ms children 58.117ms %children 99.87%
2023-11-17 18:08:00.097 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/FoldConstants total 0.391ms self 0.391ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.097 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.173ms self 0.173ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.097 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/NormalizeNames total 2.907ms self 2.907ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.097 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/Simplify total 1.977ms self 1.977ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.097 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/ForwardLets total 7.069ms self 7.069ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.097 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/ForwardRelationalLets total 0.280ms self 0.280ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.097 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/PruneDeadFields total 6.775ms self 6.775ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.097 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/FoldConstants total 1.161ms self 1.161ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.097 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.103ms self 0.103ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.097 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/NormalizeNames total 2.049ms self 2.049ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.097 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/Simplify total 2.084ms self 2.084ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.097 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/ForwardLets total 6.129ms self 6.129ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.097 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/ForwardRelationalLets total 0.260ms self 0.260ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.097 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/PruneDeadFields total 7.145ms self 7.145ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.097 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/FoldConstants total 1.158ms self 1.158ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.097 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.526ms self 0.526ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.097 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/NormalizeNames total 2.744ms self 2.744ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.097 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/Simplify total 1.878ms self 1.878ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.097 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/ForwardLets total 4.993ms self 4.993ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.097 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/ForwardRelationalLets total 0.391ms self 0.391ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.097 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/PruneDeadFields total 7.924ms self 7.924ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.097 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, after LowerMatrixToTable/Verify total 0.208ms self 0.208ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.097 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/LiftRelationalValuesToRelationalLets total 0.487ms self 0.009ms children 0.479ms %children 98.25%
2023-11-17 18:08:00.097 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/LiftRelationalValuesToRelationalLets/Verify total 0.058ms self 0.058ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.097 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/LiftRelationalValuesToRelationalLets/LoweringTransformation total 0.372ms self 0.372ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.097 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/LiftRelationalValuesToRelationalLets/Verify total 0.049ms self 0.049ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.098 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/EvalRelationalLets total 0.238ms self 0.006ms children 0.232ms %children 97.31%
2023-11-17 18:08:00.098 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/EvalRelationalLets/Verify total 0.050ms self 0.050ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.098 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/EvalRelationalLets/LoweringTransformation total 0.150ms self 0.150ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.098 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/EvalRelationalLets/Verify total 0.032ms self 0.032ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.098 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/LowerAndExecuteShuffles total 0.285ms self 0.005ms children 0.280ms %children 98.13%
2023-11-17 18:08:00.098 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/LowerAndExecuteShuffles/Verify total 0.055ms self 0.055ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.098 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/LowerAndExecuteShuffles/LoweringTransformation total 0.185ms self 0.185ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.098 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/LowerAndExecuteShuffles/Verify total 0.040ms self 0.040ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.098 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, after LowerAndExecuteShuffles total 75.496ms self 0.009ms children 75.487ms %children 99.99%
2023-11-17 18:08:00.098 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, after LowerAndExecuteShuffles/Verify total 0.035ms self 0.035ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.098 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation total 75.266ms self 0.033ms children 75.233ms %children 99.96%
2023-11-17 18:08:00.098 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize total 75.233ms self 0.096ms children 75.137ms %children 99.87%
2023-11-17 18:08:00.098 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/FoldConstants total 0.688ms self 0.688ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.098 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.198ms self 0.198ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.098 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/NormalizeNames total 2.829ms self 2.829ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.098 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/Simplify total 2.398ms self 2.398ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.098 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/ForwardLets total 11.222ms self 11.222ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.098 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/ForwardRelationalLets total 0.297ms self 0.297ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.098 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/PruneDeadFields total 12.654ms self 12.654ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.098 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/FoldConstants total 1.628ms self 1.628ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.098 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.264ms self 0.264ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.098 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/NormalizeNames total 5.498ms self 5.498ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.098 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/Simplify total 2.079ms self 2.079ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.098 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/ForwardLets total 5.177ms self 5.177ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.098 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/ForwardRelationalLets total 0.274ms self 0.274ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.098 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/PruneDeadFields total 8.192ms self 8.192ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.098 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/FoldConstants total 1.161ms self 1.161ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.098 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.134ms self 0.134ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.098 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/NormalizeNames total 2.260ms self 2.260ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.098 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/Simplify total 2.208ms self 2.208ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.098 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/ForwardLets total 6.076ms self 6.076ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.098 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/ForwardRelationalLets total 0.226ms self 0.226ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.098 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/PruneDeadFields total 9.675ms self 9.675ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.098 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, after LowerAndExecuteShuffles/Verify total 0.187ms self 0.187ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.098 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/LowerOrInterpretNonCompilable total 1.051ms self 0.009ms children 1.042ms %children 99.14%
2023-11-17 18:08:00.098 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/LowerOrInterpretNonCompilable/Verify total 0.033ms self 0.033ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.099 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/LowerOrInterpretNonCompilable/LoweringTransformation total 0.787ms self 0.787ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.099 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/LowerOrInterpretNonCompilable/Verify total 0.222ms self 0.222ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.099 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, after LowerOrInterpretNonCompilable total 62.353ms self 0.008ms children 62.346ms %children 99.99%
2023-11-17 18:08:00.099 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/Verify total 0.027ms self 0.027ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.099 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation total 62.225ms self 0.027ms children 62.199ms %children 99.96%
2023-11-17 18:08:00.099 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize total 62.199ms self 0.077ms children 62.122ms %children 99.88%
2023-11-17 18:08:00.099 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/FoldConstants total 0.801ms self 0.801ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.099 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.178ms self 0.178ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.099 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/NormalizeNames total 2.067ms self 2.067ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.099 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/Simplify total 2.699ms self 2.699ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.099 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/ForwardLets total 4.118ms self 4.118ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.099 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/ForwardRelationalLets total 0.179ms self 0.179ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.099 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/PruneDeadFields total 9.866ms self 9.866ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.099 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/FoldConstants total 0.972ms self 0.972ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.099 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.128ms self 0.128ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.099 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/NormalizeNames total 1.911ms self 1.911ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.099 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/Simplify total 1.789ms self 1.789ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.099 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/ForwardLets total 5.355ms self 5.355ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.099 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/ForwardRelationalLets total 0.264ms self 0.264ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.099 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/PruneDeadFields total 8.860ms self 8.860ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.099 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/FoldConstants total 1.596ms self 1.596ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.099 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.191ms self 0.191ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.099 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/NormalizeNames total 2.833ms self 2.833ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.099 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/Simplify total 2.525ms self 2.525ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.099 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/ForwardLets total 6.356ms self 6.356ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.099 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/ForwardRelationalLets total 0.260ms self 0.260ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.099 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/PruneDeadFields total 9.174ms self 9.174ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.099 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/Verify total 0.093ms self 0.093ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.099 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/Compile total 632.444ms self 448.990ms children 183.454ms %children 29.01%
2023-11-17 18:08:00.099 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/Compile/optimize: compileLowerer, initial IR total 54.745ms self 0.009ms children 54.736ms %children 99.98%
2023-11-17 18:08:00.099 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/Compile/optimize: compileLowerer, initial IR/Verify total 0.035ms self 0.035ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.099 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/Compile/optimize: compileLowerer, initial IR/LoweringTransformation total 54.605ms self 0.030ms children 54.574ms %children 99.94%
2023-11-17 18:08:00.099 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize total 54.574ms self 0.093ms children 54.481ms %children 99.83%
2023-11-17 18:08:00.099 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/FoldConstants total 0.421ms self 0.421ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.099 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.122ms self 0.122ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.099 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/NormalizeNames total 1.406ms self 1.406ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.099 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/Simplify total 2.117ms self 2.117ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.100 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/ForwardLets total 4.258ms self 4.258ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.100 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/ForwardRelationalLets total 0.173ms self 0.173ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.100 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/PruneDeadFields total 7.795ms self 7.795ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.100 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/FoldConstants total 2.804ms self 2.804ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.100 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.191ms self 0.191ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.100 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/NormalizeNames total 2.667ms self 2.667ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.100 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/Simplify total 1.765ms self 1.765ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.100 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/ForwardLets total 4.728ms self 4.728ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.100 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/ForwardRelationalLets total 0.198ms self 0.198ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.100 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/PruneDeadFields total 9.654ms self 9.654ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.100 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/FoldConstants total 0.843ms self 0.843ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.100 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.126ms self 0.126ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.100 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/NormalizeNames total 2.245ms self 2.245ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.100 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/Simplify total 1.963ms self 1.963ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.100 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/ForwardLets total 4.171ms self 4.171ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.100 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/ForwardRelationalLets total 0.171ms self 0.171ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.100 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/PruneDeadFields total 6.663ms self 6.663ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.100 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/Compile/optimize: compileLowerer, initial IR/Verify total 0.096ms self 0.096ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.100 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/Compile/InlineApplyIR total 0.727ms self 0.006ms children 0.721ms %children 99.19%
2023-11-17 18:08:00.100 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/Compile/InlineApplyIR/Verify total 0.077ms self 0.077ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.100 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/Compile/InlineApplyIR/LoweringTransformation total 0.374ms self 0.374ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.100 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/Compile/InlineApplyIR/Verify total 0.271ms self 0.271ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.100 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/Compile/optimize: compileLowerer, after InlineApplyIR total 42.839ms self 0.007ms children 42.832ms %children 99.98%
2023-11-17 18:08:00.100 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/Compile/optimize: compileLowerer, after InlineApplyIR/Verify total 0.022ms self 0.022ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.100 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation total 42.739ms self 0.021ms children 42.718ms %children 99.95%
2023-11-17 18:08:00.100 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize total 42.718ms self 0.063ms children 42.655ms %children 99.85%
2023-11-17 18:08:00.100 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/FoldConstants total 0.281ms self 0.281ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.100 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.116ms self 0.116ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.100 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/NormalizeNames total 1.551ms self 1.551ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.101 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/Simplify total 2.311ms self 2.311ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.101 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/ForwardLets total 3.772ms self 3.772ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.101 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/ForwardRelationalLets total 0.174ms self 0.174ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.101 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/PruneDeadFields total 6.784ms self 6.784ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.101 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/FoldConstants total 0.719ms self 0.719ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.101 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.125ms self 0.125ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.101 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/NormalizeNames total 1.494ms self 1.494ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.101 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/Simplify total 2.093ms self 2.093ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.101 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/ForwardLets total 3.665ms self 3.665ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.101 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/ForwardRelationalLets total 0.268ms self 0.268ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.101 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/PruneDeadFields total 6.452ms self 6.452ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.101 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/FoldConstants total 0.640ms self 0.640ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.101 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.243ms self 0.243ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.101 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/NormalizeNames total 1.323ms self 1.323ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.101 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/Simplify total 1.652ms self 1.652ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.101 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/ForwardLets total 2.873ms self 2.873ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.101 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/ForwardRelationalLets total 0.202ms self 0.202ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.101 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/PruneDeadFields total 5.918ms self 5.918ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.101 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/Compile/optimize: compileLowerer, after InlineApplyIR/Verify total 0.071ms self 0.071ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.101 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/Compile/LowerArrayAggsToRunAggs total 24.168ms self 0.008ms children 24.160ms %children 99.97%
2023-11-17 18:08:00.101 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/Compile/LowerArrayAggsToRunAggs/Verify total 0.069ms self 0.069ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.101 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/Compile/LowerArrayAggsToRunAggs/LoweringTransformation total 23.719ms self 23.719ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.101 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/Compile/LowerArrayAggsToRunAggs/Verify total 0.372ms self 0.372ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.101 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs total 39.827ms self 0.007ms children 39.820ms %children 99.98%
2023-11-17 18:08:00.102 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/Verify total 0.015ms self 0.015ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.102 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation total 39.733ms self 0.020ms children 39.712ms %children 99.95%
2023-11-17 18:08:00.102 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize total 39.712ms self 0.140ms children 39.572ms %children 99.65%
2023-11-17 18:08:00.102 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/FoldConstants total 0.433ms self 0.433ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.102 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.092ms self 0.092ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.102 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/NormalizeNames total 1.154ms self 1.154ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.102 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/Simplify total 1.430ms self 1.430ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.102 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/ForwardLets total 3.063ms self 3.063ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.102 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/ForwardRelationalLets total 0.152ms self 0.152ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.102 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/PruneDeadFields total 6.449ms self 6.449ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.102 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/FoldConstants total 0.821ms self 0.821ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.102 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.132ms self 0.132ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.102 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/NormalizeNames total 1.381ms self 1.381ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.102 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/Simplify total 1.694ms self 1.694ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.102 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/ForwardLets total 2.965ms self 2.965ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.102 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/ForwardRelationalLets total 0.161ms self 0.161ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.102 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/PruneDeadFields total 5.715ms self 5.715ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.102 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/FoldConstants total 0.704ms self 0.704ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.102 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.217ms self 0.217ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.102 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/NormalizeNames total 1.507ms self 1.507ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.102 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/Simplify total 1.506ms self 1.506ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.102 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/ForwardLets total 3.311ms self 3.311ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.102 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/ForwardRelationalLets total 0.153ms self 0.153ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.103 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/PruneDeadFields total 6.532ms self 6.532ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.103 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/Verify total 0.072ms self 0.072ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.103 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/Compile/EmitContext.analyze total 21.147ms self 21.147ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.103 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/InitializeCompiledFunction total 5.361ms self 5.361ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.103 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/CompileAndEvaluate/RunCompiledFunction total 881.443ms self 881.443ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.103 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, initial IR total 69.860ms self 0.007ms children 69.853ms %children 99.99%
2023-11-17 18:08:00.103 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, initial IR/Verify total 0.021ms self 0.021ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.103 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, initial IR/LoweringTransformation total 69.679ms self 0.035ms children 69.644ms %children 99.95%
2023-11-17 18:08:00.103 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize total 69.644ms self 0.080ms children 69.564ms %children 99.89%
2023-11-17 18:08:00.103 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/FoldConstants total 0.294ms self 0.294ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.103 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.099ms self 0.099ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.103 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/NormalizeNames total 4.307ms self 4.307ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.103 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/Simplify total 7.736ms self 7.736ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.103 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/ForwardLets total 7.144ms self 7.144ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.103 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/ForwardRelationalLets total 0.602ms self 0.602ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.103 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/PruneDeadFields total 10.838ms self 10.838ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.103 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/FoldConstants total 1.178ms self 1.178ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.103 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.111ms self 0.111ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.103 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/NormalizeNames total 3.599ms self 3.599ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.103 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/Simplify total 2.237ms self 2.237ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.103 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/ForwardLets total 7.077ms self 7.077ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.103 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/ForwardRelationalLets total 0.454ms self 0.454ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.103 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/PruneDeadFields total 7.779ms self 7.779ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.103 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/FoldConstants total 0.979ms self 0.979ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.104 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.095ms self 0.095ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.104 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/NormalizeNames total 1.842ms self 1.842ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.104 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/Simplify total 2.375ms self 2.375ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.104 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/ForwardLets total 4.766ms self 4.766ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.104 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/ForwardRelationalLets total 0.275ms self 0.275ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.104 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, initial IR/LoweringTransformation/Optimize/PruneDeadFields total 5.777ms self 5.777ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.104 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, initial IR/Verify total 0.153ms self 0.153ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.104 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/LowerMatrixToTable total 0.215ms self 0.005ms children 0.210ms %children 97.50%
2023-11-17 18:08:00.104 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/LowerMatrixToTable/Verify total 0.024ms self 0.024ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.104 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/LowerMatrixToTable/LoweringTransformation total 0.166ms self 0.166ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.104 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/LowerMatrixToTable/Verify total 0.020ms self 0.020ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.104 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerMatrixToTable total 47.168ms self 0.008ms children 47.160ms %children 99.98%
2023-11-17 18:08:00.104 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerMatrixToTable/Verify total 0.023ms self 0.023ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.104 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation total 46.974ms self 0.033ms children 46.941ms %children 99.93%
2023-11-17 18:08:00.104 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize total 46.941ms self 0.068ms children 46.874ms %children 99.86%
2023-11-17 18:08:00.104 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/FoldConstants total 0.233ms self 0.233ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.104 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.095ms self 0.095ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.104 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/NormalizeNames total 1.567ms self 1.567ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.104 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/Simplify total 1.836ms self 1.836ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.104 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/ForwardLets total 4.777ms self 4.777ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.104 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/ForwardRelationalLets total 0.214ms self 0.214ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.104 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/PruneDeadFields total 5.773ms self 5.773ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.105 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/FoldConstants total 0.666ms self 0.666ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.105 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.091ms self 0.091ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.105 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/NormalizeNames total 1.411ms self 1.411ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.105 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/Simplify total 1.500ms self 1.500ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.105 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/ForwardLets total 4.234ms self 4.234ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.105 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/ForwardRelationalLets total 0.237ms self 0.237ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.105 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/PruneDeadFields total 7.970ms self 7.970ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.105 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/FoldConstants total 0.876ms self 0.876ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.105 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.110ms self 0.110ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.105 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/NormalizeNames total 1.542ms self 1.542ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.105 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/Simplify total 1.855ms self 1.855ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.105 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/ForwardLets total 4.008ms self 4.008ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.105 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/ForwardRelationalLets total 0.239ms self 0.239ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.105 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerMatrixToTable/LoweringTransformation/Optimize/PruneDeadFields total 7.640ms self 7.640ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.105 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerMatrixToTable/Verify total 0.163ms self 0.163ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.105 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/LiftRelationalValuesToRelationalLets total 0.194ms self 0.005ms children 0.189ms %children 97.38%
2023-11-17 18:08:00.105 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/LiftRelationalValuesToRelationalLets/Verify total 0.043ms self 0.043ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.105 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/LiftRelationalValuesToRelationalLets/LoweringTransformation total 0.126ms self 0.126ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.105 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/LiftRelationalValuesToRelationalLets/Verify total 0.020ms self 0.020ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.105 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/EvalRelationalLets total 0.217ms self 0.028ms children 0.189ms %children 87.14%
2023-11-17 18:08:00.105 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/EvalRelationalLets/Verify total 0.024ms self 0.024ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.105 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/EvalRelationalLets/LoweringTransformation total 0.112ms self 0.112ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.105 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/EvalRelationalLets/Verify total 0.053ms self 0.053ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.105 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/LowerAndExecuteShuffles total 0.206ms self 0.004ms children 0.202ms %children 97.92%
2023-11-17 18:08:00.105 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/LowerAndExecuteShuffles/Verify total 0.026ms self 0.026ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.106 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/LowerAndExecuteShuffles/LoweringTransformation total 0.142ms self 0.142ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.106 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/LowerAndExecuteShuffles/Verify total 0.033ms self 0.033ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.106 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles total 36.078ms self 0.007ms children 36.072ms %children 99.98%
2023-11-17 18:08:00.106 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/Verify total 0.015ms self 0.015ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.106 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation total 35.916ms self 0.039ms children 35.877ms %children 99.89%
2023-11-17 18:08:00.106 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize total 35.877ms self 0.061ms children 35.816ms %children 99.83%
2023-11-17 18:08:00.106 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/FoldConstants total 0.219ms self 0.219ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.106 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.091ms self 0.091ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.106 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/NormalizeNames total 1.316ms self 1.316ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.106 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/Simplify total 1.444ms self 1.444ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.106 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/ForwardLets total 4.238ms self 4.238ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.106 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/ForwardRelationalLets total 0.225ms self 0.225ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.106 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/PruneDeadFields total 4.956ms self 4.956ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.106 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/FoldConstants total 0.632ms self 0.632ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.106 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.099ms self 0.099ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.106 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/NormalizeNames total 1.303ms self 1.303ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.106 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/Simplify total 1.439ms self 1.439ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.106 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/ForwardLets total 3.261ms self 3.261ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.106 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/ForwardRelationalLets total 0.199ms self 0.199ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.106 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/PruneDeadFields total 4.652ms self 4.652ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.106 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/FoldConstants total 0.629ms self 0.629ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.106 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.083ms self 0.083ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.106 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/NormalizeNames total 1.219ms self 1.219ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.106 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/Simplify total 1.341ms self 1.341ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.106 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/ForwardLets total 3.103ms self 3.103ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.106 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/ForwardRelationalLets total 0.353ms self 0.353ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.106 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/PruneDeadFields total 5.013ms self 5.013ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.106 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerAndExecuteShuffles/Verify total 0.141ms self 0.141ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.106 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/LowerOrInterpretNonCompilable total 0.389ms self 0.006ms children 0.384ms %children 98.55%
2023-11-17 18:08:00.106 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/LowerOrInterpretNonCompilable/Verify total 0.046ms self 0.046ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.106 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation total 0.286ms self 0.286ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.106 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/LowerOrInterpretNonCompilable/Verify total 0.052ms self 0.052ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.106 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable total 33.225ms self 0.006ms children 33.219ms %children 99.98%
2023-11-17 18:08:00.106 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/Verify total 0.015ms self 0.015ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.106 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation total 33.084ms self 0.030ms children 33.053ms %children 99.91%
2023-11-17 18:08:00.106 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize total 33.053ms self 0.043ms children 33.010ms %children 99.87%
2023-11-17 18:08:00.106 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/FoldConstants total 0.209ms self 0.209ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.106 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.079ms self 0.079ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.106 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/NormalizeNames total 1.067ms self 1.067ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.106 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/Simplify total 1.375ms self 1.375ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.106 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/ForwardLets total 3.425ms self 3.425ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.107 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/ForwardRelationalLets total 0.136ms self 0.136ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.107 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/PruneDeadFields total 5.198ms self 5.198ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.107 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/FoldConstants total 0.556ms self 0.556ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.107 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.078ms self 0.078ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.107 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/NormalizeNames total 1.331ms self 1.331ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.107 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/Simplify total 1.509ms self 1.509ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.107 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/ForwardLets total 2.723ms self 2.723ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.107 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/ForwardRelationalLets total 0.246ms self 0.246ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.107 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/PruneDeadFields total 4.539ms self 4.539ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.107 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/FoldConstants total 0.545ms self 0.545ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.107 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.075ms self 0.075ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.107 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/NormalizeNames total 1.098ms self 1.098ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.107 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/Simplify total 1.232ms self 1.232ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.107 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/ForwardLets total 3.078ms self 3.078ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.107 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/ForwardRelationalLets total 0.279ms self 0.279ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.107 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/PruneDeadFields total 4.230ms self 4.230ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.107 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/Verify total 0.120ms self 0.120ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.107 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile total 380.061ms self 244.917ms children 135.144ms %children 35.56%
2023-11-17 18:08:00.107 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, initial IR total 34.848ms self 0.007ms children 34.842ms %children 99.98%
2023-11-17 18:08:00.107 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, initial IR/Verify total 0.027ms self 0.027ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.107 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, initial IR/LoweringTransformation total 34.669ms self 0.030ms children 34.639ms %children 99.91%
2023-11-17 18:08:00.107 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize total 34.639ms self 0.076ms children 34.563ms %children 99.78%
2023-11-17 18:08:00.107 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/FoldConstants total 0.287ms self 0.287ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.107 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.087ms self 0.087ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.107 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/NormalizeNames total 1.314ms self 1.314ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.107 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/Simplify total 1.594ms self 1.594ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.107 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/ForwardLets total 2.962ms self 2.962ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.107 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/ForwardRelationalLets total 0.130ms self 0.130ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.107 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/PruneDeadFields total 4.761ms self 4.761ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.107 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/FoldConstants total 0.708ms self 0.708ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.107 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.105ms self 0.105ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.107 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/NormalizeNames total 1.291ms self 1.291ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.108 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/Simplify total 1.534ms self 1.534ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.108 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/ForwardLets total 3.744ms self 3.744ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.108 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/ForwardRelationalLets total 0.136ms self 0.136ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.108 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/PruneDeadFields total 4.310ms self 4.310ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.108 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/FoldConstants total 0.745ms self 0.745ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.108 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.125ms self 0.125ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.108 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/NormalizeNames total 1.292ms self 1.292ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.108 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/Simplify total 1.321ms self 1.321ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.108 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/ForwardLets total 3.108ms self 3.108ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.108 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/ForwardRelationalLets total 0.138ms self 0.138ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.108 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/PruneDeadFields total 4.871ms self 4.871ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.108 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, initial IR/Verify total 0.145ms self 0.145ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.108 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/InlineApplyIR total 0.404ms self 0.006ms children 0.399ms %children 98.62%
2023-11-17 18:08:00.108 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/InlineApplyIR/Verify total 0.059ms self 0.059ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.108 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/InlineApplyIR/LoweringTransformation total 0.247ms self 0.247ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.108 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/InlineApplyIR/Verify total 0.092ms self 0.092ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.108 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after InlineApplyIR total 34.221ms self 0.007ms children 34.214ms %children 99.98%
2023-11-17 18:08:00.108 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after InlineApplyIR/Verify total 0.015ms self 0.015ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.108 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation total 34.092ms self 0.026ms children 34.066ms %children 99.92%
2023-11-17 18:08:00.108 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize total 34.066ms self 0.055ms children 34.011ms %children 99.84%
2023-11-17 18:08:00.108 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/FoldConstants total 0.207ms self 0.207ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.108 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.086ms self 0.086ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.108 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/NormalizeNames total 1.214ms self 1.214ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.108 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/Simplify total 1.773ms self 1.773ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.108 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/ForwardLets total 2.847ms self 2.847ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.108 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/ForwardRelationalLets total 0.148ms self 0.148ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.108 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/PruneDeadFields total 4.599ms self 4.599ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.108 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/FoldConstants total 0.625ms self 0.625ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.108 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.089ms self 0.089ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.108 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/NormalizeNames total 1.043ms self 1.043ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.108 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/Simplify total 1.380ms self 1.380ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.108 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/ForwardLets total 2.660ms self 2.660ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.108 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/ForwardRelationalLets total 0.152ms self 0.152ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.108 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/PruneDeadFields total 4.812ms self 4.812ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.108 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/FoldConstants total 1.168ms self 1.168ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.108 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.109ms self 0.109ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.108 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/NormalizeNames total 1.098ms self 1.098ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.108 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/Simplify total 1.473ms self 1.473ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.108 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/ForwardLets total 2.626ms self 2.626ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.109 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/ForwardRelationalLets total 0.247ms self 0.247ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.109 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/PruneDeadFields total 5.655ms self 5.655ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.109 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after InlineApplyIR/Verify total 0.107ms self 0.107ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.109 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/LowerArrayAggsToRunAggs total 10.316ms self 0.007ms children 10.309ms %children 99.93%
2023-11-17 18:08:00.109 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/LowerArrayAggsToRunAggs/Verify total 0.055ms self 0.055ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.109 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/LowerArrayAggsToRunAggs/LoweringTransformation total 10.182ms self 10.182ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.109 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/LowerArrayAggsToRunAggs/Verify total 0.072ms self 0.072ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.109 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs total 41.105ms self 0.007ms children 41.098ms %children 99.98%
2023-11-17 18:08:00.109 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/Verify total 0.016ms self 0.016ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.109 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation total 41.012ms self 0.028ms children 40.984ms %children 99.93%
2023-11-17 18:08:00.109 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize total 40.984ms self 0.065ms children 40.920ms %children 99.84%
2023-11-17 18:08:00.109 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/FoldConstants total 0.405ms self 0.405ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.109 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.211ms self 0.211ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.109 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/NormalizeNames total 1.282ms self 1.282ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.109 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/Simplify total 1.403ms self 1.403ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.109 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/ForwardLets total 2.971ms self 2.971ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.109 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/ForwardRelationalLets total 0.167ms self 0.167ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.109 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/PruneDeadFields total 4.639ms self 4.639ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.109 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/FoldConstants total 0.556ms self 0.556ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.109 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.089ms self 0.089ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.109 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/NormalizeNames total 0.946ms self 0.946ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.109 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/Simplify total 1.450ms self 1.450ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.109 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/ForwardLets total 3.520ms self 3.520ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.109 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/ForwardRelationalLets total 0.127ms self 0.127ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.109 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/PruneDeadFields total 5.305ms self 5.305ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.109 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/FoldConstants total 0.843ms self 0.843ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.109 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.156ms self 0.156ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.109 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/NormalizeNames total 7.998ms self 7.998ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.109 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/Simplify total 1.454ms self 1.454ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.109 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/ForwardLets total 2.656ms self 2.656ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.109 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/ForwardRelationalLets total 0.128ms self 0.128ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.109 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/PruneDeadFields total 4.612ms self 4.612ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.109 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/Verify total 0.070ms self 0.070ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.109 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/Compile/EmitContext.analyze total 14.250ms self 14.250ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.109 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/InitializeCompiledFunction total 4.444ms self 4.444ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.109 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/LoweringTransformation/RunCompiledFunction total 56.913ms self 56.913ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.109 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/LowerOrInterpretNonCompilable/Verify total 0.004ms self 0.004ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.109 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable total 0.177ms self 0.004ms children 0.173ms %children 97.57%
2023-11-17 18:08:00.110 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/Verify total 0.001ms self 0.001ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.110 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation total 0.171ms self 0.008ms children 0.163ms %children 95.44%
2023-11-17 18:08:00.110 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize total 0.163ms self 0.011ms children 0.152ms %children 93.21%
2023-11-17 18:08:00.110 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/FoldConstants total 0.036ms self 0.036ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.110 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.004ms self 0.004ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.110 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/NormalizeNames total 0.013ms self 0.013ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.110 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/Simplify total 0.015ms self 0.015ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.110 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/ForwardLets total 0.027ms self 0.027ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.110 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/ForwardRelationalLets total 0.013ms self 0.013ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.110 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/PruneDeadFields total 0.044ms self 0.044ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.110 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/LoweringTransformation/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/Verify total 0.001ms self 0.001ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.110 : INFO: timing SparkBackend.execute/execute/EvalRelationalLets/Verify total 0.005ms self 0.005ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.110 : INFO: timing SparkBackend.execute/execute/LowerAndExecuteShuffles total 0.018ms self 0.003ms children 0.015ms %children 81.80%
2023-11-17 18:08:00.110 : INFO: timing SparkBackend.execute/execute/LowerAndExecuteShuffles/Verify total 0.002ms self 0.002ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.110 : INFO: timing SparkBackend.execute/execute/LowerAndExecuteShuffles/LoweringTransformation total 0.012ms self 0.012ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.110 : INFO: timing SparkBackend.execute/execute/LowerAndExecuteShuffles/Verify total 0.001ms self 0.001ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.110 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerAndExecuteShuffles total 4.012ms self 0.003ms children 4.009ms %children 99.92%
2023-11-17 18:08:00.110 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerAndExecuteShuffles/Verify total 0.001ms self 0.001ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.110 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation total 4.007ms self 0.006ms children 4.001ms %children 99.86%
2023-11-17 18:08:00.110 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize total 4.001ms self 0.017ms children 3.984ms %children 99.59%
2023-11-17 18:08:00.110 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/FoldConstants total 3.803ms self 3.803ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.110 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.003ms self 0.003ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.110 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/NormalizeNames total 0.032ms self 0.032ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.110 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/Simplify total 0.015ms self 0.015ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.110 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/ForwardLets total 0.020ms self 0.020ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.110 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/ForwardRelationalLets total 0.014ms self 0.014ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.110 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/PruneDeadFields total 0.035ms self 0.035ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.110 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/FoldConstants total 0.019ms self 0.019ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.110 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.001ms self 0.001ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.110 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/NormalizeNames total 0.004ms self 0.004ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.110 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/Simplify total 0.007ms self 0.007ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.110 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/ForwardLets total 0.011ms self 0.011ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.110 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/ForwardRelationalLets total 0.008ms self 0.008ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.110 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerAndExecuteShuffles/LoweringTransformation/Optimize/PruneDeadFields total 0.013ms self 0.013ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.110 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerAndExecuteShuffles/Verify total 0.001ms self 0.001ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.110 : INFO: timing SparkBackend.execute/execute/LowerOrInterpretNonCompilable total 0.013ms self 0.003ms children 0.010ms %children 75.10%
2023-11-17 18:08:00.110 : INFO: timing SparkBackend.execute/execute/LowerOrInterpretNonCompilable/Verify total 0.001ms self 0.001ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.111 : INFO: timing SparkBackend.execute/execute/LowerOrInterpretNonCompilable/LoweringTransformation total 0.006ms self 0.006ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.111 : INFO: timing SparkBackend.execute/execute/LowerOrInterpretNonCompilable/Verify total 0.003ms self 0.003ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.111 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerOrInterpretNonCompilable total 0.075ms self 0.002ms children 0.073ms %children 96.80%
2023-11-17 18:08:00.111 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/Verify total 0.001ms self 0.001ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.111 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation total 0.072ms self 0.006ms children 0.066ms %children 92.20%
2023-11-17 18:08:00.111 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize total 0.066ms self 0.007ms children 0.059ms %children 89.53%
2023-11-17 18:08:00.111 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/FoldConstants total 0.017ms self 0.017ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.111 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.001ms self 0.001ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.111 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/NormalizeNames total 0.003ms self 0.003ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.111 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/Simplify total 0.005ms self 0.005ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.111 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/ForwardLets total 0.011ms self 0.011ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.111 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/ForwardRelationalLets total 0.008ms self 0.008ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.111 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/LoweringTransformation/Optimize/PruneDeadFields total 0.014ms self 0.014ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.111 : INFO: timing SparkBackend.execute/execute/optimize: relationalLowerer, after LowerOrInterpretNonCompilable/Verify total 0.001ms self 0.001ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.111 : INFO: timing SparkBackend.execute/execute/Compile total 11.047ms self 10.344ms children 0.703ms %children 6.36%
2023-11-17 18:08:00.111 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, initial IR total 0.268ms self 0.003ms children 0.265ms %children 99.02%
2023-11-17 18:08:00.111 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, initial IR/Verify total 0.001ms self 0.001ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.111 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, initial IR/LoweringTransformation total 0.263ms self 0.005ms children 0.258ms %children 98.23%
2023-11-17 18:08:00.111 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize total 0.258ms self 0.012ms children 0.247ms %children 95.37%
2023-11-17 18:08:00.111 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/FoldConstants total 0.126ms self 0.126ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.111 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.002ms self 0.002ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.111 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/NormalizeNames total 0.029ms self 0.029ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.111 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/Simplify total 0.005ms self 0.005ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.111 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/ForwardLets total 0.012ms self 0.012ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.111 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/ForwardRelationalLets total 0.008ms self 0.008ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.111 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/PruneDeadFields total 0.014ms self 0.014ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.111 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/FoldConstants total 0.015ms self 0.015ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.111 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.001ms self 0.001ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.111 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/NormalizeNames total 0.003ms self 0.003ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.111 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/Simplify total 0.004ms self 0.004ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.111 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/ForwardLets total 0.009ms self 0.009ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.111 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/ForwardRelationalLets total 0.007ms self 0.007ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.111 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, initial IR/LoweringTransformation/Optimize/PruneDeadFields total 0.011ms self 0.011ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.111 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, initial IR/Verify total 0.001ms self 0.001ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.111 : INFO: timing SparkBackend.execute/execute/Compile/InlineApplyIR total 0.011ms self 0.002ms children 0.009ms %children 78.82%
2023-11-17 18:08:00.111 : INFO: timing SparkBackend.execute/execute/Compile/InlineApplyIR/Verify total 0.002ms self 0.002ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.111 : INFO: timing SparkBackend.execute/execute/Compile/InlineApplyIR/LoweringTransformation total 0.005ms self 0.005ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.112 : INFO: timing SparkBackend.execute/execute/Compile/InlineApplyIR/Verify total 0.001ms self 0.001ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.112 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after InlineApplyIR total 0.074ms self 0.002ms children 0.072ms %children 96.90%
2023-11-17 18:08:00.112 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after InlineApplyIR/Verify total 0.000ms self 0.000ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.112 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation total 0.071ms self 0.004ms children 0.067ms %children 94.33%
2023-11-17 18:08:00.112 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize total 0.067ms self 0.006ms children 0.061ms %children 90.68%
2023-11-17 18:08:00.112 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/FoldConstants total 0.016ms self 0.016ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.112 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.001ms self 0.001ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.112 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/NormalizeNames total 0.005ms self 0.005ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.112 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/Simplify total 0.005ms self 0.005ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.112 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/ForwardLets total 0.011ms self 0.011ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.112 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/ForwardRelationalLets total 0.010ms self 0.010ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.112 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after InlineApplyIR/LoweringTransformation/Optimize/PruneDeadFields total 0.013ms self 0.013ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.112 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after InlineApplyIR/Verify total 0.001ms self 0.001ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.112 : INFO: timing SparkBackend.execute/execute/Compile/LowerArrayAggsToRunAggs total 0.148ms self 0.003ms children 0.145ms %children 98.14%
2023-11-17 18:08:00.112 : INFO: timing SparkBackend.execute/execute/Compile/LowerArrayAggsToRunAggs/Verify total 0.002ms self 0.002ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.112 : INFO: timing SparkBackend.execute/execute/Compile/LowerArrayAggsToRunAggs/LoweringTransformation total 0.141ms self 0.141ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.112 : INFO: timing SparkBackend.execute/execute/Compile/LowerArrayAggsToRunAggs/Verify total 0.003ms self 0.003ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.112 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs total 0.075ms self 0.002ms children 0.073ms %children 96.69%
2023-11-17 18:08:00.112 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/Verify total 0.001ms self 0.001ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.112 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation total 0.072ms self 0.004ms children 0.068ms %children 94.22%
2023-11-17 18:08:00.112 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize total 0.068ms self 0.007ms children 0.061ms %children 90.23%
2023-11-17 18:08:00.112 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/FoldConstants total 0.017ms self 0.017ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.112 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/ExtractIntervalFilters total 0.002ms self 0.002ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.112 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/NormalizeNames total 0.003ms self 0.003ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.112 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/Simplify total 0.005ms self 0.005ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.112 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/ForwardLets total 0.012ms self 0.012ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.112 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/ForwardRelationalLets total 0.008ms self 0.008ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.112 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/LoweringTransformation/Optimize/PruneDeadFields total 0.014ms self 0.014ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.112 : INFO: timing SparkBackend.execute/execute/Compile/optimize: compileLowerer, after LowerArrayAggsToRunAggs/Verify total 0.001ms self 0.001ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.112 : INFO: timing SparkBackend.execute/execute/Compile/EmitContext.analyze total 0.127ms self 0.127ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.112 : INFO: timing SparkBackend.execute/execute/InitializeCompiledFunction total 1.121ms self 1.121ms children 0.000ms %children 0.00%
2023-11-17 18:08:00.112 : INFO: timing SparkBackend.execute/execute/RunCompiledFunction total 0.001ms self 0.001ms children 0.000ms %children 0.00%
